!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/darren@hiebert.com/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.0.1	//
ABBREV_HASH	c_bind.h	13;"	d
ACTION_NXSTATE	c_mode.h	243;"	d
ASCIITable	o_buffer.cpp	/^int EBuffer::ASCIITable(ExState &\/*State*\/) {$/;"	f	class:EBuffer
ATagMem	e_tags.cpp	/^static int ATagMem  = 0;$/;"	v	file:
ATags	e_tags.cpp	/^static int ATags = 0;$/;"	v	file:
AVIOWndProc	g_pm.cpp	/^MRESULT EXPENTRY AVIOWndProc(HWND hwnd, ULONG msg, MPARAM mp1, MPARAM mp2) {$/;"	f
Access	con_nt.cpp	/^    HANDLE Access;$/;"	m	struct:	file:
Access	con_os2.cpp	/^    HMTX Access;$/;"	m	struct:	file:
Access	g_pm.cpp	/^    HMTX Access;$/;"	m	struct:	file:
AccessPmClipboard	clip_pmv.cpp	/^static BOOL AccessPmClipboard(void) {$/;"	f	file:
Activate	g_motif.cpp	/^void GView::Activate(int gotfocus) {$/;"	f	class:GView
Activate	g_pm.cpp	/^void GFrame::Activate() {$/;"	f	class:GFrame
Activate	g_pm.cpp	/^void GView::Activate(int gotfocus) {$/;"	f	class:GView
Activate	g_qt.cpp	/^void GFrame::Activate() {$/;"	f	class:GFrame
Activate	g_qt.cpp	/^void GView::Activate(int gotfocus) {$/;"	f	class:GView
Activate	g_text.cpp	/^void GFrame::Activate() {$/;"	f	class:GFrame
Activate	g_text.cpp	/^void GView::Activate(int gotfocus) {$/;"	f	class:GView
Activate	i_ascii.cpp	/^void ExASCII::Activate(int gotfocus) {$/;"	f	class:ExASCII
Activate	i_choice.cpp	/^void ExChoice::Activate(int gotfocus) {$/;"	f	class:ExChoice
Activate	i_complete.cpp	/^void ExComplete::Activate(int gotfocus)$/;"	f	class:ExComplete
Activate	i_input.cpp	/^void ExInput::Activate(int gotfocus) {$/;"	f	class:ExInput
Activate	i_key.cpp	/^void ExKey::Activate(int gotfocus) {$/;"	f	class:ExKey
Activate	i_modelview.cpp	/^void ExModelView::Activate(int gotfocus) {$/;"	f	class:ExModelView
Activate	i_oview.cpp	/^void ExView::Activate(int \/*gotfocus*\/) {$/;"	f	class:ExView
Activate	i_search.cpp	/^void ExISearch::Activate(int gotfocus) {$/;"	f	class:ExISearch
Activate	i_view.cpp	/^void GxView::Activate(int gotfocus) {$/;"	f	class:GxView
Activate	o_buflist.cpp	/^int BufferView::Activate(int No) {$/;"	f	class:BufferView
Activate	o_directory.cpp	/^int EDirectory::Activate(int No) {$/;"	f	class:EDirectory
Activate	o_list.cpp	/^int EList::Activate() {$/;"	f	class:EList
Activate	o_list.cpp	/^int EList::Activate(int \/*No*\/) { return 0; }$/;"	f	class:EList
Activate	o_messages.cpp	/^int EMessages::Activate(int No) {$/;"	f	class:EMessages
Activate	o_routine.cpp	/^int RoutineView::Activate(int No) {$/;"	f	class:RoutineView
Activate	view.cpp	/^void EView::Activate(int GotFocus) {$/;"	f	class:EView
Active	gui.h	/^    GView *Top, *Active;$/;"	m	class:GFrame
ActiveEvent	g_qt.cpp	/^void QEText::ActiveEvent(TEvent &Event) {$/;"	f	class:QEText
ActiveEvent	g_qt.cpp	/^void QEView::ActiveEvent(TEvent &Event) {$/;"	f	class:QEView
ActiveMap	egui.h	/^    EKeyMap *ActiveMap;$/;"	m	class:EGUI
ActiveModel	o_model.cpp	/^EModel *ActiveModel = 0;$/;"	v
ActiveView	view.cpp	/^EView *ActiveView = 0;$/;"	v
AddAbbrev	c_bind.cpp	/^int EEventMap::AddAbbrev(EAbbrev *ab) {$/;"	f	class:EEventMap
AddCRegexp	o_messages.cpp	/^int AddCRegexp(int file, int line, int msg, const char *regexp) {$/;"	f
AddCommand	c_bind.cpp	/^int AddCommand(int no, int Command, int count, int ign) {$/;"	f
AddConcat	c_bind.cpp	/^int AddConcat(int no) {$/;"	f
AddError	o_messages.cpp	/^void EMessages::AddError(Error *p) {$/;"	f	class:EMessages
AddError	o_messages.cpp	/^void EMessages::AddError(char *file, int line, char *msg, const char *text) {$/;"	f	class:EMessages
AddFileError	o_messages.cpp	/^void EMessages::AddFileError(EBuffer *B, int err) {$/;"	f	class:EMessages
AddInputHistory	c_history.cpp	/^int AddInputHistory(int Id, char *String) { \/*fold00*\/$/;"	f
AddKey	c_bind.cpp	/^void EKeyMap::AddKey(EKey *aKey) {$/;"	f	class:EKeyMap
AddKeyword	c_config.cpp	/^int AddKeyword(ColorKeywords *tab, char color, const char *keyword) {$/;"	f
AddLine	o_modemap.cpp	/^void EventMapView::AddLine(const char *Line) {$/;"	f	class:EventMapView
AddNode	e_regex.cpp	/^static int AddNode(RxNode **F, RxNode **N, RxNode *A) {$/;"	f	file:
AddNumber	c_bind.cpp	/^int AddNumber(int no, long number) {$/;"	f
AddState	c_hilit.cpp	/^void HMachine::AddState(HState &aState) {$/;"	f	class:HMachine
AddString	c_bind.cpp	/^int AddString(int no, const char *String) {$/;"	f
AddTag	e_tags.cpp	/^static int AddTag(int Tag, int FileName, int TagBase, int Line, int StrFind) { \/*FOLD00*\/$/;"	f	file:
AddTrans	c_hilit.cpp	/^void HMachine::AddTrans(HTrans &aTrans) {$/;"	f	class:HMachine
AddVariable	c_bind.cpp	/^int AddVariable(int no, int number) {$/;"	f
AddView	g_motif.cpp	/^int GFrame::AddView(GView *view) {$/;"	f	class:GFrame
AddView	g_pm.cpp	/^int GFrame::AddView(GView *view) {$/;"	f	class:GFrame
AddView	g_qt.cpp	/^int GFrame::AddView(GView *view) {$/;"	f	class:GFrame
AddView	g_text.cpp	/^int GFrame::AddView(GView *view) {$/;"	f	class:GFrame
AddView	o_model.cpp	/^void EModel::AddView(EView *V) {$/;"	f	class:EModel
AllocBuffer	con_x11.cpp	/^static int AllocBuffer() {$/;"	f	file:
AllocBuffer	g_motif.cpp	/^int GViewPeer::AllocBuffer() {$/;"	f	class:GViewPeer
AllocBuffer	g_qt.cpp	/^int GViewPeer::AllocBuffer() {$/;"	f	class:GViewPeer
AllocMem	e_tags.cpp	/^static int AllocMem(char *Mem, int Len) { \/*FOLD00*\/$/;"	f	file:
AllocVis	e_line.cpp	/^int EBuffer::AllocVis(int ACount) {$/;"	f	class:EBuffer
Allocate	e_line.cpp	/^int EBuffer::Allocate(int ACount) {$/;"	f	class:EBuffer
Allocate	e_line.cpp	/^int ELine::Allocate(unsigned int Bytes) { $/;"	f	class:ELine
AppContext	g_motif.cpp	/^static XtAppContext AppContext;$/;"	v	file:
Arg	console.h	/^    char *Arg;$/;"	m	struct:_mItem
AssertLine	e_buffer.cpp	/^int EBuffer::AssertLine(int Row) {$/;"	f	class:EBuffer
AutoExtend	e_buffer.h	/^    int AutoExtend;$/;"	m	class:EBuffer
BB	e_buffer.h	/^    EPoint BB;$/;"	m	class:EBuffer
BCount	o_buflist.h	/^    int BCount;$/;"	m	class:BufferView
BCount	o_modemap.h	/^    int BCount;$/;"	m	class:EventMapView
BE	e_buffer.h	/^    EPoint BE;$/;"	m	class:EBuffer
BFI	c_mode.h	121;"	d
BFI_Abbreviations	c_mode.h	95;"	d
BFI_AddCR	c_mode.h	87;"	d
BFI_AddLF	c_mode.h	86;"	d
BFI_AutoHilitParen	c_mode.h	94;"	d
BFI_AutoIndent	c_mode.h	53;"	d
BFI_AutoSave	c_mode.h	64;"	d
BFI_BackSpKillBlock	c_mode.h	96;"	d
BFI_BackSpKillTab	c_mode.h	67;"	d
BFI_BackSpUnindents	c_mode.h	69;"	d
BFI_COUNT	c_mode.h	105;"	d
BFI_Colorizer	c_mode.h	81;"	d
BFI_CursorThroughTabs	c_mode.h	74;"	d
BFI_DeleteKillBlock	c_mode.h	97;"	d
BFI_DeleteKillTab	c_mode.h	68;"	d
BFI_DetectLineSep	c_mode.h	102;"	d
BFI_DrawOn	c_mode.h	55;"	d
BFI_EventMap	c_mode.h	100;"	d
BFI_ExpandTabs	c_mode.h	57;"	d
BFI_ForceNewLine	c_mode.h	88;"	d
BFI_HardMode	c_mode.h	61;"	d
BFI_HilitOn	c_mode.h	56;"	d
BFI_IndentMode	c_mode.h	82;"	d
BFI_IndentWithTabs	c_mode.h	71;"	d
BFI_Insert	c_mode.h	54;"	d
BFI_InsertKillBlock	c_mode.h	99;"	d
BFI_KeepBackups	c_mode.h	65;"	d
BFI_LeftMargin	c_mode.h	78;"	d
BFI_LineChar	c_mode.h	84;"	d
BFI_LoadMargin	c_mode.h	89;"	d
BFI_MatchCase	c_mode.h	66;"	d
BFI_MultiLineHilit	c_mode.h	75;"	d
BFI_PersistentBlocks	c_mode.h	98;"	d
BFI_ReadOnly	c_mode.h	63;"	d
BFI_RightMargin	c_mode.h	79;"	d
BFI_SET	c_mode.h	122;"	d
BFI_SaveFolds	c_mode.h	90;"	d
BFI_SeeThruSel	c_mode.h	72;"	d
BFI_ShowMarkers	c_mode.h	73;"	d
BFI_ShowTabs	c_mode.h	60;"	d
BFI_SpaceTabs	c_mode.h	70;"	d
BFI_StripChar	c_mode.h	85;"	d
BFI_TabSize	c_mode.h	59;"	d
BFI_Trim	c_mode.h	58;"	d
BFI_TrimOnSave	c_mode.h	103;"	d
BFI_Undo	c_mode.h	62;"	d
BFI_UndoLimit	c_mode.h	92;"	d
BFI_UndoMoves	c_mode.h	101;"	d
BFI_WordWrap	c_mode.h	77;"	d
BFS	c_mode.h	123;"	d
BFS_COUNT	c_mode.h	116;"	d
BFS_CapitalChars	c_mode.h	119;"	d
BFS_CommentEnd	c_mode.h	111;"	d
BFS_CommentStart	c_mode.h	110;"	d
BFS_CompileCommand	c_mode.h	114;"	d
BFS_DefFindOpt	c_mode.h	108;"	d
BFS_DefFindReplaceOpt	c_mode.h	109;"	d
BFS_FileNameRx	c_mode.h	112;"	d
BFS_FirstLineRx	c_mode.h	113;"	d
BFS_RoutineRegexp	c_mode.h	107;"	d
BFS_WordChars	c_mode.h	118;"	d
BList	o_buflist.h	/^    char **BList;$/;"	m	class:BufferView
BList	o_modemap.h	/^    char **BList;$/;"	m	class:EventMapView
BM	e_buffer.h	/^    EPoint BM;$/;"	m	struct:
BMCount	e_buffer.h	/^    int BMCount;$/;"	m	class:EBuffer
BMarks	e_buffer.h	/^    EBookmark *BMarks;$/;"	m	class:EBuffer
BOOLYESNO	log.h	191;"	d
BOOLYESNO	log.h	298;"	d
BUFLEN	bin2c.cpp	3;"	d	file:
BUF_SZ	s_util.cpp	13;"	d	file:
BackSpace	e_cmds.cpp	/^int EBuffer::BackSpace() {$/;"	f	class:EBuffer
BeginMacro	egui.cpp	/^int EGUI::BeginMacro(GxView *view) {$/;"	f	class:EGUI
BeginMacro	i_ascii.cpp	/^int ExASCII::BeginMacro() {$/;"	f	class:ExASCII
BeginMacro	i_choice.cpp	/^int ExChoice::BeginMacro() {$/;"	f	class:ExChoice
BeginMacro	i_complete.cpp	/^int ExComplete::BeginMacro()$/;"	f	class:ExComplete
BeginMacro	i_input.cpp	/^int ExInput::BeginMacro() {$/;"	f	class:ExInput
BeginMacro	i_key.cpp	/^int ExKey::BeginMacro() {$/;"	f	class:ExKey
BeginMacro	i_modelview.cpp	/^int ExModelView::BeginMacro() {$/;"	f	class:ExModelView
BeginMacro	i_oview.cpp	/^int ExView::BeginMacro() {$/;"	f	class:ExView
BeginMacro	i_search.cpp	/^int ExISearch::BeginMacro() { return 1; }$/;"	f	class:ExISearch
BeginMacro	i_view.cpp	/^int GxView::BeginMacro() {$/;"	f	class:GxView
BeginMacro	o_buffer.cpp	/^int EBuffer::BeginMacro() {$/;"	f	class:EBuffer
BeginMacro	o_list.cpp	/^int EList::BeginMacro() { return 1; }$/;"	f	class:EList
BeginMacro	o_model.cpp	/^int EModel::BeginMacro() { return 1; }$/;"	f	class:EModel
BeginMacro	view.cpp	/^int EView::BeginMacro() {$/;"	f	class:EView
BeginUndo	e_undo.cpp	/^int EBuffer::BeginUndo() {$/;"	f	class:EBuffer
BinChar	log.h	/^inline ostream_func1_char BinChar(char c)$/;"	f
BinChar	log.h	301;"	d
BlockBegin	e_block.cpp	/^int EBuffer::BlockBegin() {$/;"	f	class:EBuffer
BlockCaseDown	e_trans.cpp	/^int EBuffer::BlockCaseDown() {$/;"	f	class:EBuffer
BlockCaseToggle	e_trans.cpp	/^int EBuffer::BlockCaseToggle() {$/;"	f	class:EBuffer
BlockCaseUp	e_trans.cpp	/^int EBuffer::BlockCaseUp() {$/;"	f	class:EBuffer
BlockClear	e_block.cpp	/^int EBuffer::BlockClear() {$/;"	f	class:EBuffer
BlockCopy	e_block.cpp	/^int EBuffer::BlockCopy(int Append) {$/;"	f	class:EBuffer
BlockCut	e_block.cpp	/^int EBuffer::BlockCut(int Append) {$/;"	f	class:EBuffer
BlockEnTab	e_block.cpp	/^int EBuffer::BlockEnTab() {$/;"	f	class:EBuffer
BlockEnd	e_block.cpp	/^int EBuffer::BlockEnd() {$/;"	f	class:EBuffer
BlockExtendBegin	e_block.cpp	/^int EBuffer::BlockExtendBegin() {$/;"	f	class:EBuffer
BlockExtendEnd	e_block.cpp	/^int EBuffer::BlockExtendEnd() {$/;"	f	class:EBuffer
BlockIndent	e_block.cpp	/^int EBuffer::BlockIndent() {$/;"	f	class:EBuffer
BlockIsMarked	e_block.cpp	/^int EBuffer::BlockIsMarked() {$/;"	f	class:EBuffer
BlockKill	e_block.cpp	/^int EBuffer::BlockKill() {$/;"	f	class:EBuffer
BlockMarkColumn	e_block.cpp	/^int EBuffer::BlockMarkColumn() {$/;"	f	class:EBuffer
BlockMarkFunction	e_block.cpp	/^int EBuffer::BlockMarkFunction() {$/;"	f	class:EBuffer
BlockMarkLine	e_block.cpp	/^int EBuffer::BlockMarkLine() {$/;"	f	class:EBuffer
BlockMarkStream	e_block.cpp	/^int EBuffer::BlockMarkStream() {$/;"	f	class:EBuffer
BlockMode	e_buffer.h	/^    int BlockMode;$/;"	m	class:EBuffer
BlockPaste	e_block.cpp	/^int EBuffer::BlockPaste() {$/;"	f	class:EBuffer
BlockPasteColumn	e_block.cpp	/^int EBuffer::BlockPasteColumn() {$/;"	f	class:EBuffer
BlockPasteLine	e_block.cpp	/^int EBuffer::BlockPasteLine() {$/;"	f	class:EBuffer
BlockPasteStream	e_block.cpp	/^int EBuffer::BlockPasteStream() {$/;"	f	class:EBuffer
BlockPrint	e_print.cpp	/^int EBuffer::BlockPrint() {$/;"	f	class:EBuffer
BlockReIndent	e_block.cpp	/^int EBuffer::BlockReIndent() {$/;"	f	class:EBuffer
BlockRead	o_buffer.cpp	/^int EBuffer::BlockRead(ExState &State) {$/;"	f	class:EBuffer
BlockReadColumn	o_buffer.cpp	/^int EBuffer::BlockReadColumn(ExState &State) {$/;"	f	class:EBuffer
BlockReadFrom	e_block.cpp	/^int EBuffer::BlockReadFrom(char *AFileName, int blockMode) {$/;"	f	class:EBuffer
BlockReadLine	o_buffer.cpp	/^int EBuffer::BlockReadLine(ExState &State) {$/;"	f	class:EBuffer
BlockReadStream	o_buffer.cpp	/^int EBuffer::BlockReadStream(ExState &State) {$/;"	f	class:EBuffer
BlockReadX	o_buffer.cpp	/^int EBuffer::BlockReadX(ExState &State, int blockMode) {$/;"	f	class:EBuffer
BlockRedraw	e_block.cpp	/^int EBuffer::BlockRedraw() {$/;"	f	class:EBuffer
BlockSelectLine	e_block.cpp	/^int EBuffer::BlockSelectLine() {$/;"	f	class:EBuffer
BlockSelectPara	e_block.cpp	/^int EBuffer::BlockSelectPara() {$/;"	f	class:EBuffer
BlockSelectWord	e_block.cpp	/^int EBuffer::BlockSelectWord() {$/;"	f	class:EBuffer
BlockSort	e_block.cpp	/^int EBuffer::BlockSort(int Reverse) {$/;"	f	class:EBuffer
BlockTrans	e_trans.cpp	/^int EBuffer::BlockTrans(ExState &State) {$/;"	f	class:EBuffer
BlockTrans	e_trans.cpp	/^int EBuffer::BlockTrans(TransTable tab) {$/;"	f	class:EBuffer
BlockTrim	e_cmds.cpp	/^int EBuffer::BlockTrim() {$/;"	f	class:EBuffer
BlockUnTab	e_block.cpp	/^int EBuffer::BlockUnTab() {$/;"	f	class:EBuffer
BlockUnindent	e_block.cpp	/^int EBuffer::BlockUnindent() {$/;"	f	class:EBuffer
BlockUnmark	e_block.cpp	/^int EBuffer::BlockUnmark() {$/;"	f	class:EBuffer
BlockWrite	o_buffer.cpp	/^int EBuffer::BlockWrite(ExState &State) {$/;"	f	class:EBuffer
BlockWriteTo	e_block.cpp	/^int EBuffer::BlockWriteTo(char *AFileName, int Append) {$/;"	f	class:EBuffer
Bottom	i_view.h	/^    ExView *Bottom;$/;"	m	class:GxView
Buf	o_messages.h	/^    EBuffer *Buf;$/;"	m	struct:
BufLen	o_messages.h	/^    int BufLen;$/;"	m	class:EMessages
BufPos	o_messages.h	/^    int BufPos;$/;"	m	class:EMessages
Buffer	e_buffer.h	/^    EBuffer *Buffer;$/;"	m	class:EEditPort
Buffer	e_mark.h	/^    EBuffer *Buffer;$/;"	m	class:EMark
Buffer	i_complete.h	/^    EBuffer *Buffer;$/;"	m	class:ExComplete
Buffer	i_search.h	/^    EBuffer *Buffer;$/;"	m	class:ExISearch
Buffer	o_routine.h	/^    EBuffer *Buffer;$/;"	m	class:RoutineView
BufferList	o_buflist.cpp	/^BufferView *BufferList = 0;$/;"	v
BufferView	o_buflist.cpp	/^BufferView::BufferView(int createFlags, EModel **ARoot): EList(createFlags, ARoot, "Buffers") {$/;"	f	class:BufferView
BufferView	o_buflist.h	/^class BufferView: public EList {$/;"	c
Buttons	console.h	/^    unsigned short Buttons;$/;"	m	struct:
C	c_color.cpp	/^    ChColor *C;$/;"	m	struct:	file:
CColumn	e_cmds.cpp	/^int EBuffer::CColumn() {$/;"	f	class:EBuffer
CF_ABBREV	c_fconfig.h	35;"	d
CF_COLOR	c_fconfig.h	29;"	d
CF_COLORIZE	c_fconfig.h	34;"	d
CF_COMMAND	c_fconfig.h	21;"	d
CF_COMPRX	c_fconfig.h	32;"	d
CF_CONCAT	c_fconfig.h	42;"	d
CF_END	c_fconfig.h	17;"	d
CF_EOF	c_fconfig.h	44;"	d
CF_EVENTMAP	c_fconfig.h	33;"	d
CF_HSTATE	c_fconfig.h	36;"	d
CF_HTRANS	c_fconfig.h	37;"	d
CF_HWORDS	c_fconfig.h	38;"	d
CF_HWTYPE	c_fconfig.h	40;"	d
CF_INT	c_fconfig.h	14;"	d
CF_ITEM	c_fconfig.h	22;"	d
CF_KEY	c_fconfig.h	28;"	d
CF_KEYSUB	c_fconfig.h	27;"	d
CF_KEYWORD	c_fconfig.h	30;"	d
CF_MENU	c_fconfig.h	19;"	d
CF_MENUSUB	c_fconfig.h	24;"	d
CF_MODE	c_fconfig.h	25;"	d
CF_OBJECT	c_fconfig.h	20;"	d
CF_PARENT	c_fconfig.h	26;"	d
CF_REGEXP	c_fconfig.h	15;"	d
CF_SETVAR	c_fconfig.h	31;"	d
CF_STRING	c_fconfig.h	13;"	d
CF_SUB	c_fconfig.h	18;"	d
CF_SUBMENU	c_fconfig.h	23;"	d
CF_SUBMENUCOND	c_fconfig.h	39;"	d
CF_VARIABLE	c_fconfig.h	41;"	d
CHAR_TRESHOLD	e_buffer.h	55;"	d
CHECK	e_regex.cpp	476;"	d	file:
CK_MAXLEN	c_hilit.h	146;"	d
CLR_CPreprocessor	c_mode.h	203;"	d
CLR_Changed	c_mode.h	217;"	d
CLR_Command	c_mode.h	212;"	d
CLR_Comment	c_mode.h	202;"	d
CLR_Control	c_mode.h	218;"	d
CLR_Directive	c_mode.h	222;"	d
CLR_FloatNumber	c_mode.h	210;"	d
CLR_Function	c_mode.h	211;"	d
CLR_Header	c_mode.h	205;"	d
CLR_HexNumber	c_mode.h	208;"	d
CLR_Keyword	c_mode.h	200;"	d
CLR_Label	c_mode.h	223;"	d
CLR_New	c_mode.h	215;"	d
CLR_Normal	c_mode.h	199;"	d
CLR_Number	c_mode.h	207;"	d
CLR_OctalNumber	c_mode.h	209;"	d
CLR_Old	c_mode.h	216;"	d
CLR_Punctuation	c_mode.h	214;"	d
CLR_QuoteDelim	c_mode.h	225;"	d
CLR_Quotes	c_mode.h	206;"	d
CLR_Regexp	c_mode.h	204;"	d
CLR_RegexpDelim	c_mode.h	226;"	d
CLR_Separator	c_mode.h	219;"	d
CLR_Special	c_mode.h	224;"	d
CLR_String	c_mode.h	201;"	d
CLR_Symbol	c_mode.h	221;"	d
CLR_Tag	c_mode.h	213;"	d
CLR_Variable	c_mode.h	220;"	d
CLine	e_cmds.cpp	/^int EBuffer::CLine() {$/;"	f	class:EBuffer
CMD	g_pm.cpp	310;"	d	file:
CMD_EXT	c_mode.h	13;"	d
CMD_GET	clip_vio.cpp	23;"	d	file:
CMD_GET	clipprog.cpp	22;"	d	file:
CMD_GET	clipserv.cpp	22;"	d	file:
CMD_PUT	clip_vio.cpp	24;"	d	file:
CMD_PUT	clipprog.cpp	23;"	d	file:
CMD_PUT	clipserv.cpp	23;"	d	file:
CMacros	c_bind.cpp	/^int CMacros = 0;$/;"	v
CMacros	cfte.cpp	/^unsigned int CMacros = 0;$/;"	v
CMap	egui.h	/^    EEventMap *CMap;$/;"	m	class:EFrame
CModel	egui.h	/^    EModel *CModel;$/;"	m	class:EFrame
COLORIZE_FLG	cfte.cpp	257;"	d	file:
COL_SyntaxParser	c_mode.h	197;"	d
COM_ERR	i_complete.cpp	225;"	d	file:
COM_HIGH	i_complete.cpp	223;"	d	file:
COM_MARK	i_complete.cpp	224;"	d	file:
COM_NORM	i_complete.cpp	221;"	d	file:
COM_ORIG	i_complete.cpp	222;"	d	file:
CONFIG_ABBREV	feature.h	39;"	d
CONFIG_BLOCK_COLUMN	feature.h	33;"	d
CONFIG_BLOCK_LINE	feature.h	34;"	d
CONFIG_BLOCK_STREAM	feature.h	32;"	d
CONFIG_BOOKMARKS	feature.h	37;"	d
CONFIG_CLIPBOARD	feature.h	19;"	d
CONFIG_CONFIGURABLE	feature.h	17;"	d
CONFIG_DESKTOP	feature.h	30;"	d
CONFIG_EMULATE_VI	feature.h	15;"	d
CONFIG_FOLDS	feature.h	44;"	d
CONFIG_HILIT_ADA	feature.h	66;"	d
CONFIG_HILIT_C	feature.h	62;"	d
CONFIG_HILIT_CATBS	feature.h	76;"	d
CONFIG_HILIT_DIFF	feature.h	68;"	d
CONFIG_HILIT_FTE	feature.h	75;"	d
CONFIG_HILIT_HTML	feature.h	64;"	d
CONFIG_HILIT_IPF	feature.h	70;"	d
CONFIG_HILIT_MAKE	feature.h	67;"	d
CONFIG_HILIT_MERGE	feature.h	69;"	d
CONFIG_HILIT_MSG	feature.h	71;"	d
CONFIG_HILIT_PASCAL	feature.h	73;"	d
CONFIG_HILIT_PERL	feature.h	65;"	d
CONFIG_HILIT_REXX	feature.h	63;"	d
CONFIG_HILIT_SH	feature.h	72;"	d
CONFIG_HILIT_SIMPLE	feature.h	77;"	d
CONFIG_HILIT_TEX	feature.h	74;"	d
CONFIG_HISTORY	feature.h	29;"	d
CONFIG_ID	c_fconfig.h	46;"	d
CONFIG_INDENT_C	feature.h	81;"	d
CONFIG_INDENT_REXX	feature.h	89;"	d
CONFIG_INDENT_SIMPLE	feature.h	85;"	d
CONFIG_IOBLOCKS	feature.h	35;"	d
CONFIG_I_ASCII	feature.h	28;"	d
CONFIG_I_COMPLETE	feature.h	92;"	d
CONFIG_I_SEARCH	feature.h	27;"	d
CONFIG_MBUFFERS	feature.h	24;"	d
CONFIG_MENUS	feature.h	25;"	d
CONFIG_MFRAMES	feature.h	22;"	d
CONFIG_MOUSE	feature.h	18;"	d
CONFIG_MWINDOWS	feature.h	23;"	d
CONFIG_OBJ_BUFFERS	feature.h	54;"	d
CONFIG_OBJ_DIRECTORY	feature.h	52;"	d
CONFIG_OBJ_FILE	feature.h	49;"	d
CONFIG_OBJ_HEXEDIT	feature.h	46;"	d
CONFIG_OBJ_LIST	feature.h	48;"	d
CONFIG_OBJ_MESSAGES	feature.h	55;"	d
CONFIG_OBJ_ROUTINE	feature.h	53;"	d
CONFIG_OBJ_VIEWER	feature.h	47;"	d
CONFIG_PRINTING	feature.h	36;"	d
CONFIG_REGEXPS	feature.h	43;"	d
CONFIG_SCROLLBARS	feature.h	26;"	d
CONFIG_SHELL	feature.h	20;"	d
CONFIG_SYNTAX_HILIT	feature.h	58;"	d
CONFIG_TAGS	feature.h	40;"	d
CONFIG_UNDOREDO	feature.h	42;"	d
CONFIG_WORDWRAP	feature.h	38;"	d
CONFIG_WORD_HILIT	feature.h	59;"	d
CONTEXT_BUFFERS	c_mode.h	24;"	d
CONTEXT_CHAR	c_mode.h	23;"	d
CONTEXT_CHOICE	c_mode.h	21;"	d
CONTEXT_DIRECTORY	c_mode.h	17;"	d
CONTEXT_FILE	c_mode.h	16;"	d
CONTEXT_INPUT	c_mode.h	20;"	d
CONTEXT_LIST	c_mode.h	22;"	d
CONTEXT_MAPVIEW	c_mode.h	26;"	d
CONTEXT_MESSAGES	c_mode.h	18;"	d
CONTEXT_NONE	c_mode.h	15;"	d
CONTEXT_ROUTINES	c_mode.h	25;"	d
CONTEXT_SHELL	c_mode.h	19;"	d
COPYRIGHT	ftever.h	9;"	d
COUNT_CLR	c_mode.h	228;"	d
CP	e_buffer.h	/^    EPoint CP;$/;"	m	class:EBuffer
CP	e_buffer.h	/^    EPoint CP;$/;"	m	class:EEditPort
CRegexp	o_messages.cpp	/^} CRegexp[MAXREGEXP];$/;"	v
CStrLen	g_draw.cpp	/^int CStrLen(const char *p) {$/;"	f
CT_COMMAND	c_bind.h	80;"	d
CT_CONCAT	c_bind.h	84;"	d
CT_NUMBER	c_bind.h	81;"	d
CT_STRING	c_bind.h	82;"	d
CT_VARIABLE	c_bind.h	83;"	d
CTags	e_tags.cpp	/^static int CTags = 0;            \/\/ number of tags$/;"	v	file:
CURSOR_TYPE	g_pm.cpp	66;"	d	file:
C_BRACE_OFS	h_c.cpp	424;"	d	file:
C_BraceOfs	h_c.cpp	/^int C_BraceOfs = 0;$/;"	v
C_CASE_DELTA	h_c.cpp	427;"	d	file:
C_CASE_OFS	h_c.cpp	426;"	d	file:
C_CLASS_DELTA	h_c.cpp	429;"	d	file:
C_CLASS_OFS	h_c.cpp	428;"	d	file:
C_COLON_OFS	h_c.cpp	430;"	d	file:
C_COMMENT_DELTA	h_c.cpp	432;"	d	file:
C_COMMENT_OFS	h_c.cpp	431;"	d	file:
C_CONTINUATION	h_c.cpp	433;"	d	file:
C_CaseDelta	h_c.cpp	/^int C_CaseDelta = 4;$/;"	v
C_CaseOfs	h_c.cpp	/^int C_CaseOfs = 0;$/;"	v
C_ClassDelta	h_c.cpp	/^int C_ClassDelta = 4;$/;"	v
C_ClassOfs	h_c.cpp	/^int C_ClassOfs = 0;$/;"	v
C_ColonOfs	h_c.cpp	/^int C_ColonOfs = 0;\/\/-4;$/;"	v
C_CommentDelta	h_c.cpp	/^int C_CommentDelta = 1;$/;"	v
C_CommentOfs	h_c.cpp	/^int C_CommentOfs = 0;$/;"	v
C_Continuation	h_c.cpp	/^int C_Continuation = 4;$/;"	v
C_FIRST_INDENT	h_c.cpp	434;"	d	file:
C_FIRST_WIDTH	h_c.cpp	435;"	d	file:
C_FirstLevelIndent	h_c.cpp	/^int C_FirstLevelIndent = 4;$/;"	v
C_FirstLevelWidth	h_c.cpp	/^int C_FirstLevelWidth = -1;$/;"	v
C_INDENT	h_c.cpp	423;"	d	file:
C_Indent	h_c.cpp	/^int C_Indent = 4;$/;"	v
C_PAREN_DELTA	h_c.cpp	425;"	d	file:
C_ParenDelta	h_c.cpp	/^int C_ParenDelta = -1;$/;"	v
CalcFrameSWP	g_pm.cpp	/^BOOL CalcFrameSWP(HWND hwnd, PSWP pswp, BOOL bFrame) {$/;"	f
CanActivate	o_directory.cpp	/^int EDirectory::CanActivate(int Line) { return 1; }$/;"	f	class:EDirectory
CanActivate	o_list.cpp	/^int EList::CanActivate(int \/*Line*\/) { return 1; }$/;"	f	class:EList
CanActivate	o_messages.cpp	/^int EMessages::CanActivate(int Line) {$/;"	f	class:EMessages
CanActivate	o_modemap.cpp	/^int EventMapView::CanActivate(int \/*Line*\/) {$/;"	f	class:EventMapView
CanQuit	o_buffer.cpp	/^int EBuffer::CanQuit() {$/;"	f	class:EBuffer
CanQuit	o_model.cpp	/^int EModel::CanQuit() {$/;"	f	class:EModel
CanQuit	view.cpp	/^int EView::CanQuit() {$/;"	f	class:EView
CanRedo	e_cmds.cpp	/^int EBuffer::CanRedo() {$/;"	f	class:EBuffer
CanUndo	e_cmds.cpp	/^int EBuffer::CanUndo() {$/;"	f	class:EBuffer
CapitalChars	c_mode.h	/^    char CapitalChars[32];$/;"	m	struct:
CaptureFocus	g_pm.cpp	/^int GView::CaptureFocus(int grab) {$/;"	f	class:GView
CaptureFocus	g_text.cpp	/^int GView::CaptureFocus(int grab) {$/;"	f	class:GView
CaptureFocus	g_text.cpp	/^int GViewPeer::CaptureFocus(int grab) {$/;"	f	class:GViewPeer
CaptureMouse	g_motif.cpp	/^int GView::CaptureMouse(int grab) {$/;"	f	class:GView
CaptureMouse	g_pm.cpp	/^int GView::CaptureMouse(int grab) {$/;"	f	class:GView
CaptureMouse	g_qt.cpp	/^int GView::CaptureMouse(int grab) {$/;"	f	class:GView
CaptureMouse	g_text.cpp	/^int GView::CaptureMouse(int grab) {$/;"	f	class:GView
CaptureMouse	g_text.cpp	/^int GViewPeer::CaptureMouse(int grab) {$/;"	f	class:GViewPeer
CenterNearPos	e_buffer.cpp	/^int EBuffer::CenterNearPos(int Col, int Row, int tabMode) {$/;"	f	class:EBuffer
CenterNearPosR	e_buffer.cpp	/^int EBuffer::CenterNearPosR(int Col, int Row, int tabMode) {$/;"	f	class:EBuffer
CenterPos	e_buffer.cpp	/^int EBuffer::CenterPos(int Col, int Row, int tabMode) {$/;"	f	class:EBuffer
CenterPosR	e_buffer.cpp	/^int EBuffer::CenterPosR(int Col, int Row, int tabMode) {$/;"	f	class:EBuffer
CfgKW	cfte.cpp	/^OrdLookup CfgKW[] = {$/;"	v
CfgVar	cfte.cpp	/^OrdLookup CfgVar[] = {$/;"	v
ChClass	e_buffer.h	41;"	d
ChClass	e_regex.cpp	564;"	d	file:
ChClassK	e_buffer.h	42;"	d
ChColor	c_mode.h	/^typedef unsigned char ChColor;$/;"	t
ChangeDir	o_directory.cpp	/^int EDirectory::ChangeDir(ExState &State) {$/;"	f	class:EDirectory
ChangeDir	s_files.cpp	/^int ChangeDir(char *Dir) {$/;"	f
ChangeFlags	e_cmds.cpp	/^int EBuffer::ChangeFlags(char *AMode) {$/;"	f	class:EBuffer
ChangeFlags	o_buffer.cpp	/^int EBuffer::ChangeFlags(ExState &State) {$/;"	f	class:EBuffer
ChangeKeys	e_cmds.cpp	/^int EBuffer::ChangeKeys(char *AMode) {$/;"	f	class:EBuffer
ChangeKeys	o_buffer.cpp	/^int EBuffer::ChangeKeys(ExState &State) {$/;"	f	class:EBuffer
ChangeLeftMargin	o_buffer.cpp	/^int EBuffer::ChangeLeftMargin(ExState &State) {$/;"	f	class:EBuffer
ChangeMode	e_cmds.cpp	/^int EBuffer::ChangeMode(char *AMode) {$/;"	f	class:EBuffer
ChangeMode	o_buffer.cpp	/^int EBuffer::ChangeMode(ExState &State) {$/;"	f	class:EBuffer
ChangeRightMargin	o_buffer.cpp	/^int EBuffer::ChangeRightMargin(ExState &State) {$/;"	f	class:EBuffer
ChangeTabSize	o_buffer.cpp	/^int EBuffer::ChangeTabSize(ExState &State) {$/;"	f	class:EBuffer
CharCaseDown	e_trans.cpp	/^int EBuffer::CharCaseDown() {$/;"	f	class:EBuffer
CharCaseToggle	e_trans.cpp	/^int EBuffer::CharCaseToggle() {$/;"	f	class:EBuffer
CharCaseUp	e_trans.cpp	/^int EBuffer::CharCaseUp() {$/;"	f	class:EBuffer
CharMap	egui.h	/^    char CharMap[32];$/;"	m	class:EGUI
CharOffset	e_line.cpp	/^int EBuffer::CharOffset(ELine *L, int ScreenPos) {$/;"	f	class:EBuffer
CharScan	con_dosx.cpp	/^	unsigned short CharScan;$/;"	m	struct:	file:
CharScan	con_nt.cpp	/^    USHORT CharScan;$/;"	m	struct:	file:
CharScan	con_os2.cpp	/^    USHORT CharScan;$/;"	m	struct:	file:
CharTrans	e_trans.cpp	/^int EBuffer::CharTrans(ExState &State) {$/;"	f	class:EBuffer
CharTrans	e_trans.cpp	/^int EBuffer::CharTrans(TransTable tab) {$/;"	f	class:EBuffer
Chars	e_buffer.h	/^    char *Chars;$/;"	m	class:ELine
CheckASCII	i_complete.h	/^    inline int CheckASCII(int c) {$/;"	f	class:ExComplete
CheckBlock	e_block.cpp	/^int EBuffer::CheckBlock() {$/;"	f	class:EBuffer
CheckLabel	h_c.cpp	/^static int CheckLabel(EBuffer *B, int Line) {$/;"	f	file:
CheckLabel	h_rexx.cpp	/^static int CheckLabel(EBuffer *B, int Line) {$/;"	f	file:
ChgChars	e_buffer.cpp	/^int EBuffer::ChgChars(int Row, int Ofs, int ACount, char * \/*Buffer*\/) {$/;"	f	class:EBuffer
Choice	i_view.cpp	/^int GxView::Choice(unsigned long Flags, const char *Title, int NSel, ... \/* choices, format, args *\/) {$/;"	f	class:GxView
ChoiceInfo	g_pm.cpp	/^} ChoiceInfo;$/;"	t	file:
Cleanup	con_linux.cpp	/^static void Cleanup() {$/;"	f	file:
Clear	e_buffer.cpp	/^int EBuffer::Clear() {$/;"	f	class:EBuffer
ClearHistory	c_history.cpp	/^void ClearHistory() { \/*FOLD00*\/$/;"	f
ClearMessages	view.cpp	/^int EView::ClearMessages() {$/;"	f	class:EView
ClearTagStack	e_tags.cpp	/^static void ClearTagStack() { \/*FOLD00*\/$/;"	f	file:
ClipClear	e_block.cpp	/^int EBuffer::ClipClear() {$/;"	f	class:EBuffer
ClipData	clip.h	/^} ClipData;$/;"	t
Close	e_regex.h	/^    int Close[NSEXPS];$/;"	m	struct:
ClosePipe	con_dosx.cpp	/^int GUI::ClosePipe(int id) {$/;"	f	class:GUI
ClosePipe	con_linux.cpp	/^int GUI::ClosePipe(int id) {$/;"	f	class:GUI
ClosePipe	con_nt.cpp	/^int GUI::ClosePipe(int id) {$/;"	f	class:GUI
ClosePipe	con_os2.cpp	/^int GUI::ClosePipe(int id) {$/;"	f	class:GUI
ClosePipe	con_slang.cpp	/^int GUI::ClosePipe(int id)$/;"	f	class:GUI
ClosePipe	con_x11.cpp	/^int GUI::ClosePipe(int id) {$/;"	f	class:GUI
ClosePipe	g_motif.cpp	/^int GUI::ClosePipe(int id) {$/;"	f	class:GUI
ClosePipe	g_pm.cpp	/^int GUI::ClosePipe(int id) {$/;"	f	class:GUI
ClosePipe	g_qt.cpp	/^int GUI::ClosePipe(int id) {$/;"	f	class:GUI
CloseWindow	g_motif.cpp	/^static void CloseWindow(Widget w, GFramePeer *frame, XEvent *event, Boolean *cont) {$/;"	f	file:
Cmd	c_bind.h	/^    int Cmd;$/;"	m	class:EAbbrev
Cmd	c_bind.h	/^    int Cmd;$/;"	m	class:EKey
Cmd	console.h	/^    int Cmd;$/;"	m	struct:_mItem
CmdId	c_cmdtab.h	/^    unsigned short CmdId;$/;"	m	struct:
CmdLoadConfiguration	fte.cpp	/^static int CmdLoadConfiguration(int &argc, char **argv) {$/;"	f	file:
CmdLoadConfiguration	fte2.cpp	/^static int CmdLoadConfiguration(int &argc, char **argv) {$/;"	f	file:
CmdLoadFiles	egui.cpp	/^int EGUI::CmdLoadFiles(int &argc, char **argv) {$/;"	f	class:EGUI
CmdLoadFiles	fte2.cpp	/^static int CmdLoadFiles(int &argc, char **argv) {$/;"	f	file:
CmdNum	c_bind.cpp	/^int CmdNum(char *Cmd) {$/;"	f
CmdNum	cfte.cpp	/^int CmdNum(const char *Cmd) {$/;"	f
CmpStr	i_complete.cpp	/^static int _LNK_CONV CmpStr(const void *p1, const void *p2) {$/;"	f	file:
Code	console.h	/^    TKeyCode Code;$/;"	m	struct:
Col	c_history.h	/^    int Row, Col;$/;"	m	struct:
Col	e_buffer.h	/^    int Col;$/;"	m	class:EPoint
Col	e_tags.cpp	/^    int Line, Col;$/;"	m	struct:TagStack	file:
ColorChar	c_hilit.h	102;"	d
ColorKeywords	c_hilit.h	/^} ColorKeywords;$/;"	t
ColorNext	c_hilit.h	118;"	d
Colorizers	c_hilit.cpp	/^EColorize *Colorizers = 0;$/;"	v
Colors	c_color.cpp	/^} Colors[] = $/;"	v	file:
Colors	c_hilit.h	/^    ChColor Colors[COUNT_CLR];$/;"	m	class:EColorize
Colors	con_x11.cpp	/^static XColor Colors[16];$/;"	v	file:
Colors	g_motif.cpp	/^static XColor Colors[16];$/;"	v	file:
Cols	e_buffer.h	/^    int Rows, Cols;$/;"	m	class:EEditPort
Command	con_nt.cpp	/^    char *Command;$/;"	m	struct:	file:
Command	con_os2.cpp	/^    char *Command;$/;"	m	struct:	file:
Command	console.h	/^    TCommand Command;$/;"	m	struct:
Command	g_pm.cpp	/^    char *Command;$/;"	m	struct:	file:
Command	o_messages.h	/^    char *Command;$/;"	m	class:EMessages
CommandType	c_bind.h	/^} CommandType;$/;"	t
Command_Table	c_cmdtab.h	/^} Command_Table[] = {$/;"	v
Comp	i_input.h	/^    Completer Comp;$/;"	m	class:ExInput
Compile	o_messages.cpp	/^int EMessages::Compile(char * \/*Command*\/) {$/;"	f	class:EMessages
Compile	view.cpp	/^int EView::Compile(ExState &State) {$/;"	f	class:EView
Compile	view.cpp	/^int EView::Compile(char *Command) {$/;"	f	class:EView
CompileCommand	c_config.cpp	/^char CompileCommand[256] = "make";$/;"	v
CompileNextError	o_messages.cpp	/^int EMessages::CompileNextError(EView *V) {$/;"	f	class:EMessages
CompileNextError	view.cpp	/^int EView::CompileNextError(ExState &\/*State*\/) {$/;"	f	class:EView
CompilePrevError	o_messages.cpp	/^int EMessages::CompilePrevError(EView *V) {$/;"	f	class:EMessages
CompilePrevError	view.cpp	/^int EView::CompilePrevError(ExState &\/*State*\/) {$/;"	f	class:EView
CompilerMsgs	o_messages.cpp	/^EMessages *CompilerMsgs = 0;$/;"	v
CompletePath	s_util.cpp	/^int CompletePath(const char *Base, char *Match, int Count) {$/;"	f
CompleteWord	e_search.cpp	/^int EBuffer::CompleteWord() {$/;"	f	class:EBuffer
Completer	i_input.h	/^typedef int (*Completer)(const char *Name, char *Completed, int Num);$/;"	t
CompletionFilter	c_config.cpp	/^RxNode *CompletionFilter = NULL;$/;"	v
ConClear	con_dosx.cpp	/^int ConClear()$/;"	f
ConClear	con_linux.cpp	/^int ConClear() {$/;"	f
ConClear	con_nt.cpp	/^int ConClear(void) { \/*FOLD00*\/$/;"	f
ConClear	con_os2.cpp	/^int ConClear() {$/;"	f
ConClear	con_slang.cpp	/^int ConClear()$/;"	f
ConClear	con_x11.cpp	/^int ConClear(void) {$/;"	f
ConClear	g_motif.cpp	/^int GView::ConClear() {$/;"	f	class:GView
ConClear	g_pm.cpp	/^int GView::ConClear() {$/;"	f	class:GView
ConClear	g_qt.cpp	/^int GView::ConClear() {$/;"	f	class:GView
ConClear	g_text.cpp	/^int GView::ConClear() {$/;"	f	class:GView
ConCloseView	g_motif.cpp	/^int GFrame::ConCloseView(GView *view) {$/;"	f	class:GFrame
ConCloseView	g_pm.cpp	/^int GFrame::ConCloseView(GView *view) {$/;"	f	class:GFrame
ConCloseView	g_qt.cpp	/^int GFrame::ConCloseView(GView *view) {$/;"	f	class:GFrame
ConCloseView	g_text.cpp	/^int GFrame::ConCloseView(GView * \/*view*\/) {$/;"	f	class:GFrame
ConContinue	con_dosx.cpp	/^int ConContinue()$/;"	f
ConContinue	con_dosx.cpp	/^int GUI::ConContinue(void) {$/;"	f	class:GUI
ConContinue	con_linux.cpp	/^int ConContinue() {$/;"	f
ConContinue	con_linux.cpp	/^int GUI::ConContinue(void) {$/;"	f	class:GUI
ConContinue	con_nt.cpp	/^int ConContinue(void) { \/*FOLD00*\/$/;"	f
ConContinue	con_nt.cpp	/^int GUI::ConContinue(void) { \/*FOLD00*\/$/;"	f	class:GUI
ConContinue	con_os2.cpp	/^int ConContinue() {$/;"	f
ConContinue	con_os2.cpp	/^int GUI::ConContinue(void) {$/;"	f	class:GUI
ConContinue	con_slang.cpp	/^int ConContinue(void)$/;"	f
ConContinue	con_slang.cpp	/^int GUI::ConContinue(void)$/;"	f	class:GUI
ConContinue	con_x11.cpp	/^int ConContinue(void) {$/;"	f
ConContinue	con_x11.cpp	/^int GUI::ConContinue(void) {$/;"	f	class:GUI
ConContinue	g_motif.cpp	/^int GUI::ConContinue(void) { return 0; }$/;"	f	class:GUI
ConContinue	g_pm.cpp	/^int GUI::ConContinue(void) { return 0; }$/;"	f	class:GUI
ConContinue	g_qt.cpp	/^int GUI::ConContinue(void) { return 0; }$/;"	f	class:GUI
ConCursorVisible	con_dosx.cpp	/^int ConCursorVisible() {$/;"	f
ConCursorVisible	con_linux.cpp	/^int ConCursorVisible(void) {$/;"	f
ConCursorVisible	con_nt.cpp	/^int ConCursorVisible() { \/*FOLD00*\/$/;"	f
ConCursorVisible	con_os2.cpp	/^int ConCursorVisible() {$/;"	f
ConCursorVisible	con_slang.cpp	/^int ConCursorVisible()$/;"	f
ConCursorVisible	con_x11.cpp	/^int ConCursorVisible(void) {$/;"	f
ConCursorVisible	g_motif.cpp	/^int GView::ConCursorVisible() {$/;"	f	class:GView
ConCursorVisible	g_motif.cpp	/^int GViewPeer::ConCursorVisible() {$/;"	f	class:GViewPeer
ConCursorVisible	g_pm.cpp	/^int GView::ConCursorVisible() {$/;"	f	class:GView
ConCursorVisible	g_pm.cpp	/^int GViewPeer::ConCursorVisible() {$/;"	f	class:GViewPeer
ConCursorVisible	g_qt.cpp	/^int GView::ConCursorVisible() {$/;"	f	class:GView
ConCursorVisible	g_qt.cpp	/^int GViewPeer::ConCursorVisible() {$/;"	f	class:GViewPeer
ConCursorVisible	g_text.cpp	/^int GView::ConCursorVisible() {$/;"	f	class:GView
ConCursorVisible	g_text.cpp	/^int GViewPeer::ConCursorVisible() {$/;"	f	class:GViewPeer
ConDone	con_dosx.cpp	/^int ConDone()$/;"	f
ConDone	con_linux.cpp	/^int ConDone() {$/;"	f
ConDone	con_nt.cpp	/^int ConDone(void) { \/*FOLD00*\/$/;"	f
ConDone	con_os2.cpp	/^int ConDone() {$/;"	f
ConDone	con_slang.cpp	/^int ConDone(void)$/;"	f
ConDone	con_x11.cpp	/^int ConDone(void) {$/;"	f
ConFlush	con_linux.cpp	/^int ConFlush(void) {return 0;  }$/;"	f
ConFlush	con_nt.cpp	/^int ConFlush(void) { \/*FOLD00*\/$/;"	f
ConFlush	con_x11.cpp	/^int ConFlush(void) {$/;"	f
ConFlush	g_motif.cpp	/^int GUI::ConFlush(void) {$/;"	f	class:GUI
ConFlush	g_pm.cpp	/^int GUI::ConFlush(void) {$/;"	f	class:GUI
ConFlush	g_qt.cpp	/^int GUI::ConFlush(void) {$/;"	f	class:GUI
ConFlush	g_text.cpp	/^int GUI::ConFlush(void) {$/;"	f	class:GUI
ConGetBox	con_dosx.cpp	/^int ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConGetBox	con_linux.cpp	/^int ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConGetBox	con_nt.cpp	/^int ConGetBox(int X, int Y, int W, int H, PCell Cell) \/*FOLD00*\/$/;"	f
ConGetBox	con_os2.cpp	/^int ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConGetBox	con_slang.cpp	/^int ConGetBox(int X, int Y, int W, int H, PCell Cell)$/;"	f
ConGetBox	con_x11.cpp	/^int ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConGetBox	g_motif.cpp	/^int GView::ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConGetBox	g_motif.cpp	/^int GViewPeer::ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConGetBox	g_pm.cpp	/^int GView::ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConGetBox	g_pm.cpp	/^int GViewPeer::ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConGetBox	g_qt.cpp	/^int GView::ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConGetBox	g_qt.cpp	/^int GViewPeer::ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConGetBox	g_text.cpp	/^int GView::ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConGetBox	g_text.cpp	/^int GViewPeer::ConGetBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConGetBoxRaw	con_slang.cpp	/^int ConGetBoxRaw(int X, int Y, int W, int H, unsigned short *box)$/;"	f
ConGetDrawChar	con_dosx.cpp	/^char ConGetDrawChar(int index) {$/;"	f
ConGetDrawChar	con_linux.cpp	/^char ConGetDrawChar(int index) {$/;"	f
ConGetDrawChar	con_nt.cpp	/^char ConGetDrawChar(int index) { \/*FOLD00*\/$/;"	f
ConGetDrawChar	con_os2.cpp	/^char ConGetDrawChar(int index) {$/;"	f
ConGetDrawChar	con_slang.cpp	/^char ConGetDrawChar(int index)$/;"	f
ConGetDrawChar	con_x11.cpp	/^char ConGetDrawChar(int index) {$/;"	f
ConGetDrawChar	g_motif.cpp	/^char ConGetDrawChar(int index) {$/;"	f
ConGetDrawChar	g_pm.cpp	/^char ConGetDrawChar(int index) {$/;"	f
ConGetDrawChar	g_qt.cpp	/^char ConGetDrawChar(int index) {$/;"	f
ConGetEvent	con_dosx.cpp	/^int ConGetEvent(TEventMask EventMask, TEvent *Event, int WaitTime, int Delete)$/;"	f
ConGetEvent	con_linux.cpp	/^int ConGetEvent(TEventMask EventMask, TEvent *Event, int WaitTime, int Delete) {$/;"	f
ConGetEvent	con_nt.cpp	/^int ConGetEvent(TEventMask EventMask, TEvent *Event, int WaitTime, int Delete) \/*FOLD00*\/$/;"	f
ConGetEvent	con_os2.cpp	/^int ConGetEvent(TEventMask EventMask, TEvent *Event, int WaitTime, int Delete) {$/;"	f
ConGetEvent	con_slang.cpp	/^int ConGetEvent(TEventMask \/*EventMask *\/ ,$/;"	f
ConGetEvent	con_x11.cpp	/^int ConGetEvent(TEventMask EventMask, TEvent *Event, int WaitTime, int Delete) {$/;"	f
ConGetEvent	g_motif.cpp	/^int GUI::ConGetEvent(TEventMask EventMask, TEvent *Event, int WaitTime, int Delete, GView **view) {$/;"	f	class:GUI
ConGetEvent	g_pm.cpp	/^int ConGetEvent(TEventMask EventMask, TEvent *Event, int WaitTime, int Delete, GView **view) {$/;"	f
ConGetEvent	g_pm.cpp	/^int GUI::ConGetEvent(TEventMask EventMask, TEvent *Event, int WaitTime, int Delete, GView **view) {$/;"	f	class:GUI
ConGetEvent	g_qt.cpp	/^int GUI::ConGetEvent(TEventMask EventMask, TEvent *Event, int WaitTime, int Delete, GView **view) {$/;"	f	class:GUI
ConGetEvent	g_text.cpp	/^int GUI::ConGetEvent(TEventMask EventMask, TEvent *Event, int WaitTime, int Delete, GView **view) {$/;"	f	class:GUI
ConGetTitle	con_dosx.cpp	/^int ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f
ConGetTitle	con_linux.cpp	/^int ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f
ConGetTitle	con_nt.cpp	/^int ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) { \/*FOLD00*\/$/;"	f
ConGetTitle	con_os2.cpp	/^int ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f
ConGetTitle	con_slang.cpp	/^int ConGetTitle(char *Title, int \/*MaxLen *\/$/;"	f
ConGetTitle	con_x11.cpp	/^int ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f
ConGetTitle	g_motif.cpp	/^int GFrame::ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f	class:GFrame
ConGetTitle	g_motif.cpp	/^int GFramePeer::ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f	class:GFramePeer
ConGetTitle	g_pm.cpp	/^int GFrame::ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f	class:GFrame
ConGetTitle	g_pm.cpp	/^int GFramePeer::ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f	class:GFramePeer
ConGetTitle	g_qt.cpp	/^int GFrame::ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f	class:GFrame
ConGetTitle	g_qt.cpp	/^int GFramePeer::ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f	class:GFramePeer
ConGetTitle	g_text.cpp	/^int GFrame::ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f	class:GFrame
ConGetTitle	g_text.cpp	/^int GFramePeer::ConGetTitle(char *Title, int MaxLen, char *STitle, int SMaxLen) {$/;"	f	class:GFramePeer
ConGrabEvents	con_linux.cpp	/^int ConGrabEvents(TEventMask EventMask) { return 0; }$/;"	f
ConGrabEvents	con_nt.cpp	/^int ConGrabEvents(TEventMask EventMask) { \/*FOLD00*\/$/;"	f
ConGrabEvents	con_x11.cpp	/^int ConGrabEvents(TEventMask EventMask) {$/;"	f
ConGrabEvents	g_motif.cpp	/^int GUI::ConGrabEvents(TEventMask EventMask) {$/;"	f	class:GUI
ConGrabEvents	g_pm.cpp	/^int GUI::ConGrabEvents(TEventMask EventMask) {$/;"	f	class:GUI
ConGrabEvents	g_qt.cpp	/^int GUI::ConGrabEvents(TEventMask EventMask) {$/;"	f	class:GUI
ConGrabEvents	g_text.cpp	/^int GUI::ConGrabEvents(TEventMask \/*EventMask*\/) {$/;"	f	class:GUI
ConHideCursor	con_dosx.cpp	/^int ConHideCursor() {$/;"	f
ConHideCursor	con_linux.cpp	/^int ConHideCursor(void) {$/;"	f
ConHideCursor	con_nt.cpp	/^int ConHideCursor(void) { \/*FOLD00*\/$/;"	f
ConHideCursor	con_os2.cpp	/^int ConHideCursor() {$/;"	f
ConHideCursor	con_slang.cpp	/^int ConHideCursor()$/;"	f
ConHideCursor	con_x11.cpp	/^int ConHideCursor(void) {$/;"	f
ConHideCursor	g_motif.cpp	/^int GView::ConHideCursor() {$/;"	f	class:GView
ConHideCursor	g_motif.cpp	/^int GViewPeer::ConHideCursor() {$/;"	f	class:GViewPeer
ConHideCursor	g_pm.cpp	/^int GView::ConHideCursor() {$/;"	f	class:GView
ConHideCursor	g_pm.cpp	/^int GViewPeer::ConHideCursor() {$/;"	f	class:GViewPeer
ConHideCursor	g_qt.cpp	/^int GView::ConHideCursor() {$/;"	f	class:GView
ConHideCursor	g_qt.cpp	/^int GViewPeer::ConHideCursor() {$/;"	f	class:GViewPeer
ConHideCursor	g_text.cpp	/^int GView::ConHideCursor() {$/;"	f	class:GView
ConHideCursor	g_text.cpp	/^int GViewPeer::ConHideCursor() {$/;"	f	class:GViewPeer
ConHideCursor	i_oview.cpp	/^int ExView::ConHideCursor() {$/;"	f	class:ExView
ConHideMouse	con_dosx.cpp	/^int ConHideMouse()$/;"	f
ConHideMouse	con_linux.cpp	/^int ConHideMouse(void) {$/;"	f
ConHideMouse	con_nt.cpp	/^int ConHideMouse(void) { \/*FOLD00*\/$/;"	f
ConHideMouse	con_os2.cpp	/^int ConHideMouse() {$/;"	f
ConHideMouse	con_slang.cpp	/^int ConHideMouse()$/;"	f
ConHideMouse	con_x11.cpp	/^int ConHideMouse(void) {$/;"	f
ConIn	con_nt.cpp	/^static HANDLE ConIn;$/;"	v	file:
ConInit	con_dosx.cpp	/^int ConInit(int XSize, int YSize)$/;"	f
ConInit	con_linux.cpp	/^int ConInit(int XSize, int YSize) {$/;"	f
ConInit	con_nt.cpp	/^int ConInit(int \/*XSize*\/, int \/*YSize*\/) { \/*FOLD00*\/$/;"	f
ConInit	con_os2.cpp	/^int ConInit(int XSize, int YSize) {$/;"	f
ConInit	con_slang.cpp	/^int ConInit(int \/*XSize *\/ , int \/*YSize *\/ )$/;"	f
ConInit	con_x11.cpp	/^int ConInit(int XSize, int YSize) {$/;"	f
ConMaxCols	console.h	36;"	d
ConMaxRows	console.h	37;"	d
ConMouseVisible	con_dosx.cpp	/^int ConMouseVisible() {$/;"	f
ConMouseVisible	con_linux.cpp	/^int ConMouseVisible(void) {$/;"	f
ConMouseVisible	con_nt.cpp	/^int ConMouseVisible() { \/*FOLD00*\/$/;"	f
ConMouseVisible	con_os2.cpp	/^int ConMouseVisible() {$/;"	f
ConMouseVisible	con_slang.cpp	/^int ConMouseVisible()$/;"	f
ConMouseVisible	con_x11.cpp	/^int ConMouseVisible(void) {$/;"	f
ConOut	con_nt.cpp	/^static HANDLE ConOut;$/;"	v	file:
ConPutBox	con_dosx.cpp	/^int ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConPutBox	con_linux.cpp	/^int ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConPutBox	con_nt.cpp	/^int ConPutBox(int X, int Y, int W, int H, PCell Cell) \/*FOLD00*\/$/;"	f
ConPutBox	con_os2.cpp	/^int ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConPutBox	con_slang.cpp	/^int ConPutBox(int X, int Y, int W, int H, PCell Cell)$/;"	f
ConPutBox	con_x11.cpp	/^int ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConPutBox	g_motif.cpp	/^int GView::ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConPutBox	g_motif.cpp	/^int GViewPeer::ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConPutBox	g_pm.cpp	/^int GView::ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConPutBox	g_pm.cpp	/^int GViewPeer::ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConPutBox	g_qt.cpp	/^int GView::ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConPutBox	g_qt.cpp	/^int GViewPeer::ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConPutBox	g_text.cpp	/^int GView::ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConPutBox	g_text.cpp	/^int GViewPeer::ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConPutBox	i_oview.cpp	/^int ExView::ConPutBox(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:ExView
ConPutBoxRaw	con_slang.cpp	/^int ConPutBoxRaw(int X, int Y, int W, int H, unsigned short *box)$/;"	f
ConPutEvent	con_dosx.cpp	/^int ConPutEvent(TEvent Event)$/;"	f
ConPutEvent	con_linux.cpp	/^int ConPutEvent(TEvent Event) {$/;"	f
ConPutEvent	con_nt.cpp	/^int ConPutEvent(TEvent Event) { \/*FOLD00*\/$/;"	f
ConPutEvent	con_os2.cpp	/^int ConPutEvent(TEvent Event) {$/;"	f
ConPutEvent	con_slang.cpp	/^int ConPutEvent(TEvent Event)$/;"	f
ConPutEvent	con_x11.cpp	/^int ConPutEvent(TEvent Event) {$/;"	f
ConPutEvent	g_motif.cpp	/^int GUI::ConPutEvent(TEvent Event) {$/;"	f	class:GUI
ConPutEvent	g_pm.cpp	/^int GUI::ConPutEvent(TEvent Event) {$/;"	f	class:GUI
ConPutEvent	g_qt.cpp	/^int GUI::ConPutEvent(TEvent Event) {$/;"	f	class:GUI
ConPutEvent	g_text.cpp	/^int GUI::ConPutEvent(TEvent Event) {$/;"	f	class:GUI
ConPutLine	con_dosx.cpp	/^int ConPutLine(int X, int Y, int W, int H, PCell Cell)$/;"	f
ConPutLine	con_linux.cpp	/^int ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConPutLine	con_nt.cpp	/^int ConPutLine(int X, int Y, int W, int H, PCell Cell) \/*FOLD00*\/$/;"	f
ConPutLine	con_os2.cpp	/^int ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConPutLine	con_slang.cpp	/^int ConPutLine(int X, int Y, int W, int H, PCell Cell)$/;"	f
ConPutLine	con_x11.cpp	/^int ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f
ConPutLine	g_motif.cpp	/^int GView::ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConPutLine	g_motif.cpp	/^int GViewPeer::ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConPutLine	g_pm.cpp	/^int GView::ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConPutLine	g_pm.cpp	/^int GViewPeer::ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConPutLine	g_qt.cpp	/^int GView::ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConPutLine	g_qt.cpp	/^int GViewPeer::ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConPutLine	g_text.cpp	/^int GView::ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GView
ConPutLine	g_text.cpp	/^int GViewPeer::ConPutLine(int X, int Y, int W, int H, PCell Cell) {$/;"	f	class:GViewPeer
ConQueryCursorPos	con_dosx.cpp	/^int ConQueryCursorPos(int *X, int *Y) {$/;"	f
ConQueryCursorPos	con_linux.cpp	/^int ConQueryCursorPos(int *X, int *Y) {$/;"	f
ConQueryCursorPos	con_nt.cpp	/^int ConQueryCursorPos(int *X, int *Y) { \/*FOLD00*\/$/;"	f
ConQueryCursorPos	con_os2.cpp	/^int ConQueryCursorPos(int *X, int *Y) {$/;"	f
ConQueryCursorPos	con_slang.cpp	/^int ConQueryCursorPos(int *X, int *Y)$/;"	f
ConQueryCursorPos	con_x11.cpp	/^int ConQueryCursorPos(int *X, int *Y) {$/;"	f
ConQueryCursorPos	g_motif.cpp	/^int GView::ConQueryCursorPos(int *X, int *Y) {$/;"	f	class:GView
ConQueryCursorPos	g_motif.cpp	/^int GViewPeer::ConQueryCursorPos(int *X, int *Y) {$/;"	f	class:GViewPeer
ConQueryCursorPos	g_pm.cpp	/^int GView::ConQueryCursorPos(int *X, int *Y) {$/;"	f	class:GView
ConQueryCursorPos	g_pm.cpp	/^int GViewPeer::ConQueryCursorPos(int *X, int *Y) {$/;"	f	class:GViewPeer
ConQueryCursorPos	g_qt.cpp	/^int GView::ConQueryCursorPos(int *X, int *Y) {$/;"	f	class:GView
ConQueryCursorPos	g_qt.cpp	/^int GViewPeer::ConQueryCursorPos(int *X, int *Y) {$/;"	f	class:GViewPeer
ConQueryCursorPos	g_text.cpp	/^int GView::ConQueryCursorPos(int *X, int *Y) {$/;"	f	class:GView
ConQueryCursorPos	g_text.cpp	/^int GViewPeer::ConQueryCursorPos(int *X, int *Y) {$/;"	f	class:GViewPeer
ConQueryMouseButtons	con_dosx.cpp	/^int ConQueryMouseButtons(int *ButtonCount) {$/;"	f
ConQueryMouseButtons	con_linux.cpp	/^int ConQueryMouseButtons(int *ButtonCount) {$/;"	f
ConQueryMouseButtons	con_nt.cpp	/^int ConQueryMouseButtons(int *ButtonCount) { \/*FOLD00*\/$/;"	f
ConQueryMouseButtons	con_os2.cpp	/^int ConQueryMouseButtons(int *ButtonCount) {$/;"	f
ConQueryMouseButtons	con_slang.cpp	/^int ConQueryMouseButtons(int *ButtonCount)$/;"	f
ConQueryMouseButtons	con_x11.cpp	/^int ConQueryMouseButtons(int *ButtonCount) {$/;"	f
ConQueryMousePos	con_dosx.cpp	/^int ConQueryMousePos(int *X, int *Y) {$/;"	f
ConQueryMousePos	con_linux.cpp	/^int ConQueryMousePos(int *X, int *Y) {$/;"	f
ConQueryMousePos	con_nt.cpp	/^int ConQueryMousePos(int *X, int *Y) { \/*FOLD00*\/$/;"	f
ConQueryMousePos	con_os2.cpp	/^int ConQueryMousePos(int *X, int *Y) {$/;"	f
ConQueryMousePos	con_slang.cpp	/^int ConQueryMousePos(int *X, int *Y)$/;"	f
ConQueryMousePos	con_x11.cpp	/^int ConQueryMousePos(int *X, int *Y) {$/;"	f
ConQuerySize	con_dosx.cpp	/^int ConQuerySize(int *X, int *Y) {$/;"	f
ConQuerySize	con_linux.cpp	/^int ConQuerySize(int *X, int *Y) {$/;"	f
ConQuerySize	con_nt.cpp	/^int ConQuerySize(int *X, int *Y) { \/*FOLD00*\/$/;"	f
ConQuerySize	con_os2.cpp	/^int ConQuerySize(int *X, int *Y) {$/;"	f
ConQuerySize	con_slang.cpp	/^int ConQuerySize(int *X, int *Y)$/;"	f
ConQuerySize	con_x11.cpp	/^int ConQuerySize(int *X, int *Y) {$/;"	f
ConQuerySize	g_motif.cpp	/^int GFrame::ConQuerySize(int *X, int *Y) {$/;"	f	class:GFrame
ConQuerySize	g_motif.cpp	/^int GFramePeer::ConQuerySize(int *X, int *Y) {$/;"	f	class:GFramePeer
ConQuerySize	g_motif.cpp	/^int GView::ConQuerySize(int *X, int *Y) {$/;"	f	class:GView
ConQuerySize	g_motif.cpp	/^int GViewPeer::ConQuerySize(int *X, int *Y) {$/;"	f	class:GViewPeer
ConQuerySize	g_pm.cpp	/^int GFrame::ConQuerySize(int *X, int *Y) {$/;"	f	class:GFrame
ConQuerySize	g_pm.cpp	/^int GFramePeer::ConQuerySize(int *X, int *Y) {$/;"	f	class:GFramePeer
ConQuerySize	g_pm.cpp	/^int GView::ConQuerySize(int *X, int *Y) {$/;"	f	class:GView
ConQuerySize	g_pm.cpp	/^int GViewPeer::ConQuerySize(int *X, int *Y) {$/;"	f	class:GViewPeer
ConQuerySize	g_qt.cpp	/^int GFrame::ConQuerySize(int *X, int *Y) {$/;"	f	class:GFrame
ConQuerySize	g_qt.cpp	/^int GFramePeer::ConQuerySize(int *X, int *Y) {$/;"	f	class:GFramePeer
ConQuerySize	g_qt.cpp	/^int GView::ConQuerySize(int *X, int *Y) {$/;"	f	class:GView
ConQuerySize	g_qt.cpp	/^int GViewPeer::ConQuerySize(int *X, int *Y) {$/;"	f	class:GViewPeer
ConQuerySize	g_text.cpp	/^int GFrame::ConQuerySize(int *X, int *Y) {$/;"	f	class:GFrame
ConQuerySize	g_text.cpp	/^int GFramePeer::ConQuerySize(int *X, int *Y) {$/;"	f	class:GFramePeer
ConQuerySize	g_text.cpp	/^int GView::ConQuerySize(int *X, int *Y) {$/;"	f	class:GView
ConQuerySize	g_text.cpp	/^int GViewPeer::ConQuerySize(int *X, int *Y) {$/;"	f	class:GViewPeer
ConQuerySize	i_oview.cpp	/^int ExView::ConQuerySize(int *X, int *Y) {$/;"	f	class:ExView
ConResizeView	g_motif.cpp	/^int GFrame::ConResizeView(GView *view, int DeltaY) {$/;"	f	class:GFrame
ConResizeView	g_pm.cpp	/^int GFrame::ConResizeView(GView *view, int DeltaY) {$/;"	f	class:GFrame
ConResizeView	g_qt.cpp	/^int GFrame::ConResizeView(GView *view, int DeltaY) {$/;"	f	class:GFrame
ConResizeView	g_text.cpp	/^int GFrame::ConResizeView(GView * \/*view*\/, int \/*DeltaY*\/) {$/;"	f	class:GFrame
ConScroll	con_dosx.cpp	/^int ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count)$/;"	f
ConScroll	con_linux.cpp	/^int ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f
ConScroll	con_nt.cpp	/^int ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) \/*FOLD00*\/$/;"	f
ConScroll	con_os2.cpp	/^int ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f
ConScroll	con_slang.cpp	/^int ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count)$/;"	f
ConScroll	con_x11.cpp	/^int ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f
ConScroll	g_motif.cpp	/^int GView::ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f	class:GView
ConScroll	g_motif.cpp	/^int GViewPeer::ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f	class:GViewPeer
ConScroll	g_pm.cpp	/^int GView::ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f	class:GView
ConScroll	g_pm.cpp	/^int GViewPeer::ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f	class:GViewPeer
ConScroll	g_qt.cpp	/^int GView::ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f	class:GView
ConScroll	g_qt.cpp	/^int GViewPeer::ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f	class:GViewPeer
ConScroll	g_text.cpp	/^int GView::ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f	class:GView
ConScroll	g_text.cpp	/^int GViewPeer::ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f	class:GViewPeer
ConScroll	i_oview.cpp	/^int ExView::ConScroll(int Way, int X, int Y, int W, int H, TAttr Fill, int Count) {$/;"	f	class:ExView
ConSetBox	con_dosx.cpp	/^int ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f
ConSetBox	con_linux.cpp	/^int ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f
ConSetBox	con_nt.cpp	/^int ConSetBox(int X, int Y, int W, int H, TCell Cell) \/*FOLD00*\/$/;"	f
ConSetBox	con_os2.cpp	/^int ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f
ConSetBox	con_slang.cpp	/^int ConSetBox(int X, int Y, int W, int H, TCell Cell)$/;"	f
ConSetBox	con_x11.cpp	/^int ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f
ConSetBox	g_motif.cpp	/^int GView::ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f	class:GView
ConSetBox	g_motif.cpp	/^int GViewPeer::ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f	class:GViewPeer
ConSetBox	g_pm.cpp	/^int GView::ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f	class:GView
ConSetBox	g_pm.cpp	/^int GViewPeer::ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f	class:GViewPeer
ConSetBox	g_qt.cpp	/^int GView::ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f	class:GView
ConSetBox	g_qt.cpp	/^int GViewPeer::ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f	class:GViewPeer
ConSetBox	g_text.cpp	/^int GView::ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f	class:GView
ConSetBox	g_text.cpp	/^int GViewPeer::ConSetBox(int X, int Y, int W, int H, TCell Cell) {$/;"	f	class:GViewPeer
ConSetCursorPos	con_dosx.cpp	/^int ConSetCursorPos(int X, int Y) {$/;"	f
ConSetCursorPos	con_linux.cpp	/^int ConSetCursorPos(int X, int Y) {$/;"	f
ConSetCursorPos	con_nt.cpp	/^int ConSetCursorPos(int X, int Y) { \/*FOLD00*\/$/;"	f
ConSetCursorPos	con_os2.cpp	/^int ConSetCursorPos(int X, int Y) {$/;"	f
ConSetCursorPos	con_slang.cpp	/^int ConSetCursorPos(int X, int Y)$/;"	f
ConSetCursorPos	con_x11.cpp	/^int ConSetCursorPos(int X, int Y) {$/;"	f
ConSetCursorPos	g_motif.cpp	/^int GView::ConSetCursorPos(int X, int Y) {$/;"	f	class:GView
ConSetCursorPos	g_motif.cpp	/^int GViewPeer::ConSetCursorPos(int X, int Y) {$/;"	f	class:GViewPeer
ConSetCursorPos	g_pm.cpp	/^int GView::ConSetCursorPos(int X, int Y) {$/;"	f	class:GView
ConSetCursorPos	g_pm.cpp	/^int GViewPeer::ConSetCursorPos(int X, int Y) {$/;"	f	class:GViewPeer
ConSetCursorPos	g_qt.cpp	/^int GView::ConSetCursorPos(int X, int Y) {$/;"	f	class:GView
ConSetCursorPos	g_qt.cpp	/^int GViewPeer::ConSetCursorPos(int X, int Y) {$/;"	f	class:GViewPeer
ConSetCursorPos	g_text.cpp	/^int GView::ConSetCursorPos(int X, int Y) {$/;"	f	class:GView
ConSetCursorPos	g_text.cpp	/^int GViewPeer::ConSetCursorPos(int X, int Y) {$/;"	f	class:GViewPeer
ConSetCursorPos	i_oview.cpp	/^int ExView::ConSetCursorPos(int X, int Y) {$/;"	f	class:ExView
ConSetCursorSize	con_dosx.cpp	/^int ConSetCursorSize(int Start, int End) {$/;"	f
ConSetCursorSize	con_linux.cpp	/^int ConSetCursorSize(int Start, int End) {$/;"	f
ConSetCursorSize	con_nt.cpp	/^int ConSetCursorSize(int Start, int End) { \/*FOLD00*\/$/;"	f
ConSetCursorSize	con_os2.cpp	/^int ConSetCursorSize(int Start, int End) {$/;"	f
ConSetCursorSize	con_slang.cpp	/^int ConSetCursorSize(int \/*Start *\/ , int \/*End *\/ )$/;"	f
ConSetCursorSize	con_x11.cpp	/^int ConSetCursorSize(int Start, int End) {$/;"	f
ConSetCursorSize	g_motif.cpp	/^int GView::ConSetCursorSize(int Start, int End) {$/;"	f	class:GView
ConSetCursorSize	g_motif.cpp	/^int GViewPeer::ConSetCursorSize(int Start, int End) {$/;"	f	class:GViewPeer
ConSetCursorSize	g_pm.cpp	/^int GView::ConSetCursorSize(int Start, int End) {$/;"	f	class:GView
ConSetCursorSize	g_pm.cpp	/^int GViewPeer::ConSetCursorSize(int Start, int End) {$/;"	f	class:GViewPeer
ConSetCursorSize	g_qt.cpp	/^int GView::ConSetCursorSize(int Start, int End) {$/;"	f	class:GView
ConSetCursorSize	g_qt.cpp	/^int GViewPeer::ConSetCursorSize(int Start, int End) {$/;"	f	class:GViewPeer
ConSetCursorSize	g_text.cpp	/^int GView::ConSetCursorSize(int Start, int End) {$/;"	f	class:GView
ConSetCursorSize	g_text.cpp	/^int GViewPeer::ConSetCursorSize(int Start, int End) {$/;"	f	class:GViewPeer
ConSetCursorSize	i_oview.cpp	/^int ExView::ConSetCursorSize(int Start, int End) {$/;"	f	class:ExView
ConSetMousePos	con_linux.cpp	/^int ConSetMousePos(int X, int Y) {$/;"	f
ConSetMousePos	con_nt.cpp	/^int ConSetMousePos(int X, int Y) { \/*FOLD00*\/$/;"	f
ConSetMousePos	con_os2.cpp	/^int ConSetMousePos(int X, int Y) {$/;"	f
ConSetMousePos	con_slang.cpp	/^int ConSetMousePos(int \/*X *\/ , int \/*Y *\/ )$/;"	f
ConSetMousePos	con_x11.cpp	/^int ConSetMousePos(int X, int Y) {$/;"	f
ConSetSize	con_dosx.cpp	/^int ConSetSize(int X, int Y) {$/;"	f
ConSetSize	con_linux.cpp	/^int ConSetSize(int X, int Y) {$/;"	f
ConSetSize	con_nt.cpp	/^int ConSetSize(int X, int Y) { \/*FOLD00*\/$/;"	f
ConSetSize	con_os2.cpp	/^int ConSetSize(int X, int Y) {$/;"	f
ConSetSize	con_slang.cpp	/^int ConSetSize(int \/*X *\/ , int \/*Y *\/ )$/;"	f
ConSetSize	con_x11.cpp	/^int ConSetSize(int X, int Y) {$/;"	f
ConSetSize	g_motif.cpp	/^int GFrame::ConSetSize(int X, int Y) {$/;"	f	class:GFrame
ConSetSize	g_motif.cpp	/^int GFramePeer::ConSetSize(int X, int Y) {$/;"	f	class:GFramePeer
ConSetSize	g_motif.cpp	/^int GView::ConSetSize(int X, int Y) {$/;"	f	class:GView
ConSetSize	g_motif.cpp	/^int GViewPeer::ConSetSize(int X, int Y) {$/;"	f	class:GViewPeer
ConSetSize	g_pm.cpp	/^int GFrame::ConSetSize(int X, int Y) {$/;"	f	class:GFrame
ConSetSize	g_pm.cpp	/^int GFramePeer::ConSetSize(int X, int Y) {$/;"	f	class:GFramePeer
ConSetSize	g_pm.cpp	/^int GView::ConSetSize(int X, int Y) {$/;"	f	class:GView
ConSetSize	g_pm.cpp	/^int GViewPeer::ConSetSize(int X, int Y) {$/;"	f	class:GViewPeer
ConSetSize	g_qt.cpp	/^int GFrame::ConSetSize(int X, int Y) {$/;"	f	class:GFrame
ConSetSize	g_qt.cpp	/^int GFramePeer::ConSetSize(int X, int Y) {$/;"	f	class:GFramePeer
ConSetSize	g_qt.cpp	/^int GView::ConSetSize(int X, int Y) {$/;"	f	class:GView
ConSetSize	g_qt.cpp	/^int GViewPeer::ConSetSize(int X, int Y) {$/;"	f	class:GViewPeer
ConSetSize	g_text.cpp	/^int GFrame::ConSetSize(int X, int Y) {$/;"	f	class:GFrame
ConSetSize	g_text.cpp	/^int GFramePeer::ConSetSize(int X, int Y) {$/;"	f	class:GFramePeer
ConSetSize	g_text.cpp	/^int GView::ConSetSize(int X, int Y) {$/;"	f	class:GView
ConSetSize	g_text.cpp	/^int GViewPeer::ConSetSize(int X, int Y) {$/;"	f	class:GViewPeer
ConSetTitle	con_dosx.cpp	/^int ConSetTitle(char *Title, char *STitle) {$/;"	f
ConSetTitle	con_linux.cpp	/^int ConSetTitle(char *Title, char *STitle) {$/;"	f
ConSetTitle	con_nt.cpp	/^int ConSetTitle(char *Title, char *STitle) { \/*FOLD00*\/$/;"	f
ConSetTitle	con_os2.cpp	/^int ConSetTitle(char *Title, char *STitle) {$/;"	f
ConSetTitle	con_slang.cpp	/^int ConSetTitle(char * \/*Title *\/ , char * \/*STitle *\/ )$/;"	f
ConSetTitle	con_x11.cpp	/^int ConSetTitle(char *Title, char *STitle) {$/;"	f
ConSetTitle	g_motif.cpp	/^int GFrame::ConSetTitle(char *Title, char *STitle) {$/;"	f	class:GFrame
ConSetTitle	g_motif.cpp	/^int GFramePeer::ConSetTitle(char *Title, char *STitle) {$/;"	f	class:GFramePeer
ConSetTitle	g_pm.cpp	/^int GFrame::ConSetTitle(char *Title, char *STitle) {$/;"	f	class:GFrame
ConSetTitle	g_pm.cpp	/^int GFramePeer::ConSetTitle(char *Title, char *STitle) {$/;"	f	class:GFramePeer
ConSetTitle	g_qt.cpp	/^int GFrame::ConSetTitle(char *Title, char *STitle) {$/;"	f	class:GFrame
ConSetTitle	g_qt.cpp	/^int GFramePeer::ConSetTitle(char *Title, char *STitle) {$/;"	f	class:GFramePeer
ConSetTitle	g_text.cpp	/^int GFrame::ConSetTitle(char *Title, char *STitle) {$/;"	f	class:GFrame
ConSetTitle	g_text.cpp	/^int GFramePeer::ConSetTitle(char *Title, char *STitle) {$/;"	f	class:GFramePeer
ConShowCursor	con_dosx.cpp	/^int ConShowCursor() {$/;"	f
ConShowCursor	con_linux.cpp	/^int ConShowCursor(void) {$/;"	f
ConShowCursor	con_nt.cpp	/^int ConShowCursor(void) { \/*FOLD00*\/$/;"	f
ConShowCursor	con_os2.cpp	/^int ConShowCursor() {$/;"	f
ConShowCursor	con_slang.cpp	/^int ConShowCursor()$/;"	f
ConShowCursor	con_x11.cpp	/^int ConShowCursor(void) {$/;"	f
ConShowCursor	g_motif.cpp	/^int GView::ConShowCursor() {$/;"	f	class:GView
ConShowCursor	g_motif.cpp	/^int GViewPeer::ConShowCursor() {$/;"	f	class:GViewPeer
ConShowCursor	g_pm.cpp	/^int GView::ConShowCursor() {$/;"	f	class:GView
ConShowCursor	g_pm.cpp	/^int GViewPeer::ConShowCursor() {$/;"	f	class:GViewPeer
ConShowCursor	g_qt.cpp	/^int GView::ConShowCursor() {$/;"	f	class:GView
ConShowCursor	g_qt.cpp	/^int GViewPeer::ConShowCursor() {$/;"	f	class:GViewPeer
ConShowCursor	g_text.cpp	/^int GView::ConShowCursor() {$/;"	f	class:GView
ConShowCursor	g_text.cpp	/^int GViewPeer::ConShowCursor() {$/;"	f	class:GViewPeer
ConShowCursor	i_oview.cpp	/^int ExView::ConShowCursor() {$/;"	f	class:ExView
ConShowMouse	con_dosx.cpp	/^int ConShowMouse()$/;"	f
ConShowMouse	con_linux.cpp	/^int ConShowMouse(void) {$/;"	f
ConShowMouse	con_nt.cpp	/^int ConShowMouse(void) { \/*FOLD00*\/$/;"	f
ConShowMouse	con_os2.cpp	/^int ConShowMouse() {$/;"	f
ConShowMouse	con_slang.cpp	/^int ConShowMouse()$/;"	f
ConShowMouse	con_x11.cpp	/^int ConShowMouse(void) {$/;"	f
ConSplitView	g_motif.cpp	/^int GFrame::ConSplitView(GView *view, GView *newview) {$/;"	f	class:GFrame
ConSplitView	g_pm.cpp	/^int GFrame::ConSplitView(GView *view, GView *newview) {$/;"	f	class:GFrame
ConSplitView	g_qt.cpp	/^int GFrame::ConSplitView(GView *view, GView *newview) {$/;"	f	class:GFrame
ConSplitView	g_text.cpp	/^int GFrame::ConSplitView(GView *view, GView *newview) {$/;"	f	class:GFrame
ConSuspend	con_dosx.cpp	/^int ConSuspend()$/;"	f
ConSuspend	con_dosx.cpp	/^int GUI::ConSuspend(void) {$/;"	f	class:GUI
ConSuspend	con_linux.cpp	/^int ConSuspend() {$/;"	f
ConSuspend	con_linux.cpp	/^int GUI::ConSuspend(void) {$/;"	f	class:GUI
ConSuspend	con_nt.cpp	/^int ConSuspend(void) { \/*FOLD00*\/$/;"	f
ConSuspend	con_nt.cpp	/^int GUI::ConSuspend(void) { \/*FOLD00*\/$/;"	f	class:GUI
ConSuspend	con_os2.cpp	/^int ConSuspend() {$/;"	f
ConSuspend	con_os2.cpp	/^int GUI::ConSuspend(void) {$/;"	f	class:GUI
ConSuspend	con_slang.cpp	/^int ConSuspend(void)$/;"	f
ConSuspend	con_slang.cpp	/^int GUI::ConSuspend(void)$/;"	f	class:GUI
ConSuspend	con_x11.cpp	/^int ConSuspend(void) {$/;"	f
ConSuspend	con_x11.cpp	/^int GUI::ConSuspend(void) {$/;"	f	class:GUI
ConSuspend	g_motif.cpp	/^int GUI::ConSuspend(void) { return 0; }$/;"	f	class:GUI
ConSuspend	g_pm.cpp	/^int GUI::ConSuspend(void) { return 0; }$/;"	f	class:GUI
ConSuspend	g_qt.cpp	/^int GUI::ConSuspend(void) { return 0; }$/;"	f	class:GUI
ConfQuit	o_buffer.cpp	/^int EBuffer::ConfQuit(GxView *V, int multiFile) {$/;"	f	class:EBuffer
ConfQuit	o_model.cpp	/^int EModel::ConfQuit(GxView *V, int multiFile) {$/;"	f	class:EModel
ConfigFileName	fte.cpp	/^char ConfigFileName[MAXPATH] = "";$/;"	v
ConfigRecompile	view.cpp	/^int EView::ConfigRecompile(ExState &State) {$/;"	f	class:EView
ConfigSourcePath	c_config.cpp	/^char *ConfigSourcePath = 0;$/;"	v
ConfigureWindow	g_motif.cpp	/^void ConfigureWindow(Widget w, GViewPeer *Peer, XEvent *event, Boolean *cont) {$/;"	f
ConvertClickToEvent	con_x11.cpp	/^void ConvertClickToEvent(int type, int xx, int yy, int button, int state, TEvent *Event, Time time) {$/;"	f
ConvertClickToEvent	g_motif.cpp	/^void ConvertClickToEvent(int type, int xx, int yy, int button, int state, TEvent *Event, Time time) {$/;"	f
ConvertKey	g_pm.cpp	/^char *ConvertKey(int ch, int virt, int flags, int scan, TEvent &Event) {$/;"	f
ConvertKeyToEvent	con_x11.cpp	/^void ConvertKeyToEvent(KeySym key, KeySym key1, char *keyname, char *keyname1, int etype, int state, TEvent *Event) {$/;"	f
ConvertKeyToEvent	g_motif.cpp	/^void ConvertKeyToEvent(KeySym key, KeySym key1, char *keyname, int etype, int state, TEvent *Event) {$/;"	f
Count	c_bind.h	/^    int Count;$/;"	m	struct:
Count	c_history.h	/^    int Count;$/;"	m	struct:
Count	console.h	/^    int Count;$/;"	m	struct:_mMenu
Count	console.h	/^    unsigned short Count;$/;"	m	struct:
Count	e_buffer.h	/^    int Count;$/;"	m	class:ELine
Count	e_buffer.h	/^    int Count;$/;"	m	struct:_RoutineList
Count	o_list.h	/^    int Row, LeftCol, TopRow, Count;$/;"	m	class:EList
CountInputHistory	c_history.cpp	/^int CountInputHistory(int Id) { \/*fold00*\/$/;"	f
CountWidth	e_regex.cpp	/^static int CountWidth(RxNode *N) {$/;"	f	file:
CreateChild	g_pm.cpp	/^MRESULT CreateChild(HWND parent, GViewPeer *peer, PMData *pmData) {$/;"	f
CreateMenuBar	g_qt.cpp	/^QMenuBar *QEFrame::CreateMenuBar(QWidget *parent, int Id) {$/;"	f	class:QEFrame
CreateMotifMainMenu	g_motif.cpp	/^Widget CreateMotifMainMenu(Widget parent, char *Name) {$/;"	f
CreateMotifMenu	g_motif.cpp	/^Widget CreateMotifMenu(Widget parent, int menu, int main, XtCallbackProc MenuProc) {$/;"	f
CreatePMMainMenu	g_pm.cpp	/^HWND CreatePMMainMenu(HWND parent, HWND owner, char *Name) {$/;"	f
CreatePMMenu	g_pm.cpp	/^HWND CreatePMMenu(HWND parent, HWND owner, int menu, int id, int style) {$/;"	f
CreatePipeChild	con_nt.cpp	/^static int CreatePipeChild(HANDLE &child, HANDLE &hPipe, char *Command) {$/;"	f	file:
CreatePipeChild	con_os2.cpp	/^static int CreatePipeChild(PID &pid, HPIPE &hfPipe, char *Command) {$/;"	f	file:
CreatePipeChild	g_pm.cpp	/^static int CreatePipeChild(ULONG *sid, PID *pid, HPIPE &hfPipe, char *Command) {$/;"	f	file:
CreatePopup	g_qt.cpp	/^QPopupMenu *QEFrame::CreatePopup(QWidget *parent, int Id, int do_connect) {$/;"	f	class:QEFrame
CreateToolBar	g_pm.cpp	/^HWND CreateToolBar(HWND parent, HWND owner, int id) {$/;"	f
CreateToolBar	pm_tool.cpp	/^HWND CreateToolBar(HWND parent,$/;"	f
CreateViewPort	o_buffer.cpp	/^EViewPort *EBuffer::CreateViewPort(EView *V) {$/;"	f	class:EBuffer
CreateViewPort	o_list.cpp	/^EViewPort *EList::CreateViewPort(EView *V) {$/;"	f	class:EList
CreateViewPort	o_model.cpp	/^EViewPort *EModel::CreateViewPort(EView *V) {$/;"	f	class:EModel
CreatorWndProc	g_pm.cpp	/^MRESULT EXPENTRY CreatorWndProc(HWND hwnd, ULONG msg, MPARAM mp1, MPARAM mp2) {$/;"	f
Cur	i_choice.h	/^    int Cur;$/;"	m	class:ExChoice
CurItem	i_input.h	/^    int CurItem;$/;"	m	class:ExInput
CurMsg	o_model.h	/^    char *CurMsg;$/;"	m	class:EView
CurPos	c_config.cpp	/^} CurPos;$/;"	t	file:
CurPos	cfte.cpp	/^} CurPos;$/;"	t	file:
CurSelectionData	con_x11.cpp	/^static char *CurSelectionData = 0;$/;"	v	file:
CurSelectionLen	con_x11.cpp	/^static int CurSelectionLen = 0;$/;"	v	file:
CurSelectionOwn	con_x11.cpp	/^static int CurSelectionOwn = 0;$/;"	v	file:
CurStr	i_input.h	/^    char *CurStr;$/;"	m	class:ExInput
CurVis	con_slang.cpp	/^int CurVis = 1;$/;"	v
CurrentTag	e_tags.cpp	/^    char *CurrentTag;$/;"	m	struct:TagStack	file:
CurrentTag	e_tags.cpp	/^static char *CurrentTag = 0;$/;"	v	file:
CursorInsSize	c_config.cpp	/^int CursorInsSize[2] = { 90, 100 };$/;"	v
CursorOverSize	c_config.cpp	/^int CursorOverSize[2] = { 0, 100 };$/;"	v
CursorVisible	con_dosx.cpp	/^static int CursorVisible = 1; \/* 1 means visible *\/$/;"	v	file:
CursorVisible	con_linux.cpp	/^int CursorVisible = 1;$/;"	v
CursorVisible	con_nt.cpp	/^static int CursorVisible = 1; \/* 1 means visible *\/$/;"	v	file:
CursorVisible	con_os2.cpp	/^static int CursorVisible = 1; \/* 1 means visible *\/$/;"	v	file:
CursorVisible	con_x11.cpp	/^static int CursorVisible = 1;$/;"	v	file:
CursorX	con_linux.cpp	/^unsigned int CursorX = 0;$/;"	v
CursorX	con_x11.cpp	/^static unsigned int CursorX = 0;$/;"	v	file:
CursorXYPos	con_x11.cpp	491;"	d	file:
CursorXYPos	g_motif.cpp	741;"	d	file:
CursorXYPos	g_qt.cpp	808;"	d	file:
CursorY	con_linux.cpp	/^unsigned int CursorY = 0;$/;"	v
CursorY	con_x11.cpp	/^static unsigned int CursorY = 0;$/;"	v	file:
DCH_ADOWN	console.h	30;"	d
DCH_ALEFT	console.h	33;"	d
DCH_ARIGHT	console.h	34;"	d
DCH_AUP	console.h	29;"	d
DCH_C1	console.h	14;"	d
DCH_C2	console.h	15;"	d
DCH_C3	console.h	16;"	d
DCH_C4	console.h	17;"	d
DCH_END	console.h	28;"	d
DCH_EOF	console.h	27;"	d
DCH_EOL	console.h	26;"	d
DCH_H	console.h	18;"	d
DCH_HBACK	console.h	32;"	d
DCH_HFORE	console.h	31;"	d
DCH_M1	console.h	20;"	d
DCH_M2	console.h	21;"	d
DCH_M3	console.h	22;"	d
DCH_M4	console.h	23;"	d
DCH_RPTR	console.h	25;"	d
DCH_SLANG_ADOWN	con_slang.cpp	69;"	d	file:
DCH_SLANG_ALEFT	con_slang.cpp	72;"	d	file:
DCH_SLANG_ARIGHT	con_slang.cpp	73;"	d	file:
DCH_SLANG_AUP	con_slang.cpp	68;"	d	file:
DCH_SLANG_C1	con_slang.cpp	53;"	d	file:
DCH_SLANG_C2	con_slang.cpp	54;"	d	file:
DCH_SLANG_C3	con_slang.cpp	55;"	d	file:
DCH_SLANG_C4	con_slang.cpp	56;"	d	file:
DCH_SLANG_END	con_slang.cpp	67;"	d	file:
DCH_SLANG_EOF	con_slang.cpp	66;"	d	file:
DCH_SLANG_EOL	con_slang.cpp	65;"	d	file:
DCH_SLANG_H	con_slang.cpp	57;"	d	file:
DCH_SLANG_HBACK	con_slang.cpp	71;"	d	file:
DCH_SLANG_HFORE	con_slang.cpp	70;"	d	file:
DCH_SLANG_M1	con_slang.cpp	59;"	d	file:
DCH_SLANG_M2	con_slang.cpp	60;"	d	file:
DCH_SLANG_M3	con_slang.cpp	61;"	d	file:
DCH_SLANG_M4	con_slang.cpp	62;"	d	file:
DCH_SLANG_RPTR	con_slang.cpp	64;"	d	file:
DCH_SLANG_V	con_slang.cpp	58;"	d	file:
DCH_SLANG_X	con_slang.cpp	63;"	d	file:
DCH_V	console.h	19;"	d
DCH_X	console.h	24;"	d
DEBUG	g_motif.cpp	44;"	d	file:
DEBUGX	g_qt.cpp	41;"	d	file:
DEBUGX	g_qt_dlg.cpp	21;"	d	file:
DECLARE_OSTREAM_FUNC1	log.h	246;"	d
DECLARE_OSTREAM_FUNC2	log.h	258;"	d
DESKTOP_NAME	c_desktop.h	16;"	d
DESKTOP_NAME	c_desktop.h	18;"	d
DESKTOP_VER	c_desktop.cpp	14;"	d	file:
DESKTOP_VER1	c_desktop.cpp	15;"	d	file:
DLGGetFile	g_nodlg.cpp	/^int DLGGetFile(GView *v, const char *Prompt, unsigned int BufLen, char *FileName, int Flags) {$/;"	f
DLGGetFile	g_pm.cpp	/^int DLGGetFile(GView *View, const char *Prompt, unsigned int BufLen, char *FileName, int Flags) {$/;"	f
DLGGetFile	g_qt_dlg.cpp	/^int DLGGetFile(GView *v, const char *Prompt, unsigned int BufLen, char *FileName, int Flags) {$/;"	f
DLGGetFind	g_nodlg.cpp	/^int DLGGetFind(GView *View, SearchReplaceOptions &sr) {$/;"	f
DLGGetFind	g_pm.cpp	/^int DLGGetFind(GView *View, SearchReplaceOptions &sr) {$/;"	f
DLGGetFind	g_qt_dlg.cpp	/^int DLGGetFind(GView *View, SearchReplaceOptions &sr) {$/;"	f
DLGGetFindReplace	g_nodlg.cpp	/^int DLGGetFindReplace(GView *View, SearchReplaceOptions &sr) {$/;"	f
DLGGetFindReplace	g_pm.cpp	/^int DLGGetFindReplace(GView *View, SearchReplaceOptions &sr) {$/;"	f
DLGGetFindReplace	g_qt_dlg.cpp	/^int DLGGetFindReplace(GView *View, SearchReplaceOptions &sr) {$/;"	f
DLGGetStr	g_nodlg.cpp	/^int DLGGetStr(GView *View, const char *Prompt, unsigned int BufLen, char *Str, int HistId, int Flags) {$/;"	f
DLGGetStr	g_pm.cpp	/^int DLGGetStr(GView *View, const char *Prompt, unsigned int BufLen, char *Str, int HistId, int Flags) {$/;"	f
DLGGetStr	g_qt_dlg.cpp	/^int DLGGetStr(GView *View, char *Prompt, unsigned int BufLen, char *Str, int HistId, int Flags) {$/;"	f
DLGPickChoice	g_nodlg.cpp	/^int DLGPickChoice(GView *v, const char *ATitle, int NSel, va_list ap, int Flags) {$/;"	f
DLGPickChoice	g_pm.cpp	/^int DLGPickChoice(GView *View, const char *ATitle, int NSel, va_list ap, int Flags) {$/;"	f
DLGPickChoice	g_qt_dlg.cpp	/^int DLGPickChoice(GView *v, char *ATitle, int NSel, va_list ap, int Flags) {$/;"	f
Data	e_buffer.h	/^    void **Data;  $/;"	m	struct:_UndoStack
DeadTrans	con_linux.cpp	/^} DeadTrans[] = {$/;"	v
DefaultBufferFlags	c_mode.cpp	/^EBufferFlags DefaultBufferFlags = {$/;"	v
DefaultConfig	defcfg.h	/^char DefaultConfig[] = {$/;"	v
DefaultModeName	c_config.cpp	/^char DefaultModeName[32] = "";$/;"	v
DefineColor	cfte.cpp	/^int DefineColor(char *name, char *value) {$/;"	f
DefineWord	cfte.cpp	/^void DefineWord(const char *w) {$/;"	f
DefinedColor	cfte.cpp	/^char *DefinedColor(char *name) {$/;"	f
DefinedWord	cfte.cpp	/^int DefinedWord(const char *w) {$/;"	f
DelChars	e_buffer.cpp	/^int EBuffer::DelChars(int Row, int Ofs, int ACount) {$/;"	f	class:EBuffer
DelLine	e_buffer.cpp	/^int EBuffer::DelLine(int Row, int DoMark) {$/;"	f	class:EBuffer
DelText	e_buffer.cpp	/^int EBuffer::DelText(int Row, int Col, int ACount, int DoMark) {$/;"	f	class:EBuffer
Delete	e_cmds.cpp	/^int EBuffer::Delete() {$/;"	f	class:EBuffer
DeleteModel	view.cpp	/^void EView::DeleteModel(EModel *M) {$/;"	f	class:EView
DeleteRelated	e_buffer.cpp	/^void EBuffer::DeleteRelated() {$/;"	f	class:EBuffer
DeleteRelated	o_model.cpp	/^void EModel::DeleteRelated() {$/;"	f	class:EModel
DesktopFileName	c_desktop.cpp	/^char DesktopFileName[256] = "";$/;"	v
DesktopSaveAs	egui.cpp	/^int EGUI::DesktopSaveAs(ExState &State, GxView *view) {$/;"	f	class:EGUI
Diacr	con_linux.cpp	/^    char Diacr;$/;"	m	struct:	file:
Die	con_linux.cpp	/^static void Die(int) {$/;"	f	file:
DieError	g_motif.cpp	/^void DieError(int rc, const char *msg, ...) {$/;"	f
DieError	g_pm.cpp	/^void DieError(int rc, const char *msg, ...) {$/;"	f
DieError	g_qt.cpp	/^void DieError(int rc, const char *msg, ...) {$/;"	f
DieError	g_text.cpp	/^void DieError(int rc, const char *msg, ...) {$/;"	f
DirOpen	view.cpp	/^int EView::DirOpen(ExState &State) {$/;"	f	class:EView
Direction	i_search.h	/^    int Direction;$/;"	m	class:ExISearch
Directory	o_messages.h	/^    char *Directory;$/;"	m	class:EMessages
Directory	s_direct.h	/^    char *Directory;$/;"	m	class:FileFind
DispatchCommand	egui.cpp	/^void EGUI::DispatchCommand(GxView *view, TEvent &Event) {$/;"	f	class:EGUI
DispatchEvent	egui.cpp	/^void EGUI::DispatchEvent(GFrame *frame, GView *view, TEvent &Event) {$/;"	f	class:EGUI
DispatchEvent	g_motif.cpp	/^void GUI::DispatchEvent(GFrame *frame, GView *view, TEvent &Event) {$/;"	f	class:GUI
DispatchEvent	g_pm.cpp	/^void GUI::DispatchEvent(GFrame *frame, GView *view, TEvent &Event) {$/;"	f	class:GUI
DispatchEvent	g_qt.cpp	/^void GUI::DispatchEvent(GFrame *frame, GView *view, TEvent &Event) {$/;"	f	class:GUI
DispatchEvent	g_text.cpp	/^void GUI::DispatchEvent(GFrame * \/*frame*\/, GView *view, TEvent &Event) {$/;"	f	class:GUI
DispatchKey	egui.cpp	/^void EGUI::DispatchKey(GxView *view, TEvent &Event) {$/;"	f	class:EGUI
DoChoice	g_pm.cpp	/^static int DoChoice(HWND hwndFrame, ChoiceInfo *choice) {$/;"	f	file:
DoLoadDesktopOnEntry	egui.cpp	/^void EGUI::DoLoadDesktopOnEntry(int &\/*argc*\/, char **argv) {$/;"	f	class:EGUI
DoLoadDesktopOnEntry	fte2.cpp	/^void DoLoadDesktopOnEntry(int &argc, char **argv) {$/;"	f
DoLoadHistoryOnEntry	egui.cpp	/^void EGUI::DoLoadHistoryOnEntry(int &argc, char **argv) {$/;"	f	class:EGUI
DoLoadHistoryOnEntry	fte2.cpp	/^static void DoLoadHistoryOnEntry(int &argc, char **argv) {$/;"	f	file:
DoSaveHistoryOnExit	egui.cpp	/^void EGUI::DoSaveHistoryOnExit() {$/;"	f	class:EGUI
DoSaveHistoryOnExit	fte2.cpp	/^static void DoSaveHistoryOnExit() {$/;"	f	file:
DoTerm	con_nt.cpp	/^    int DoTerm;$/;"	m	struct:	file:
DoTerm	con_os2.cpp	/^    int DoTerm;$/;"	m	struct:	file:
DoTerm	g_pm.cpp	/^    int DoTerm;$/;"	m	struct:	file:
DoWrap	e_cmds.cpp	/^int EBuffer::DoWrap(int WrapAll) {$/;"	f	class:EBuffer
Draw	e_redraw.cpp	/^void EBuffer::Draw(int Row0, int RowE) {$/;"	f	class:EBuffer
DrawCursor	con_dosx.cpp	/^static void DrawCursor(int Show) {$/;"	f	file:
DrawCursor	con_nt.cpp	/^static void DrawCursor(int Show) { \/*FOLD00*\/$/;"	f	file:
DrawCursor	con_os2.cpp	/^static void DrawCursor(int Show) {$/;"	f	file:
DrawCursor	con_x11.cpp	/^void DrawCursor(int Show) {$/;"	f
DrawCursor	g_motif.cpp	/^void GViewPeer::DrawCursor(int Show) {$/;"	f	class:GViewPeer
DrawCursor	g_qt.cpp	/^void GViewPeer::DrawCursor(\/*QPainter *painter, *\/int Show) {$/;"	f	class:GViewPeer
DrawHMenu	menu_text.cpp	/^int DrawHMenu(int x, int y, int id, int active) {$/;"	f
DrawLine	e_redraw.cpp	/^void EBuffer::DrawLine(TDrawBuffer B, int VRow, int C, int W, int &HilitX) {$/;"	f	class:EBuffer
DrawLine	o_buffer.cpp	/^void EEditPort::DrawLine(int L, TDrawBuffer B) {$/;"	f	class:EEditPort
DrawLine	o_buflist.cpp	/^void BufferView::DrawLine(PCell B, int Line, int Col, ChColor color, int Width) {$/;"	f	class:BufferView
DrawLine	o_directory.cpp	/^void EDirectory::DrawLine(PCell B, int Line, int Col, ChColor color, int Width) {$/;"	f	class:EDirectory
DrawLine	o_list.cpp	/^void EList::DrawLine(PCell \/*B*\/, int \/*Line*\/, int \/*Col*\/, ChColor \/*color*\/, int \/*Width*\/) {$/;"	f	class:EList
DrawLine	o_messages.cpp	/^void EMessages::DrawLine(PCell B, int Line, int Col, ChColor color, int Width) {$/;"	f	class:EMessages
DrawLine	o_modemap.cpp	/^void EventMapView::DrawLine(PCell B, int Line, int Col, ChColor color, int Width) {$/;"	f	class:EventMapView
DrawLine	o_routine.cpp	/^void RoutineView::DrawLine(PCell B, int Line, int Col, ChColor color, int Width) {$/;"	f	class:RoutineView
DrawMenuBar	menu_text.cpp	/^void GFrame::DrawMenuBar() {$/;"	f	class:GFrame
DrawMouse	con_dosx.cpp	/^static void DrawMouse(int Show)$/;"	f	file:
DrawMouse	con_os2.cpp	/^static void DrawMouse(int Show) {$/;"	f	file:
DrawScrollBar	g_text.cpp	/^int GViewPeer::DrawScrollBar() {$/;"	f	class:GViewPeer
DrawVMenu	menu_text.cpp	/^int DrawVMenu(int x, int y, int id, int active) {$/;"	f
DumpEventMap	o_modemap.cpp	/^void EventMapView::DumpEventMap(EEventMap *aEventMap) {$/;"	f	class:EventMapView
DumpKey	o_modemap.cpp	/^void EventMapView::DumpKey(const char *aPrefix, EKey *Key) {$/;"	f	class:EventMapView
DumpMap	o_modemap.cpp	/^void EventMapView::DumpMap(const char *aPrefix, EKeyMap *aKeyMap) {$/;"	f	class:EventMapView
EAbbrev	c_bind.cpp	/^EAbbrev::EAbbrev(const char *aMatch, const char *aReplace) {$/;"	f	class:EAbbrev
EAbbrev	c_bind.cpp	/^EAbbrev::EAbbrev(const char *aMatch, int aCmd) {$/;"	f	class:EAbbrev
EAbbrev	c_bind.h	/^class EAbbrev {$/;"	c
EBookmark	e_buffer.h	/^} EBookmark;$/;"	t
EBuffer	e_buffer.cpp	/^EBuffer::EBuffer(int createFlags, EModel **ARoot, const char * \/*AName*\/)$/;"	f	class:EBuffer
EBuffer	e_buffer.h	/^class EBuffer: public EModel {$/;"	c
EBufferFlags	c_mode.h	/^} EBufferFlags;$/;"	t
EColorize	c_hilit.cpp	/^EColorize::EColorize(const char *AName, const char *AParent) {$/;"	f	class:EColorize
EColorize	c_hilit.h	/^class EColorize {$/;"	c
EDIT_BORDER	g_qt.cpp	43;"	d	file:
EDirectory	o_directory.cpp	/^EDirectory::EDirectory(int createFlags, EModel **ARoot, char *aPath): EList(createFlags, ARoot, aPath) {$/;"	f	class:EDirectory
EDirectory	o_directory.h	/^class EDirectory: public EList {$/;"	c
EEditPort	e_buffer.h	/^class EEditPort: public EViewPort {$/;"	c
EEditPort	o_buffer.cpp	/^EEditPort::EEditPort(EBuffer *B, EView *V): EViewPort(V) {$/;"	f	class:EEditPort
EEventMap	c_bind.cpp	/^EEventMap::EEventMap(const char *AName, EEventMap *AParent) {$/;"	f	class:EEventMap
EEventMap	c_bind.h	/^class EEventMap {$/;"	c
EFold	e_buffer.h	/^} EFold;$/;"	t
EFrame	egui.cpp	/^EFrame::EFrame(int XSize, int YSize): GFrame(XSize, YSize) {$/;"	f	class:EFrame
EFrame	egui.h	/^class EFrame: public GFrame {$/;"	c
EGUI	egui.cpp	/^EGUI::EGUI(int &argc, char **argv, int XSize, int YSize): GUI(argc, argv, XSize, YSize) {$/;"	f	class:EGUI
EGUI	egui.h	/^class EGUI: public GUI {$/;"	c
EKey	c_bind.cpp	/^EKey::EKey(char *aKey) {$/;"	f	class:EKey
EKey	c_bind.cpp	/^EKey::EKey(char *aKey, EKeyMap *aKeyMap) {$/;"	f	class:EKey
EKey	c_bind.h	/^class EKey {$/;"	c
EKeyMap	c_bind.cpp	/^EKeyMap::EKeyMap() {$/;"	f	class:EKeyMap
EKeyMap	c_bind.h	/^class EKeyMap {$/;"	c
ELine	e_buffer.h	/^class ELine {$/;"	c
ELine	e_line.cpp	/^ELine::ELine(char *AChars, int ACount) {$/;"	f	class:ELine
ELine	e_line.cpp	/^ELine::ELine(int ACount, char *AChars) {$/;"	f	class:ELine
EList	o_list.cpp	/^EList::EList(int createFlags, EModel **ARoot, const char *aTitle): EModel(createFlags, ARoot) {$/;"	f	class:EList
EList	o_list.h	/^class EList: public EModel {$/;"	c
EListPort	o_list.cpp	/^EListPort::EListPort(EList *L, EView *V): EViewPort(V) {$/;"	f	class:EListPort
EListPort	o_list.h	/^class EListPort: public EViewPort {$/;"	c
EM_LocalMenu	c_mode.h	195;"	d
EM_MENUS	c_mode.h	193;"	d
EM_MainMenu	c_mode.h	194;"	d
EMap	o_modemap.h	/^    EEventMap *EMap;$/;"	m	class:EventMapView
EMark	e_mark.cpp	/^EMark::EMark(char *aName, char *aFileName, EPoint aPoint, EBuffer *aBuffer) {$/;"	f	class:EMark
EMark	e_mark.h	/^class EMark {$/;"	c
EMarkIndex	e_mark.cpp	/^EMarkIndex::EMarkIndex() {$/;"	f	class:EMarkIndex
EMarkIndex	e_mark.h	/^class EMarkIndex {$/;"	c
EMessages	o_messages.cpp	/^EMessages::EMessages(int createFlags, EModel **ARoot, char *ADir, char *ACommand): EList(createFlags, ARoot, "Messages") {$/;"	f	class:EMessages
EMessages	o_messages.h	/^class EMessages: public EList {$/;"	c
EMode	c_bind.cpp	/^EMode::EMode(EMode *aMode, EEventMap *Map, const char *aName) {$/;"	f	class:EMode
EMode	c_bind.h	/^class EMode {$/;"	c
EModel	o_model.cpp	/^EModel::EModel(int createFlags, EModel **ARoot) {$/;"	f	class:EModel
EModel	o_model.h	/^class EModel {$/;"	c
ENDFUNCAS	log.h	189;"	d
ENDFUNCAS	log.h	296;"	d
ENDFUNCAS_SAFE	log.h	190;"	d
ENDFUNCAS_SAFE	log.h	297;"	d
ENDFUNCRC	log.h	187;"	d
ENDFUNCRC	log.h	294;"	d
ENDFUNCRC_SAFE	log.h	188;"	d
ENDFUNCRC_SAFE	log.h	295;"	d
ENDLINE	log.h	184;"	d
ENDLINE	log.h	291;"	d
EPoint	e_buffer.h	/^    EPoint(int aRow = 0, int aCol = 0) { Row = aRow; Col = aCol; }$/;"	f	class:EPoint
EPoint	e_buffer.h	/^class EPoint {$/;"	c
EVENT_FLG	cfte.cpp	256;"	d	file:
EView	o_model.h	/^class EView {$/;"	c
EView	view.cpp	/^EView::EView(EModel *AModel) {$/;"	f	class:EView
EViewPort	o_model.cpp	/^EViewPort::EViewPort(EView *V) { View = V; ReCenter = 0; }$/;"	f	class:EViewPort
EViewPort	o_model.h	/^class EViewPort {$/;"	c
E_CANCEL	e_buffer.h	18;"	d
E_ERROR	e_buffer.h	19;"	d
E_NOMEM	e_buffer.h	20;"	d
E_OK	e_buffer.h	17;"	d
EditorCleanup	egui.cpp	/^void EGUI::EditorCleanup() {$/;"	f	class:EGUI
EditorCleanup	fte2.cpp	/^static void EditorCleanup() {$/;"	f	file:
EditorInit	egui.cpp	/^void EGUI::EditorInit() {$/;"	f	class:EGUI
EditorInit	fte2.cpp	/^static void EditorInit() {$/;"	f	file:
EndExec	g_motif.cpp	/^void GView::EndExec(int NewResult) {$/;"	f	class:GView
EndExec	g_pm.cpp	/^void GView::EndExec(int NewResult) {$/;"	f	class:GView
EndExec	g_qt.cpp	/^void GView::EndExec(int NewResult) {$/;"	f	class:GView
EndExec	g_text.cpp	/^void GView::EndExec(int NewResult) {$/;"	f	class:GView
EndExec	i_oview.cpp	/^void ExView::EndExec(int NewResult) {$/;"	f	class:ExView
EndHilit	e_buffer.h	/^    int StartHilit, EndHilit;$/;"	m	class:EBuffer
EndUndo	e_undo.cpp	/^int EBuffer::EndUndo() {$/;"	f	class:EBuffer
Entry	g_pm.cpp	/^    char *Entry;$/;"	m	struct:	file:
ErFAIL	c_commands.h	/^    ErFAIL = 0,$/;"	e
ErOK	c_commands.h	/^    ErOK = 1$/;"	e
ErrCount	o_messages.h	/^    int ErrCount;$/;"	m	class:EMessages
ErrList	o_messages.h	/^    Error **ErrList;$/;"	m	class:EMessages
Error	o_messages.h	/^} Error;$/;"	t
EventBuf	con_dosx.cpp	/^static TEvent EventBuf = { evNone };$/;"	v	file:
EventBuf	con_nt.cpp	/^static TEvent EventBuf = { evNone };$/;"	v	file:
EventBuf	con_os2.cpp	/^static TEvent EventBuf = { evNone };$/;"	v	file:
EventBuf	g_motif.cpp	/^TEvent EventBuf = { evNone };$/;"	v
EventBuf	g_pm.cpp	/^TEvent EventBuf = { evNone };$/;"	v
EventBuf	g_qt.cpp	/^TEvent EventBuf = { evNone };$/;"	v
EventMapView	o_modemap.cpp	/^EventMapView::EventMapView(int createFlags, EModel **ARoot, EEventMap *Map): EList(createFlags, ARoot, "Event Map") {$/;"	f	class:EventMapView
EventMapView	o_modemap.h	/^class EventMapView: public EList {$/;"	c
EventMaps	c_bind.cpp	/^EEventMap *EventMaps = 0;$/;"	v
EventMask	con_nt.cpp	/^static TEventMask EventMask;$/;"	v	file:
ExASCII	i_ascii.cpp	/^ExASCII::ExASCII(): ExView() {$/;"	f	class:ExASCII
ExASCII	i_ascii.h	/^class ExASCII: public ExView {$/;"	c
ExASCIITable	c_commands.h	/^    ExASCIITable,$/;"	e
ExActivate	c_commands.h	/^    ExActivate,$/;"	e
ExActivateInOtherWindow	c_commands.h	/^    ExActivateInOtherWindow,$/;"	e
ExBackSpace	c_commands.h	/^    ExBackSpace,$/;"	e
ExBlockBegin	c_commands.h	/^    ExBlockBegin,$/;"	e
ExBlockCaseDown	c_commands.h	/^    ExBlockCaseDown,$/;"	e
ExBlockCaseToggle	c_commands.h	/^    ExBlockCaseToggle,$/;"	e
ExBlockCaseUp	c_commands.h	/^    ExBlockCaseUp,$/;"	e
ExBlockClear	c_commands.h	/^    ExBlockClear,$/;"	e
ExBlockCopy	c_commands.h	/^    ExBlockCopy,$/;"	e
ExBlockCopyAppend	c_commands.h	/^    ExBlockCopyAppend,$/;"	e
ExBlockCut	c_commands.h	/^    ExBlockCut,$/;"	e
ExBlockCutAppend	c_commands.h	/^    ExBlockCutAppend,$/;"	e
ExBlockEnTab	c_commands.h	/^    ExBlockEnTab,$/;"	e
ExBlockEnd	c_commands.h	/^    ExBlockEnd,$/;"	e
ExBlockExtendBegin	c_commands.h	/^    ExBlockExtendBegin,$/;"	e
ExBlockExtendEnd	c_commands.h	/^    ExBlockExtendEnd,$/;"	e
ExBlockIndent	c_commands.h	/^    ExBlockIndent,$/;"	e
ExBlockKill	c_commands.h	/^    ExBlockKill,$/;"	e
ExBlockMarkColumn	c_commands.h	/^    ExBlockMarkColumn,$/;"	e
ExBlockMarkFunction	c_commands.h	/^    ExBlockMarkFunction,$/;"	e
ExBlockMarkLine	c_commands.h	/^    ExBlockMarkLine,$/;"	e
ExBlockMarkStream	c_commands.h	/^    ExBlockMarkStream,$/;"	e
ExBlockPaste	c_commands.h	/^    ExBlockPaste,$/;"	e
ExBlockPasteColumn	c_commands.h	/^    ExBlockPasteColumn,$/;"	e
ExBlockPasteLine	c_commands.h	/^    ExBlockPasteLine,$/;"	e
ExBlockPasteStream	c_commands.h	/^    ExBlockPasteStream,$/;"	e
ExBlockPrint	c_commands.h	/^    ExBlockPrint,$/;"	e
ExBlockReIndent	c_commands.h	/^    ExBlockReIndent,$/;"	e
ExBlockRead	c_commands.h	/^    ExBlockRead,$/;"	e
ExBlockReadColumn	c_commands.h	/^    ExBlockReadColumn,$/;"	e
ExBlockReadLine	c_commands.h	/^    ExBlockReadLine,$/;"	e
ExBlockReadStream	c_commands.h	/^    ExBlockReadStream,$/;"	e
ExBlockSelectLine	c_commands.h	/^    ExBlockSelectLine,$/;"	e
ExBlockSelectPara	c_commands.h	/^    ExBlockSelectPara,$/;"	e
ExBlockSelectWord	c_commands.h	/^    ExBlockSelectWord,$/;"	e
ExBlockSort	c_commands.h	/^    ExBlockSort,$/;"	e
ExBlockSortReverse	c_commands.h	/^    ExBlockSortReverse,$/;"	e
ExBlockTrans	c_commands.h	/^    ExBlockTrans,$/;"	e
ExBlockTrim	c_commands.h	/^    ExBlockTrim,$/;"	e
ExBlockUnTab	c_commands.h	/^    ExBlockUnTab,$/;"	e
ExBlockUnindent	c_commands.h	/^    ExBlockUnindent,$/;"	e
ExBlockUnmark	c_commands.h	/^    ExBlockUnmark,$/;"	e
ExBlockWrite	c_commands.h	/^    ExBlockWrite,$/;"	e
ExBufListFileClose	c_commands.h	/^    ExBufListFileClose,$/;"	e
ExBufListFileSave	c_commands.h	/^    ExBufListFileSave,$/;"	e
ExBufferViewNext	c_commands.h	/^    ExBufferViewNext,$/;"	e
ExBufferViewPrev	c_commands.h	/^    ExBufferViewPrev,$/;"	e
ExCancel	c_commands.h	/^    ExCancel,$/;"	e
ExChangeFlags	c_commands.h	/^    ExChangeFlags,$/;"	e
ExChangeKeys	c_commands.h	/^    ExChangeKeys,$/;"	e
ExChangeLeftMargin	c_commands.h	/^    ExChangeLeftMargin,$/;"	e
ExChangeMode	c_commands.h	/^    ExChangeMode,$/;"	e
ExChangeRightMargin	c_commands.h	/^    ExChangeRightMargin,$/;"	e
ExChangeTabSize	c_commands.h	/^    ExChangeTabSize,$/;"	e
ExCharCaseDown	c_commands.h	/^    ExCharCaseDown,$/;"	e
ExCharCaseToggle	c_commands.h	/^    ExCharCaseToggle,$/;"	e
ExCharCaseUp	c_commands.h	/^    ExCharCaseUp,$/;"	e
ExCharTrans	c_commands.h	/^    ExCharTrans,$/;"	e
ExChildClose	c_commands.h	/^    ExChildClose,$/;"	e
ExChoice	i_choice.cpp	/^ExChoice::ExChoice(const char *ATitle, int NSel, va_list ap): ExView() {$/;"	f	class:ExChoice
ExChoice	i_choice.h	/^class ExChoice: public ExView {$/;"	c
ExClearMessages	c_commands.h	/^    ExClearMessages,$/;"	e
ExClipClear	c_commands.h	/^    ExClipClear,$/;"	e
ExCloseActivate	c_commands.h	/^    ExCloseActivate,$/;"	e
ExCommands	c_commands.h	/^} ExCommands;$/;"	t
ExCompile	c_commands.h	/^    ExCompile,$/;"	e
ExCompileNextError	c_commands.h	/^    ExCompileNextError,$/;"	e
ExCompilePrevError	c_commands.h	/^    ExCompilePrevError,$/;"	e
ExComplete	i_complete.cpp	/^ExComplete::ExComplete(EBuffer *B): ExView()$/;"	f	class:ExComplete
ExComplete	i_complete.h	/^class ExComplete: public ExView {$/;"	c
ExCompleteWord	c_commands.h	/^    ExCompleteWord,$/;"	e
ExConfigRecompile	c_commands.h	/^    ExConfigRecompile,$/;"	e
ExDelete	c_commands.h	/^    ExDelete,$/;"	e
ExDeleteFile	c_commands.h	/^    ExDeleteFile,$/;"	e
ExDesktopSave	c_commands.h	/^    ExDesktopSave,$/;"	e
ExDesktopSaveAs	c_commands.h	/^    ExDesktopSaveAs,$/;"	e
ExDirGoDown	c_commands.h	/^    ExDirGoDown,$/;"	e
ExDirGoRoot	c_commands.h	/^    ExDirGoRoot,$/;"	e
ExDirGoUp	c_commands.h	/^    ExDirGoUp,$/;"	e
ExDirGoto	c_commands.h	/^    ExDirGoto,$/;"	e
ExDirOpen	c_commands.h	/^    ExDirOpen,$/;"	e
ExExitEditor	c_commands.h	/^    ExExitEditor,$/;"	e
ExFail	c_commands.h	/^    ExFail,$/;"	e
ExFileClose	c_commands.h	/^    ExFileClose,$/;"	e
ExFileCloseAll	c_commands.h	/^    ExFileCloseAll,$/;"	e
ExFileLast	c_commands.h	/^    ExFileLast,$/;"	e
ExFileNext	c_commands.h	/^    ExFileNext,$/;"	e
ExFileOpen	c_commands.h	/^    ExFileOpen,$/;"	e
ExFileOpenInMode	c_commands.h	/^    ExFileOpenInMode,$/;"	e
ExFilePrev	c_commands.h	/^    ExFilePrev,$/;"	e
ExFilePrint	c_commands.h	/^    ExFilePrint,$/;"	e
ExFileReload	c_commands.h	/^    ExFileReload,$/;"	e
ExFileSave	c_commands.h	/^    ExFileSave,$/;"	e
ExFileSaveAll	c_commands.h	/^    ExFileSaveAll,$/;"	e
ExFileSaveAs	c_commands.h	/^    ExFileSaveAs,$/;"	e
ExFileTrim	c_commands.h	/^    ExFileTrim,$/;"	e
ExFileWriteTo	c_commands.h	/^    ExFileWriteTo,$/;"	e
ExFind	c_commands.h	/^    ExFind,$/;"	e
ExFindRepeat	c_commands.h	/^    ExFindRepeat,$/;"	e
ExFindRepeatOnce	c_commands.h	/^    ExFindRepeatOnce,$/;"	e
ExFindRepeatReverse	c_commands.h	/^    ExFindRepeatReverse,$/;"	e
ExFindReplace	c_commands.h	/^    ExFindReplace,$/;"	e
ExFoldClose	c_commands.h	/^    ExFoldClose,$/;"	e
ExFoldCloseAll	c_commands.h	/^    ExFoldCloseAll,$/;"	e
ExFoldCreate	c_commands.h	/^    ExFoldCreate,$/;"	e
ExFoldCreateAtRoutines	c_commands.h	/^    ExFoldCreateAtRoutines,$/;"	e
ExFoldCreateByRegexp	c_commands.h	/^    ExFoldCreateByRegexp,$/;"	e
ExFoldDemote	c_commands.h	/^    ExFoldDemote,$/;"	e
ExFoldDestroy	c_commands.h	/^    ExFoldDestroy,$/;"	e
ExFoldDestroyAll	c_commands.h	/^    ExFoldDestroyAll,$/;"	e
ExFoldOpen	c_commands.h	/^    ExFoldOpen,$/;"	e
ExFoldOpenAll	c_commands.h	/^    ExFoldOpenAll,$/;"	e
ExFoldOpenNested	c_commands.h	/^    ExFoldOpenNested,$/;"	e
ExFoldPromote	c_commands.h	/^    ExFoldPromote,$/;"	e
ExFoldToggleOpenClose	c_commands.h	/^    ExFoldToggleOpenClose,$/;"	e
ExFrameClose	c_commands.h	/^    ExFrameClose,$/;"	e
ExFrameNew	c_commands.h	/^    ExFrameNew,$/;"	e
ExFrameNext	c_commands.h	/^    ExFrameNext,$/;"	e
ExFramePrev	c_commands.h	/^    ExFramePrev,$/;"	e
ExGotoBookmark	c_commands.h	/^    ExGotoBookmark,$/;"	e
ExGotoGlobalBookmark	c_commands.h	/^    ExGotoGlobalBookmark,$/;"	e
ExHilitMatchBracket	c_commands.h	/^    ExHilitMatchBracket,$/;"	e
ExHilitWord	c_commands.h	/^    ExHilitWord,$/;"	e
ExISearch	i_search.cpp	/^ExISearch::ExISearch(EBuffer *B) {$/;"	f	class:ExISearch
ExISearch	i_search.h	/^class ExISearch: public ExView {$/;"	c
ExIncrementalSearch	c_commands.h	/^    ExIncrementalSearch,$/;"	e
ExIndentFunction	c_commands.h	/^    ExIndentFunction,$/;"	e
ExInput	i_input.cpp	/^ExInput::ExInput(const char *APrompt, char *ALine, unsigned int ABufLen, Completer AComp, int Select, int AHistId): ExView() {$/;"	f	class:ExInput
ExInput	i_input.h	/^class ExInput: public ExView {$/;"	c
ExInsPrevLineChar	c_commands.h	/^    ExInsPrevLineChar,$/;"	e
ExInsPrevLineToEol	c_commands.h	/^    ExInsPrevLineToEol,$/;"	e
ExInsertChar	c_commands.h	/^    ExInsertChar,$/;"	e
ExInsertDate	c_commands.h	/^    ExInsertDate,$/;"	e
ExInsertSpace	c_commands.h	/^    ExInsertSpace,$/;"	e
ExInsertSpacesToTab	c_commands.h	/^    ExInsertSpacesToTab,$/;"	e
ExInsertString	c_commands.h	/^    ExInsertString,$/;"	e
ExInsertTab	c_commands.h	/^    ExInsertTab,$/;"	e
ExInsertUid	c_commands.h	/^    ExInsertUid,$/;"	e
ExKey	i_key.cpp	/^ExKey::ExKey(const char *APrompt): ExView() {$/;"	f	class:ExKey
ExKey	i_key.h	/^class ExKey: public ExView {$/;"	c
ExKillBlock	c_commands.h	/^    ExKillBlock,$/;"	e
ExKillBlockOrChar	c_commands.h	/^    ExKillBlockOrChar,$/;"	e
ExKillBlockOrCharPrev	c_commands.h	/^    ExKillBlockOrCharPrev,$/;"	e
ExKillChar	c_commands.h	/^    ExKillChar,$/;"	e
ExKillCharPrev	c_commands.h	/^    ExKillCharPrev,$/;"	e
ExKillLine	c_commands.h	/^    ExKillLine,$/;"	e
ExKillToLineEnd	c_commands.h	/^    ExKillToLineEnd,$/;"	e
ExKillToLineStart	c_commands.h	/^    ExKillToLineStart,$/;"	e
ExKillWord	c_commands.h	/^    ExKillWord,$/;"	e
ExKillWordOrCap	c_commands.h	/^    ExKillWordOrCap,$/;"	e
ExKillWordOrCapPrev	c_commands.h	/^    ExKillWordOrCapPrev,$/;"	e
ExKillWordPrev	c_commands.h	/^    ExKillWordPrev,$/;"	e
ExLineAdd	c_commands.h	/^    ExLineAdd,$/;"	e
ExLineCaseDown	c_commands.h	/^    ExLineCaseDown,$/;"	e
ExLineCaseToggle	c_commands.h	/^    ExLineCaseToggle,$/;"	e
ExLineCaseUp	c_commands.h	/^    ExLineCaseUp,$/;"	e
ExLineCenter	c_commands.h	/^    ExLineCenter,$/;"	e
ExLineDuplicate	c_commands.h	/^    ExLineDuplicate,$/;"	e
ExLineIndent	c_commands.h	/^    ExLineIndent,$/;"	e
ExLineInsert	c_commands.h	/^    ExLineInsert,$/;"	e
ExLineJoin	c_commands.h	/^    ExLineJoin,$/;"	e
ExLineNew	c_commands.h	/^    ExLineNew,$/;"	e
ExLineSplit	c_commands.h	/^    ExLineSplit,$/;"	e
ExLineTrans	c_commands.h	/^    ExLineTrans,$/;"	e
ExLineTrim	c_commands.h	/^    ExLineTrim,$/;"	e
ExListRoutines	c_commands.h	/^    ExListRoutines,$/;"	e
ExLocalMenu	c_commands.h	/^    ExLocalMenu,$/;"	e
ExMacro	c_bind.h	/^} ExMacro;$/;"	t
ExMacro	cfte.cpp	/^} ExMacro;$/;"	t	file:
ExMainMenu	c_commands.h	/^    ExMainMenu,$/;"	e
ExMatchBracket	c_commands.h	/^    ExMatchBracket,$/;"	e
ExModelView	i_modelview.cpp	/^ExModelView::ExModelView(EView *AView): ExView() {$/;"	f	class:ExModelView
ExModelView	i_modelview.h	/^class ExModelView: public ExView {$/;"	c
ExMoveBeginLinePageFile	c_commands.h	/^    ExMoveBeginLinePageFile,$/;"	e
ExMoveBeginOrNonWhite	c_commands.h	/^    ExMoveBeginOrNonWhite,$/;"	e
ExMoveBlockEnd	c_commands.h	/^    ExMoveBlockEnd,$/;"	e
ExMoveBlockStart	c_commands.h	/^    ExMoveBlockStart,$/;"	e
ExMoveDown	c_commands.h	/^    ExMoveDown,$/;"	e
ExMoveEndLinePageFile	c_commands.h	/^    ExMoveEndLinePageFile,$/;"	e
ExMoveFileEnd	c_commands.h	/^    ExMoveFileEnd,$/;"	e
ExMoveFileStart	c_commands.h	/^    ExMoveFileStart,$/;"	e
ExMoveFirstNonWhite	c_commands.h	/^    ExMoveFirstNonWhite,$/;"	e
ExMoveFoldNext	c_commands.h	/^    ExMoveFoldNext,$/;"	e
ExMoveFoldPrev	c_commands.h	/^    ExMoveFoldPrev,$/;"	e
ExMoveFoldTop	c_commands.h	/^    ExMoveFoldTop,$/;"	e
ExMoveFunctionNext	c_commands.h	/^    ExMoveFunctionNext,$/;"	e
ExMoveFunctionPrev	c_commands.h	/^    ExMoveFunctionPrev,$/;"	e
ExMoveLastNonWhite	c_commands.h	/^    ExMoveLastNonWhite,$/;"	e
ExMoveLeft	c_commands.h	/^    ExMoveLeft,$/;"	e
ExMoveLineBottom	c_commands.h	/^    ExMoveLineBottom,$/;"	e
ExMoveLineCenter	c_commands.h	/^    ExMoveLineCenter,$/;"	e
ExMoveLineEnd	c_commands.h	/^    ExMoveLineEnd,$/;"	e
ExMoveLineStart	c_commands.h	/^    ExMoveLineStart,$/;"	e
ExMoveLineTop	c_commands.h	/^    ExMoveLineTop,$/;"	e
ExMoveNext	c_commands.h	/^    ExMoveNext,$/;"	e
ExMoveNextEqualIndent	c_commands.h	/^    ExMoveNextEqualIndent,$/;"	e
ExMoveNextTab	c_commands.h	/^    ExMoveNextTab,$/;"	e
ExMovePageDown	c_commands.h	/^    ExMovePageDown,$/;"	e
ExMovePageEnd	c_commands.h	/^    ExMovePageEnd,$/;"	e
ExMovePageLeft	c_commands.h	/^    ExMovePageLeft,$/;"	e
ExMovePageRight	c_commands.h	/^    ExMovePageRight,$/;"	e
ExMovePageStart	c_commands.h	/^    ExMovePageStart,$/;"	e
ExMovePageUp	c_commands.h	/^    ExMovePageUp,$/;"	e
ExMovePrev	c_commands.h	/^    ExMovePrev,$/;"	e
ExMovePrevEqualIndent	c_commands.h	/^    ExMovePrevEqualIndent,$/;"	e
ExMovePrevPos	c_commands.h	/^    ExMovePrevPos,$/;"	e
ExMovePrevTab	c_commands.h	/^    ExMovePrevTab,$/;"	e
ExMoveRight	c_commands.h	/^    ExMoveRight,$/;"	e
ExMoveSavedPos	c_commands.h	/^    ExMoveSavedPos,$/;"	e
ExMoveSavedPosCol	c_commands.h	/^    ExMoveSavedPosCol,$/;"	e
ExMoveSavedPosRow	c_commands.h	/^    ExMoveSavedPosRow,$/;"	e
ExMoveTabEnd	c_commands.h	/^    ExMoveTabEnd,$/;"	e
ExMoveTabStart	c_commands.h	/^    ExMoveTabStart,$/;"	e
ExMoveToColumn	c_commands.h	/^    ExMoveToColumn,$/;"	e
ExMoveToLine	c_commands.h	/^    ExMoveToLine,$/;"	e
ExMoveUp	c_commands.h	/^    ExMoveUp,$/;"	e
ExMoveWordEndLeft	c_commands.h	/^    ExMoveWordEndLeft,$/;"	e
ExMoveWordEndNext	c_commands.h	/^    ExMoveWordEndNext,$/;"	e
ExMoveWordEndPrev	c_commands.h	/^    ExMoveWordEndPrev,$/;"	e
ExMoveWordEndRight	c_commands.h	/^    ExMoveWordEndRight,$/;"	e
ExMoveWordLeft	c_commands.h	/^    ExMoveWordLeft,$/;"	e
ExMoveWordNext	c_commands.h	/^    ExMoveWordNext,$/;"	e
ExMoveWordOrCapEndLeft	c_commands.h	/^    ExMoveWordOrCapEndLeft,$/;"	e
ExMoveWordOrCapEndNext	c_commands.h	/^    ExMoveWordOrCapEndNext,$/;"	e
ExMoveWordOrCapEndPrev	c_commands.h	/^    ExMoveWordOrCapEndPrev,$/;"	e
ExMoveWordOrCapEndRight	c_commands.h	/^    ExMoveWordOrCapEndRight,$/;"	e
ExMoveWordOrCapLeft	c_commands.h	/^    ExMoveWordOrCapLeft,$/;"	e
ExMoveWordOrCapNext	c_commands.h	/^    ExMoveWordOrCapNext,$/;"	e
ExMoveWordOrCapPrev	c_commands.h	/^    ExMoveWordOrCapPrev,$/;"	e
ExMoveWordOrCapRight	c_commands.h	/^    ExMoveWordOrCapRight,$/;"	e
ExMoveWordPrev	c_commands.h	/^    ExMoveWordPrev,$/;"	e
ExMoveWordRight	c_commands.h	/^    ExMoveWordRight,$/;"	e
ExNop	c_commands.h	/^    ExNop,$/;"	e
ExPlaceBookmark	c_commands.h	/^    ExPlaceBookmark,$/;"	e
ExPlaceGlobalBookmark	c_commands.h	/^    ExPlaceGlobalBookmark,$/;"	e
ExPopGlobalBookmark	c_commands.h	/^    ExPopGlobalBookmark,$/;"	e
ExPushGlobalBookmark	c_commands.h	/^    ExPushGlobalBookmark,$/;"	e
ExRedo	c_commands.h	/^    ExRedo,$/;"	e
ExRemoveBookmark	c_commands.h	/^    ExRemoveBookmark,$/;"	e
ExRemoveGlobalBookmark	c_commands.h	/^    ExRemoveGlobalBookmark,$/;"	e
ExRescan	c_commands.h	/^    ExRescan,$/;"	e
ExResult	c_commands.h	/^} ExResult;$/;"	t
ExRunCompiler	c_commands.h	/^    ExRunCompiler,$/;"	e
ExRunProgram	c_commands.h	/^    ExRunProgram,$/;"	e
ExRunProgramAsync	c_commands.h	/^    ExRunProgramAsync$/;"	e
ExSavePos	c_commands.h	/^    ExSavePos,$/;"	e
ExScrollDown	c_commands.h	/^    ExScrollDown,$/;"	e
ExScrollLeft	c_commands.h	/^    ExScrollLeft,$/;"	e
ExScrollRight	c_commands.h	/^    ExScrollRight,$/;"	e
ExScrollUp	c_commands.h	/^    ExScrollUp,$/;"	e
ExSearch	c_commands.h	/^    ExSearch,$/;"	e
ExSearchAgain	c_commands.h	/^    ExSearchAgain,$/;"	e
ExSearchAgainB	c_commands.h	/^    ExSearchAgainB,$/;"	e
ExSearchB	c_commands.h	/^    ExSearchB,$/;"	e
ExSearchReplace	c_commands.h	/^    ExSearchReplace,$/;"	e
ExSearchReplaceB	c_commands.h	/^    ExSearchReplaceB,$/;"	e
ExSearchReplaceRx	c_commands.h	/^    ExSearchReplaceRx,$/;"	e
ExSearchRx	c_commands.h	/^    ExSearchRx,$/;"	e
ExSearchWordNext	c_commands.h	/^    ExSearchWordNext,$/;"	e
ExSearchWordPrev	c_commands.h	/^    ExSearchWordPrev,$/;"	e
ExSelfInsert	c_commands.h	/^    ExSelfInsert,$/;"	e
ExSetCIndentStyle	c_commands.h	/^    ExSetCIndentStyle,$/;"	e
ExSetIndentWithTabs	c_commands.h	/^    ExSetIndentWithTabs,$/;"	e
ExSetLeftMargin	c_commands.h	/^    ExSetLeftMargin,$/;"	e
ExSetPrintDevice	c_commands.h	/^    ExSetPrintDevice,$/;"	e
ExSetRightMargin	c_commands.h	/^    ExSetRightMargin,$/;"	e
ExShowEntryScreen	c_commands.h	/^    ExShowEntryScreen,$/;"	e
ExShowHelp	c_commands.h	/^    ExShowHelp,$/;"	e
ExShowHelpWord	c_commands.h	/^    ExShowHelpWord,$/;"	e
ExShowKey	c_commands.h	/^    ExShowKey,$/;"	e
ExShowMenu	c_commands.h	/^    ExShowMenu,$/;"	e
ExShowPosition	c_commands.h	/^    ExShowPosition,$/;"	e
ExShowVersion	c_commands.h	/^    ExShowVersion,$/;"	e
ExState	c_bind.h	/^class ExState { \/\/ state of macro execution$/;"	c
ExSwitchTo	c_commands.h	/^    ExSwitchTo,$/;"	e
ExTagClear	c_commands.h	/^    ExTagClear,$/;"	e
ExTagFind	c_commands.h	/^    ExTagFind,$/;"	e
ExTagFindWord	c_commands.h	/^    ExTagFindWord,$/;"	e
ExTagGoto	c_commands.h	/^    ExTagGoto,$/;"	e
ExTagLoad	c_commands.h	/^    ExTagLoad,$/;"	e
ExTagNext	c_commands.h	/^    ExTagNext,$/;"	e
ExTagPop	c_commands.h	/^    ExTagPop,$/;"	e
ExTagPrev	c_commands.h	/^    ExTagPrev,$/;"	e
ExToggleAutoIndent	c_commands.h	/^    ExToggleAutoIndent,$/;"	e
ExToggleBackSpKillTab	c_commands.h	/^    ExToggleBackSpKillTab,$/;"	e
ExToggleBackSpUnindents	c_commands.h	/^    ExToggleBackSpUnindents,$/;"	e
ExToggleDeleteKillTab	c_commands.h	/^    ExToggleDeleteKillTab,$/;"	e
ExToggleExpandTabs	c_commands.h	/^    ExToggleExpandTabs,$/;"	e
ExToggleIndentWithTabs	c_commands.h	/^    ExToggleIndentWithTabs,$/;"	e
ExToggleInsert	c_commands.h	/^    ExToggleInsert,$/;"	e
ExToggleKeepBackups	c_commands.h	/^    ExToggleKeepBackups,$/;"	e
ExToggleMatchCase	c_commands.h	/^    ExToggleMatchCase,$/;"	e
ExToggleReadOnly	c_commands.h	/^    ExToggleReadOnly,$/;"	e
ExToggleShowMarkers	c_commands.h	/^    ExToggleShowMarkers,$/;"	e
ExToggleShowTabs	c_commands.h	/^    ExToggleShowTabs,$/;"	e
ExToggleSpaceTabs	c_commands.h	/^    ExToggleSpaceTabs,$/;"	e
ExToggleSysClipboard	c_commands.h	/^    ExToggleSysClipboard,$/;"	e
ExToggleTrim	c_commands.h	/^    ExToggleTrim,$/;"	e
ExToggleUndo	c_commands.h	/^    ExToggleUndo,$/;"	e
ExToggleWordWrap	c_commands.h	/^    ExToggleWordWrap,$/;"	e
ExTypeChar	c_commands.h	/^    ExTypeChar,$/;"	e
ExUndo	c_commands.h	/^    ExUndo,$/;"	e
ExView	i_oview.cpp	/^ExView::ExView() {$/;"	f	class:ExView
ExView	i_oview.h	/^class ExView {$/;"	c
ExViewBuffers	c_commands.h	/^    ExViewBuffers,$/;"	e
ExViewMessages	c_commands.h	/^    ExViewMessages,$/;"	e
ExViewModeMap	c_commands.h	/^    ExViewModeMap,$/;"	e
ExWinClose	c_commands.h	/^    ExWinClose,$/;"	e
ExWinHSplit	c_commands.h	/^    ExWinHSplit,$/;"	e
ExWinNext	c_commands.h	/^    ExWinNext,$/;"	e
ExWinPrev	c_commands.h	/^    ExWinPrev,$/;"	e
ExWinRefresh	c_commands.h	/^    ExWinRefresh,$/;"	e
ExWinResize	c_commands.h	/^    ExWinResize,$/;"	e
ExWinZoom	c_commands.h	/^    ExWinZoom,$/;"	e
ExWrapPara	c_commands.h	/^    ExWrapPara,$/;"	e
ExecCommand	egui.cpp	/^int EGUI::ExecCommand(GxView *view, int Command, ExState &State) {$/;"	f	class:EGUI
ExecCommand	i_modelview.cpp	/^int ExModelView::ExecCommand(int Command, ExState &State) {$/;"	f	class:ExModelView
ExecCommand	i_oview.cpp	/^int ExView::ExecCommand(int \/*Command*\/, ExState &\/*State*\/) { return ErFAIL; }$/;"	f	class:ExView
ExecCommand	i_view.cpp	/^int GxView::ExecCommand(int Command, ExState &State) {$/;"	f	class:GxView
ExecCommand	o_buffer.cpp	/^int EBuffer::ExecCommand(int Command, ExState &State) {$/;"	f	class:EBuffer
ExecCommand	o_buflist.cpp	/^int BufferView::ExecCommand(int Command, ExState &State) {$/;"	f	class:BufferView
ExecCommand	o_directory.cpp	/^int EDirectory::ExecCommand(int Command, ExState &State) {$/;"	f	class:EDirectory
ExecCommand	o_list.cpp	/^int EList::ExecCommand(int Command, ExState &State) {$/;"	f	class:EList
ExecCommand	o_messages.cpp	/^int EMessages::ExecCommand(int Command, ExState &State) {$/;"	f	class:EMessages
ExecCommand	o_model.cpp	/^int EModel::ExecCommand(int Command, ExState &State) {$/;"	f	class:EModel
ExecCommand	o_modemap.cpp	/^int EventMapView::ExecCommand(int Command, ExState &State) {$/;"	f	class:EventMapView
ExecCommand	o_routine.cpp	/^int RoutineView::ExecCommand(int Command, ExState &State) {$/;"	f	class:RoutineView
ExecCommand	view.cpp	/^int EView::ExecCommand(int Command, ExState &State) {$/;"	f	class:EView
ExecMacro	egui.cpp	/^int EGUI::ExecMacro(GxView *view, int Macro) {$/;"	f	class:EGUI
ExecMainMenu	g_motif.cpp	/^int GFrame::ExecMainMenu(char Sub) {$/;"	f	class:GFrame
ExecMainMenu	g_pm.cpp	/^int GFrame::ExecMainMenu(char Sub) {$/;"	f	class:GFrame
ExecMainMenu	g_qt.cpp	/^int GFrame::ExecMainMenu(char Sub) {$/;"	f	class:GFrame
ExecMainMenu	g_text.cpp	/^int GFrame::ExecMainMenu(char Sub) {$/;"	f	class:GFrame
ExecMainMenu	menu_text.cpp	/^int ExecMainMenu(TEvent &E, char sub) {$/;"	f
ExecVertMenu	menu_text.cpp	/^int ExecVertMenu(int x, int y, int id, TEvent &E, UpMenu *up) {$/;"	f
Execute	g_motif.cpp	/^int GView::Execute() {$/;"	f	class:GView
Execute	g_pm.cpp	/^int GView::Execute() {$/;"	f	class:GView
Execute	g_qt.cpp	/^int GView::Execute() {$/;"	f	class:GView
Execute	g_text.cpp	/^int GView::Execute() {$/;"	f	class:GView
ExitEditor	egui.cpp	/^int EGUI::ExitEditor(EView *View) {$/;"	f	class:EGUI
ExpandHeight	g_motif.cpp	/^int GView::ExpandHeight(int DeltaY) {$/;"	f	class:GView
ExpandHeight	g_motif.cpp	/^int GViewPeer::ExpandHeight(int DeltaY) {$/;"	f	class:GViewPeer
ExpandHeight	g_pm.cpp	/^int GView::ExpandHeight(int DeltaY) {$/;"	f	class:GView
ExpandHeight	g_pm.cpp	/^int GViewPeer::ExpandHeight(int DeltaY) {$/;"	f	class:GViewPeer
ExpandHeight	g_qt.cpp	/^int GView::ExpandHeight(int DeltaY) {$/;"	f	class:GView
ExpandHeight	g_qt.cpp	/^int GViewPeer::ExpandHeight(int DeltaY) {$/;"	f	class:GViewPeer
ExpandHeight	g_text.cpp	/^int GView::ExpandHeight(int DeltaY) {$/;"	f	class:GView
ExpandHeight	g_text.cpp	/^int GViewPeer::ExpandHeight(int DeltaY) {$/;"	f	class:GViewPeer
ExpandPath	s_files.cpp	/^int ExpandPath(const char *Path, char *Expand) {$/;"	f
ExposeRow	e_fold.cpp	/^int EBuffer::ExposeRow(int Row) { \/*FOLD00*\/$/;"	f	class:EBuffer
ExposeWindow	g_motif.cpp	/^void ExposeWindow(Widget w, GViewPeer *Peer, XmDrawingAreaCallbackStruct *Call) {$/;"	f
ExtendGrab	e_buffer.h	/^    int ExtendGrab;$/;"	m	class:EBuffer
F22_DEAD_KEYS	con_ikcz.h	320;"	d
F22_DEAD_KEYS	con_ikcz.h	328;"	d
FAKE_BEGINTHREAD_NULL	sysdep.h	140;"	d
FAKE_BEGINTHREAD_NULL	sysdep.h	142;"	d
FALSE	port.h	25;"	d
FCount	e_buffer.h	/^    int FCount;$/;"	m	class:EBuffer
FCount	o_directory.h	/^    int FCount;$/;"	m	class:EDirectory
FD_SET_CAST	con_x11.cpp	58;"	d	file:
FD_SET_CAST	con_x11.cpp	60;"	d	file:
FF	e_buffer.h	/^    EFold *FF;$/;"	m	class:EBuffer
FID_MTOOLBAR	g_pm.cpp	70;"	d	file:
FIND_CASE	h_c.cpp	447;"	d	file:
FIND_CLASS	h_c.cpp	446;"	d	file:
FIND_COLON	h_c.cpp	440;"	d	file:
FIND_COMMA	h_c.cpp	439;"	d	file:
FIND_ELSE	h_c.cpp	441;"	d	file:
FIND_ENDBLOCK	h_c.cpp	444;"	d	file:
FIND_FOR	h_c.cpp	442;"	d	file:
FIND_IF	h_c.cpp	437;"	d	file:
FIND_QUESTION	h_c.cpp	449;"	d	file:
FIND_SEMICOLON	h_c.cpp	438;"	d	file:
FIND_SWITCH	h_c.cpp	448;"	d	file:
FIND_WHILE	h_c.cpp	443;"	d	file:
FLAG_C_BraceOfs	c_mode.h	144;"	d
FLAG_C_CaseDelta	c_mode.h	161;"	d
FLAG_C_CaseOfs	c_mode.h	157;"	d
FLAG_C_ClassDelta	c_mode.h	163;"	d
FLAG_C_ClassOfs	c_mode.h	162;"	d
FLAG_C_ColonOfs	c_mode.h	164;"	d
FLAG_C_CommentDelta	c_mode.h	166;"	d
FLAG_C_CommentOfs	c_mode.h	165;"	d
FLAG_C_Continuation	c_mode.h	189;"	d
FLAG_C_FirstLevelIndent	c_mode.h	187;"	d
FLAG_C_FirstLevelWidth	c_mode.h	188;"	d
FLAG_C_Indent	c_mode.h	143;"	d
FLAG_C_ParenDelta	c_mode.h	190;"	d
FLAG_CompileCommand	c_mode.h	169;"	d
FLAG_CompletionFilter	c_mode.h	159;"	d
FLAG_CursorInsertEnd	c_mode.h	149;"	d
FLAG_CursorInsertStart	c_mode.h	148;"	d
FLAG_CursorOverEnd	c_mode.h	151;"	d
FLAG_CursorOverStart	c_mode.h	150;"	d
FLAG_DOWN_CASE	e_regex.cpp	816;"	d	file:
FLAG_DOWN_NEXT	e_regex.cpp	818;"	d	file:
FLAG_DefaultModeName	c_mode.h	158;"	d
FLAG_FunctionUsesContinuation	c_mode.h	191;"	d
FLAG_GUIDialogs	c_mode.h	181;"	d
FLAG_HelpCommand	c_mode.h	186;"	d
FLAG_KeepHistory	c_mode.h	171;"	d
FLAG_KeepMessages	c_mode.h	175;"	d
FLAG_LoadDesktopMode	c_mode.h	185;"	d
FLAG_LoadDesktopOnEntry	c_mode.h	172;"	d
FLAG_OpenAfterClose	c_mode.h	167;"	d
FLAG_PMDisableAccel	c_mode.h	182;"	d
FLAG_PrintDevice	c_mode.h	168;"	d
FLAG_REXX_Do_Offset	c_mode.h	170;"	d
FLAG_REXX_Indent	c_mode.h	145;"	d
FLAG_SaveDesktopOnExit	c_mode.h	173;"	d
FLAG_ScreenSizeX	c_mode.h	146;"	d
FLAG_ScreenSizeY	c_mode.h	147;"	d
FLAG_ScrollBarWidth	c_mode.h	155;"	d
FLAG_ScrollBorderX	c_mode.h	176;"	d
FLAG_ScrollBorderY	c_mode.h	177;"	d
FLAG_ScrollJumpX	c_mode.h	178;"	d
FLAG_ScrollJumpY	c_mode.h	179;"	d
FLAG_SelectPathname	c_mode.h	156;"	d
FLAG_SevenBit	c_mode.h	183;"	d
FLAG_ShowHScroll	c_mode.h	153;"	d
FLAG_ShowMenuBar	c_mode.h	160;"	d
FLAG_ShowToolBar	c_mode.h	180;"	d
FLAG_ShowVScroll	c_mode.h	154;"	d
FLAG_SysClipboard	c_mode.h	152;"	d
FLAG_UP_CASE	e_regex.cpp	815;"	d	file:
FLAG_UP_NEXT	e_regex.cpp	817;"	d	file:
FLAG_WeirdScroll	c_mode.h	184;"	d
FLAG_WindowFont	c_mode.h	174;"	d
FNM_CASEFOLD	fnmatch.h	61;"	d
FNM_FILE_NAME	fnmatch.h	59;"	d
FNM_LEADING_DIR	fnmatch.h	60;"	d
FNM_NOESCAPE	fnmatch.h	50;"	d
FNM_NOESCAPE	fnmatch.h	55;"	d
FNM_NOMATCH	fnmatch.h	65;"	d
FNM_NOSYS	fnmatch.h	72;"	d
FNM_PATHNAME	fnmatch.h	49;"	d
FNM_PATHNAME	fnmatch.h	54;"	d
FNM_PERIOD	fnmatch.h	51;"	d
FNM_PERIOD	fnmatch.h	56;"	d
FPHistory	c_history.cpp	/^static FPosHistory **FPHistory = 0;$/;"	v	file:
FPHistoryCount	c_history.cpp	/^static int FPHistoryCount = 0;$/;"	v	file:
FPosHistory	c_history.h	/^} FPosHistory;$/;"	t
FTESL_KBDCTRL	compkeys.cpp	19;"	d	file:
FTESL_KEY	con_slang.cpp	134;"	d	file:
FTESL_KEY_ALT	con_slang.cpp	137;"	d	file:
FTESL_KEY_BACKSP	con_slang.cpp	143;"	d	file:
FTESL_KEY_CTRL	con_slang.cpp	136;"	d	file:
FTESL_KEY_CTRLAND	con_slang.cpp	145;"	d	file:
FTESL_KEY_ENTER	con_slang.cpp	140;"	d	file:
FTESL_KEY_ESC	con_slang.cpp	142;"	d	file:
FTESL_KEY_GRAY	con_slang.cpp	138;"	d	file:
FTESL_KEY_SHIFT	con_slang.cpp	135;"	d	file:
FTESL_KEY_TAB	con_slang.cpp	141;"	d	file:
Fail	cfte.cpp	/^void Fail(CurPos &cp, const char *s, ...) {$/;"	f
False	con_nt.cpp	48;"	d	file:
FileBuffer	e_loadsave.cpp	/^char FileBuffer[RWBUFSIZE];$/;"	v
FileClose	egui.cpp	/^int EGUI::FileClose(EView *View, ExState &State) {$/;"	f	class:EGUI
FileCloseAll	egui.cpp	/^int EGUI::FileCloseAll(EView *View, ExState &State) {$/;"	f	class:EGUI
FileCloseX	egui.cpp	/^int EGUI::FileCloseX(EView *View, int CreateNew, int XClose) {$/;"	f	class:EGUI
FileDlgProc	g_pm.cpp	/^MRESULT EXPENTRY FileDlgProc(HWND hwnd, ULONG msg, MPARAM mp1, MPARAM mp2) {$/;"	f
FileExists	s_files.cpp	/^int FileExists(const char *Path) {$/;"	f
FileFind	s_direct.cpp	/^FileFind::FileFind(const char *aDirectory, const char *aPattern, int aFlags) {$/;"	f	class:FileFind
FileFind	s_direct.h	/^class FileFind {$/;"	c
FileInfo	s_direct.cpp	/^FileInfo::FileInfo(char *Name, int Type, off_t Size, time_t MTime) {$/;"	f	class:FileInfo
FileInfo	s_direct.h	/^class FileInfo {$/;"	c
FileLast	view.cpp	/^int EView::FileLast() {$/;"	f	class:EView
FileLoad	e_file.cpp	/^int FileLoad(int createFlags, const char *FileName, const char *Mode, EView *View) {$/;"	f
FileName	c_history.h	/^    char *FileName;$/;"	m	struct:
FileName	e_buffer.h	/^    char *FileName;$/;"	m	class:EBuffer
FileName	e_mark.h	/^    char *FileName;$/;"	m	class:EMark
FileName	e_tags.cpp	/^    char *FileName;$/;"	m	struct:TagStack	file:
FileName	e_tags.cpp	/^    int FileName;$/;"	m	struct:TagData	file:
FileNameCmp	o_directory.cpp	/^int _LNK_CONV FileNameCmp(const void *a, const void *b) {$/;"	f
FileNext	view.cpp	/^int EView::FileNext() {$/;"	f	class:EView
FileOk	e_buffer.h	/^    int FileOk;$/;"	m	class:EBuffer
FileOpen	view.cpp	/^int EView::FileOpen(ExState &State) {$/;"	f	class:EView
FileOpenInMode	view.cpp	/^int EView::FileOpenInMode(ExState &State) {$/;"	f	class:EView
FilePrev	view.cpp	/^int EView::FilePrev() {$/;"	f	class:EView
FilePrint	e_print.cpp	/^int EBuffer::FilePrint() {$/;"	f	class:EBuffer
FileReload	o_buffer.cpp	/^int EBuffer::FileReload(ExState &\/*State*\/) {$/;"	f	class:EBuffer
FileSaveAll	view.cpp	/^int EView::FileSaveAll() {$/;"	f	class:EView
FileSaveAs	o_buffer.cpp	/^int EBuffer::FileSaveAs(ExState &State) {$/;"	f	class:EBuffer
FileSaveAs	o_buffer.cpp	/^int EBuffer::FileSaveAs(char *FName) {$/;"	f	class:EBuffer
FileStatus	e_buffer.h	/^    struct stat FileStatus;$/;"	m	class:EBuffer
FileTrim	e_cmds.cpp	/^int EBuffer::FileTrim() {$/;"	f	class:EBuffer
FileWriteTo	o_buffer.cpp	/^int EBuffer::FileWriteTo(ExState &State) {$/;"	f	class:EBuffer
FileWriteTo	o_buffer.cpp	/^int EBuffer::FileWriteTo(char *FName) {$/;"	f	class:EBuffer
Files	o_directory.h	/^    FileInfo **Files;$/;"	m	class:EDirectory
FillChar	log.h	/^inline ostream_func2_char_size_t FillChar(char const& c, size_t const& num)$/;"	f
FinalExit	g_qt.cpp	/^static int FinalExit = 0;$/;"	v	file:
Find	e_search.cpp	/^int EBuffer::Find(SearchReplaceOptions &opt) {$/;"	f	class:EBuffer
Find	o_buffer.cpp	/^int EBuffer::Find(ExState &State) {$/;"	f	class:EBuffer
FindAbbrev	c_bind.cpp	/^EAbbrev *EMode::FindAbbrev(const char *string) {$/;"	f	class:EMode
FindActiveMap	c_bind.cpp	/^EEventMap *FindActiveMap(EMode *Mode) {$/;"	f
FindChoiceByPoint	i_choice.cpp	/^int ExChoice::FindChoiceByPoint(int x, int y) {$/;"	f	class:ExChoice
FindColorizer	c_hilit.cpp	/^EColorize *FindColorizer(const char *AName) {$/;"	f
FindDlgProc	g_pm.cpp	/^MRESULT EXPENTRY FindDlgProc(HWND hwnd, ULONG msg, MPARAM mp1, MPARAM mp2) {$/;"	f
FindErrorFile	o_messages.cpp	/^void EMessages::FindErrorFile(int err) {$/;"	f	class:EMessages
FindErrorFiles	o_messages.cpp	/^void EMessages::FindErrorFiles() {$/;"	f	class:EMessages
FindEventMap	c_bind.cpp	/^EEventMap *FindEventMap(const char *Name) {$/;"	f
FindFile	e_file.cpp	/^EBuffer *FindFile(char *FileName) {$/;"	f
FindFileErrors	o_messages.cpp	/^void EMessages::FindFileErrors(EBuffer *B) {$/;"	f	class:EMessages
FindFirst	s_direct.cpp	/^int FileFind::FindFirst(FileInfo **fi) {$/;"	f	class:FileFind
FindFold	e_fold.cpp	/^int EBuffer::FindFold(int Line) { \/\/ optimize \/*FOLD00*\/$/;"	f	class:EBuffer
FindFunction	e_block.cpp	/^int EBuffer::FindFunction(int delta, int way) {$/;"	f	class:EBuffer
FindKey	c_bind.cpp	/^EKey *EKeyMap::FindKey(TKeyCode aKey) {$/;"	f	class:EKeyMap
FindMode	c_bind.cpp	/^EMode *FindMode(const char *Name) {$/;"	f
FindModelID	o_model.cpp	/^EModel *FindModelID(EModel *Model, int ID) {$/;"	f
FindNearFold	e_fold.cpp	/^int EBuffer::FindNearFold(int Line) { \/*FOLD00*\/$/;"	f	class:EBuffer
FindNext	s_direct.cpp	/^int FileFind::FindNext(FileInfo **fi) {$/;"	f	class:FileFind
FindPrevIndent	h_c.cpp	/^static int FindPrevIndent(EBuffer *B, int &RowP, int &ColP, char &CharP, int Flags) {$/;"	f	file:
FindRepeat	o_buffer.cpp	/^int EBuffer::FindRepeat(ExState &State) {$/;"	f	class:EBuffer
FindRepeatOnce	o_buffer.cpp	/^int EBuffer::FindRepeatOnce(ExState &State) {$/;"	f	class:EBuffer
FindRepeatReverse	o_buffer.cpp	/^int EBuffer::FindRepeatReverse(ExState &State) {$/;"	f	class:EBuffer
FindReplace	o_buffer.cpp	/^int EBuffer::FindReplace(ExState &State) {$/;"	f	class:EBuffer
FindRx	e_search.cpp	/^int EBuffer::FindRx(RxNode *Rx, int Options) {$/;"	f	class:EBuffer
FindStr	e_search.cpp	/^int EBuffer::FindStr(char *Data, int Len, int Options) {$/;"	f	class:EBuffer
FindTag	o_buffer.cpp	/^int EBuffer::FindTag(ExState &State) {$/;"	f	class:EBuffer
FindTagWord	e_search.cpp	/^int EBuffer::FindTagWord(ExState &State) {$/;"	f	class:EBuffer
FixPos	o_list.cpp	/^void EList::FixPos() {$/;"	f	class:EList
FixedUpdate	i_complete.cpp	/^void ExComplete::FixedUpdate(int add)$/;"	f	class:ExComplete
Flags	c_bind.h	/^    EBufferFlags Flags;$/;"	m	class:EMode
Flags	e_buffer.h	/^    EBufferFlags Flags;$/;"	m	class:EBuffer
Flags	g_pm.cpp	/^    int Flags;$/;"	m	struct:	file:
Flags	s_direct.h	/^    int Flags;$/;"	m	class:FileFind
FmChDir	o_directory.cpp	/^int EDirectory::FmChDir(const char *Name) {$/;"	f	class:EDirectory
FmLoad	o_directory.cpp	/^int EDirectory::FmLoad(char *Name, EView *XView) {$/;"	f	class:EDirectory
FmRmDir	o_directory.cpp	/^int EDirectory::FmRmDir(char const* Name)$/;"	f	class:EDirectory
FocusCapture	g_motif.cpp	/^static GView *FocusCapture = 0;$/;"	v	file:
FocusCapture	g_pm.cpp	/^GView *FocusCapture = 0;$/;"	v
FocusCapture	g_qt.cpp	/^static GView *FocusCapture = 0;$/;"	v	file:
FocusCapture	g_text.cpp	/^GView *FocusCapture = 0;$/;"	v
FocusChange	view.cpp	/^void EView::FocusChange(int GetFocus) {$/;"	f	class:EView
FoldClose	e_fold.cpp	/^int EBuffer::FoldClose(int Line) { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldCloseAll	e_fold.cpp	/^int EBuffer::FoldCloseAll() { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldCreate	e_fold.cpp	/^int EBuffer::FoldCreate(int Line) { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldCreateAtRoutines	e_fold.cpp	/^int EBuffer::FoldCreateAtRoutines() { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldCreateByRegexp	e_fold.cpp	/^int EBuffer::FoldCreateByRegexp(char *Regexp) { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldCreateByRegexp	o_buffer.cpp	/^int EBuffer::FoldCreateByRegexp(ExState &State) {$/;"	f	class:EBuffer
FoldDemote	e_fold.cpp	/^int EBuffer::FoldDemote(int Line) { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldDestroy	e_fold.cpp	/^int EBuffer::FoldDestroy(int Line) { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldDestroyAll	e_fold.cpp	/^int EBuffer::FoldDestroyAll() { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldOpen	e_fold.cpp	/^int EBuffer::FoldOpen(int Line) { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldOpenAll	e_fold.cpp	/^int EBuffer::FoldOpenAll() { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldOpenNested	e_fold.cpp	/^int EBuffer::FoldOpenNested() { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldPromote	e_fold.cpp	/^int EBuffer::FoldPromote(int Line) { \/*FOLD00*\/$/;"	f	class:EBuffer
FoldToggleOpenClose	e_fold.cpp	/^int EBuffer::FoldToggleOpenClose() { \/*FOLD00*\/$/;"	f	class:EBuffer
FontCX	con_x11.cpp	/^static int FontCX, FontCY;$/;"	v	file:
FontCY	con_x11.cpp	/^static int FontCX, FontCY;$/;"	v	file:
FontCYD	con_x11.cpp	/^static int FontCYD;$/;"	v	file:
FormatLine	o_buflist.cpp	/^char* BufferView::FormatLine(int Line) {$/;"	f	class:BufferView
FormatLine	o_directory.cpp	/^char *EDirectory::FormatLine(int Line) { return 0; };$/;"	f	class:EDirectory
FormatLine	o_list.cpp	/^char *EList::FormatLine(int \/*Line*\/) {$/;"	f	class:EList
FormatLine	o_messages.cpp	/^char* EMessages::FormatLine(int Line) {$/;"	f	class:EMessages
FormatLine	o_modemap.cpp	/^char *EventMapView::FormatLine(int Line) {$/;"	f	class:EventMapView
FormatLine	o_routine.cpp	/^char* RoutineView::FormatLine(int Line) {$/;"	f	class:RoutineView
Frame	g_motif.cpp	/^    GFrame *Frame;$/;"	m	class:GFramePeer	file:
Frame	g_pm.cpp	/^    GFrame *Frame;$/;"	m	class:GFramePeer	file:
Frame	g_qt.cpp	/^    GFrame *Frame;$/;"	m	class:GFramePeer	file:
Frame	g_text.cpp	/^    GFrame *Frame;$/;"	m	class:GFramePeer	file:
FrameClose	egui.cpp	/^int EGUI::FrameClose(GxView *View) {$/;"	f	class:EGUI
FrameNew	egui.cpp	/^int EGUI::FrameNew() {$/;"	f	class:EGUI
FrameNext	egui.cpp	/^int EGUI::FrameNext(GxView *View) {$/;"	f	class:EGUI
FramePrev	egui.cpp	/^int EGUI::FramePrev(GxView *View) {$/;"	f	class:EGUI
FrameWndProc	g_pm.cpp	/^MRESULT EXPENTRY FrameWndProc(HWND hwnd, ULONG msg, MPARAM mp1, MPARAM mp2) {$/;"	f
FreeCRegexp	o_messages.cpp	/^void FreeCRegexp()$/;"	f
FreeErrors	o_messages.cpp	/^void EMessages::FreeErrors() {$/;"	f	class:EMessages
FreeList	o_directory.cpp	/^void EDirectory::FreeList() {$/;"	f	class:EDirectory
FreeList	o_list.cpp	/^void EList::FreeList() {}$/;"	f	class:EList
FreeUndo	e_buffer.cpp	/^int EBuffer::FreeUndo() {$/;"	f	class:EBuffer
FreeView	o_modemap.cpp	/^void EventMapView::FreeView() {$/;"	f	class:EventMapView
FullRedraw	e_redraw.cpp	/^void EBuffer::FullRedraw() { \/\/ redraw all views$/;"	f	class:EBuffer
FunctionLog	log.cpp	/^FunctionLog::FunctionLog(GlobalLog& gl, const char* funcName, unsigned long line)$/;"	f	class:FunctionLog
FunctionLog	log.h	/^class FunctionLog$/;"	c
FunctionUsesContinuation	h_c.cpp	/^int FunctionUsesContinuation = 0;$/;"	v
GCs	con_x11.cpp	/^static GC GCs[256];$/;"	v	file:
GCs	g_qt.cpp	/^    GC GCs[256];$/;"	m	class:GViewPeer	file:
GET_BRACE	h_perl.cpp	42;"	d	file:
GF_OPEN	gui.h	164;"	d
GF_SAVEAS	gui.h	165;"	d
GFrame	g_motif.cpp	/^GFrame::GFrame(int XSize, int YSize) {$/;"	f	class:GFrame
GFrame	g_pm.cpp	/^GFrame::GFrame(int XSize, int YSize) {$/;"	f	class:GFrame
GFrame	g_qt.cpp	/^GFrame::GFrame(int XSize, int YSize) {$/;"	f	class:GFrame
GFrame	g_text.cpp	/^GFrame::GFrame(int XSize, int YSize) {$/;"	f	class:GFrame
GFrame	gui.h	/^class GFrame {$/;"	c
GFramePeer	g_motif.cpp	/^GFramePeer::GFramePeer(GFrame *frame, int Width, int Height) {$/;"	f	class:GFramePeer
GFramePeer	g_motif.cpp	/^class GFramePeer {$/;"	c	file:
GFramePeer	g_pm.cpp	/^GFramePeer::GFramePeer(GFrame *aFrame, int Width, int Height) {$/;"	f	class:GFramePeer
GFramePeer	g_pm.cpp	/^class GFramePeer {$/;"	c	file:
GFramePeer	g_qt.cpp	/^GFramePeer::GFramePeer(GFrame *aFrame, int Width, int Height) {$/;"	f	class:GFramePeer
GFramePeer	g_qt.cpp	/^class GFramePeer {$/;"	c	file:
GFramePeer	g_text.cpp	/^GFramePeer::GFramePeer(GFrame *aFrame, int Width, int Height) {$/;"	f	class:GFramePeer
GFramePeer	g_text.cpp	/^class GFramePeer {$/;"	c	file:
GPC_CONFIRM	gui.h	171;"	d
GPC_ERROR	gui.h	173;"	d
GPC_FATAL	gui.h	174;"	d
GPC_NOTE	gui.h	170;"	d
GPC_WARNING	gui.h	172;"	d
GPipe	con_dosx.cpp	/^} GPipe;$/;"	t	file:
GPipe	con_linux.cpp	/^} GPipe;$/;"	t	file:
GPipe	con_nt.cpp	/^} GPipe;$/;"	t	file:
GPipe	con_os2.cpp	/^} GPipe;$/;"	t	file:
GPipe	con_slang.cpp	/^} GPipe;$/;"	t	file:
GPipe	con_x11.cpp	/^} GPipe;$/;"	t	file:
GPipe	g_motif.cpp	/^} GPipe;$/;"	t	file:
GPipe	g_pm.cpp	/^} GPipe;$/;"	t	file:
GPipe	g_qt.cpp	/^} GPipe;$/;"	t	file:
GUI	con_dosx.cpp	/^GUI::GUI(int &argc, char **argv, int XSize, int YSize) {$/;"	f	class:GUI
GUI	con_linux.cpp	/^GUI::GUI(int &argc, char **argv, int XSize, int YSize) {$/;"	f	class:GUI
GUI	con_nt.cpp	/^GUI::GUI(int &argc, char **argv, int XSize, int YSize) { \/*FOLD00*\/$/;"	f	class:GUI
GUI	con_os2.cpp	/^GUI::GUI(int &argc, char **argv, int XSize, int YSize) {$/;"	f	class:GUI
GUI	con_slang.cpp	/^GUI::GUI(int &argc, char **argv, int XSize, int YSize)$/;"	f	class:GUI
GUI	con_x11.cpp	/^GUI::GUI(int &argc, char **argv, int XSize, int YSize) {$/;"	f	class:GUI
GUI	g_motif.cpp	/^GUI::GUI(int &argc, char **argv, int XSize, int YSize) {$/;"	f	class:GUI
GUI	g_pm.cpp	/^GUI::GUI(int &argc, char **argv, int XSize, int YSize) {$/;"	f	class:GUI
GUI	g_qt.cpp	/^GUI::GUI(int &argc, char **argv, int XSize, int YSize) {$/;"	f	class:GUI
GUI	gui.h	/^class GUI {$/;"	c
GUIDLG_CHOICE	gui.h	153;"	d
GUIDLG_FILE	gui.h	156;"	d
GUIDLG_FIND	gui.h	157;"	d
GUIDLG_FINDREPLACE	gui.h	158;"	d
GUIDLG_PROMPT	gui.h	154;"	d
GUIDLG_PROMPT2	gui.h	155;"	d
GUIDialogs	c_config.cpp	/^int GUIDialogs = 1;$/;"	v
GView	g_motif.cpp	/^GView::GView(GFrame *parent, int XSize, int YSize) {$/;"	f	class:GView
GView	g_pm.cpp	/^GView::GView(GFrame *parent, int XSize, int YSize) {$/;"	f	class:GView
GView	g_qt.cpp	/^GView::GView(GFrame *parent, int XSize, int YSize) {$/;"	f	class:GView
GView	g_text.cpp	/^GView::GView(GFrame *parent, int XSize, int YSize) {$/;"	f	class:GView
GView	gui.h	/^class GView {$/;"	c
GViewPeer	g_motif.cpp	/^GViewPeer::GViewPeer(GView *view, int XSize, int YSize) {$/;"	f	class:GViewPeer
GViewPeer	g_motif.cpp	/^class GViewPeer {$/;"	c	file:
GViewPeer	g_pm.cpp	/^GViewPeer::GViewPeer(GView *view, int XSize, int YSize) {$/;"	f	class:GViewPeer
GViewPeer	g_pm.cpp	/^class GViewPeer {$/;"	c	file:
GViewPeer	g_qt.cpp	/^GViewPeer::GViewPeer(GView *view, int XSize, int YSize) {$/;"	f	class:GViewPeer
GViewPeer	g_qt.cpp	/^class GViewPeer {$/;"	c	file:
GViewPeer	g_text.cpp	/^GViewPeer::GViewPeer(GView *view, int XSize, int YSize) {$/;"	f	class:GViewPeer
GViewPeer	g_text.cpp	/^class GViewPeer {$/;"	c	file:
GapLine	e_buffer.h	50;"	d
GetBookmark	e_search.cpp	/^int EBuffer::GetBookmark(char *Name, EPoint &P) {$/;"	f	class:EBuffer
GetBufferById	o_buflist.cpp	/^EModel *BufferView::GetBufferById(int No) {$/;"	f	class:BufferView
GetChar	i_view.cpp	/^TKeyCode GxView::GetChar(const char *Prompt) {$/;"	f	class:GxView
GetCharFromEvent	s_util.cpp	/^int GetCharFromEvent(TEvent &E, char *Ch) {$/;"	f
GetCharStr	c_config.cpp	/^const char *GetCharStr(CurPos &cp, unsigned short len) {$/;"	f
GetClipText	clip_pm.cpp	/^int GetClipText(ClipData *cd) {$/;"	f
GetClipText	clip_pmv.cpp	/^int GetClipText(ClipData *cd) {$/;"	f
GetClipText	clip_vio.cpp	/^int GetClipText(ClipData *cd) {$/;"	f
GetClipText	con_nt.cpp	/^int GetClipText(ClipData *cd) {$/;"	f
GetColor	cfte.cpp	/^char *GetColor(CurPos &cp, char *name) {$/;"	f
GetCommandName	c_bind.cpp	/^const char *GetCommandName(int Command) {$/;"	f
GetConfigFileName	fte.cpp	/^static int GetConfigFileName(int argc, char **argv, char *ConfigFileName) {$/;"	f	file:
GetConfigFileName	fte2.cpp	/^static int GetConfigFileName(int argc, char **argv, char *ConfigFileName) {$/;"	f	file:
GetContext	i_modelview.cpp	/^int ExModelView::GetContext() {$/;"	f	class:ExModelView
GetContext	i_oview.h	/^    virtual int GetContext() { return CONTEXT_NONE; }$/;"	f	class:ExView
GetContext	i_view.cpp	/^int GxView::GetContext() {$/;"	f	class:GxView
GetContext	o_buffer.cpp	/^int EBuffer::GetContext() {$/;"	f	class:EBuffer
GetContext	o_buflist.cpp	/^int BufferView::GetContext() {$/;"	f	class:BufferView
GetContext	o_directory.cpp	/^int EDirectory::GetContext() { return CONTEXT_DIRECTORY; }$/;"	f	class:EDirectory
GetContext	o_list.cpp	/^int EList::GetContext() { return CONTEXT_LIST; };$/;"	f	class:EList
GetContext	o_messages.h	/^    virtual int GetContext() { return CONTEXT_MESSAGES; }$/;"	f	class:EMessages
GetContext	o_model.cpp	/^int EModel::GetContext() { return CONTEXT_NONE; }$/;"	f	class:EModel
GetContext	o_modemap.cpp	/^int EventMapView::GetContext() {$/;"	f	class:EventMapView
GetContext	o_routine.cpp	/^int RoutineView::GetContext() {$/;"	f	class:RoutineView
GetContext	view.cpp	/^int EView::GetContext() {$/;"	f	class:EView
GetDefaultDirectory	commands.cpp	/^int GetDefaultDirectory(EModel *M, char *Path, int MaxLen) {$/;"	f
GetDiskCurDir	s_files.cpp	/^static int GetDiskCurDir(int drive, char *dir) {$/;"	f	file:
GetErrors	o_messages.cpp	/^void EMessages::GetErrors() {$/;"	f	class:EMessages
GetEventMap	i_modelview.cpp	/^EEventMap *ExModelView::GetEventMap() {$/;"	f	class:ExModelView
GetEventMap	i_oview.cpp	/^EEventMap *ExView::GetEventMap() { return 0; }$/;"	f	class:ExView
GetEventMap	i_view.cpp	/^EEventMap *GxView::GetEventMap() {$/;"	f	class:GxView
GetEventMap	o_buffer.cpp	/^EEventMap *EBuffer::GetEventMap() {$/;"	f	class:EBuffer
GetEventMap	o_buflist.cpp	/^EEventMap *BufferView::GetEventMap() {$/;"	f	class:BufferView
GetEventMap	o_directory.cpp	/^EEventMap *EDirectory::GetEventMap() {$/;"	f	class:EDirectory
GetEventMap	o_list.cpp	/^EEventMap *EList::GetEventMap() {$/;"	f	class:EList
GetEventMap	o_messages.cpp	/^EEventMap *EMessages::GetEventMap() {$/;"	f	class:EMessages
GetEventMap	o_model.cpp	/^EEventMap *EModel::GetEventMap() { return 0; }$/;"	f	class:EModel
GetEventMap	o_modemap.cpp	/^EEventMap *EventMapView::GetEventMap() {$/;"	f	class:EventMapView
GetEventMap	o_routine.cpp	/^EEventMap *RoutineView::GetEventMap() {$/;"	f	class:RoutineView
GetEventMap	view.cpp	/^EEventMap *EView::GetEventMap() {$/;"	f	class:EView
GetFile	i_view.cpp	/^int GxView::GetFile(const char *Prompt, unsigned int BufLen, char *Str, int HistId, int Flags) {$/;"	f	class:GxView
GetHOfsItem	menu_text.cpp	/^int GetHOfsItem(int id, int cur) {$/;"	f
GetHPosItem	menu_text.cpp	/^int GetHPosItem(int id, int X) {$/;"	f
GetHilitMode	c_hilit.cpp	/^int GetHilitMode(const char *Str) {$/;"	f
GetHilitProc	c_hilit.cpp	/^SyntaxProc GetHilitProc(int id) {$/;"	f
GetHilitWord	c_hilit.cpp	/^int HState::GetHilitWord(int len, char *str, ChColor &clr) {$/;"	f	class:HState
GetHilitWord	e_redraw.cpp	/^int EBuffer::GetHilitWord(int len, char *str, ChColor &clr, int IgnCase) {$/;"	f	class:EBuffer
GetIndentMode	c_hilit.cpp	/^int GetIndentMode(const char *Str) {$/;"	f
GetInfo	o_buffer.cpp	/^void EBuffer::GetInfo(char *AInfo, int MaxLen) {$/;"	f	class:EBuffer
GetInfo	o_buflist.cpp	/^void BufferView::GetInfo(char *AInfo, int MaxLen) {$/;"	f	class:BufferView
GetInfo	o_directory.cpp	/^void EDirectory::GetInfo(char *AInfo, int MaxLen) {$/;"	f	class:EDirectory
GetInfo	o_messages.cpp	/^void EMessages::GetInfo(char *AInfo, int MaxLen) {$/;"	f	class:EMessages
GetInfo	o_model.cpp	/^void EModel::GetInfo(char *AInfo, int MaxLen) { *AInfo = 0; }$/;"	f	class:EModel
GetInfo	o_modemap.cpp	/^void EventMapView::GetInfo(char *AInfo, int MaxLen) {$/;"	f	class:EventMapView
GetInfo	o_routine.cpp	/^void RoutineView::GetInfo(char *AInfo, int MaxLen) {$/;"	f	class:RoutineView
GetInputHistory	c_history.cpp	/^int GetInputHistory(int Id, char *String, int len, int Nth) { \/*fold00*\/$/;"	f
GetIntParam	c_bind.cpp	/^int ExState::GetIntParam(EView *view, int *value) {$/;"	f	class:ExState
GetIntVar	o_buffer.cpp	/^int EBuffer::GetIntVar(int var, int *value) {$/;"	f	class:EBuffer
GetIntVar	o_model.cpp	/^int EModel::GetIntVar(int var, int *value) {$/;"	f	class:EModel
GetIntVar	view.cpp	/^int EView::GetIntVar(int var, int *value) {$/;"	f	class:EView
GetKeyEvent	con_linux.cpp	/^int GetKeyEvent(TEvent *Event) {$/;"	f
GetKeyName	c_bind.cpp	/^int GetKeyName(char *Key, KeySel &ks) {$/;"	f
GetLine	o_messages.cpp	/^int EMessages::GetLine(char *Line, int maxim) {$/;"	f	class:EMessages
GetMap	e_redraw.cpp	/^int EBuffer::GetMap(int Row, int *StateLen, hsState **StateMap) {$/;"	f	class:EBuffer
GetMatchBrace	e_search.cpp	/^int EBuffer::GetMatchBrace(EPoint &M, int MinLine, int MaxLine, int show) {$/;"	f	class:EBuffer
GetMenu	c_bind.cpp	/^char *EEventMap::GetMenu(int which) {$/;"	f	class:EEventMap
GetMenuId	g_menu.cpp	/^int GetMenuId(const char *Name) {$/;"	f
GetModeForName	c_mode.cpp	/^EMode *GetModeForName(const char *FileName) {$/;"	f
GetMouseEvent	con_linux.cpp	/^int GetMouseEvent(TEvent *Event) {$/;"	f
GetName	o_buffer.cpp	/^void EBuffer::GetName(char *AName, int MaxLen) {$/;"	f	class:EBuffer
GetName	o_directory.cpp	/^void EDirectory::GetName(char *AName, int MaxLen) {$/;"	f	class:EDirectory
GetName	o_messages.cpp	/^void EMessages::GetName(char *AName, int MaxLen) {$/;"	f	class:EMessages
GetName	o_model.cpp	/^void EModel::GetName(char *AName, int MaxLen) { *AName = 0; }$/;"	f	class:EModel
GetName	o_modemap.cpp	/^void EventMapView::GetName(char *AName, int MaxLen) {$/;"	f	class:EventMapView
GetName	o_routine.cpp	/^void RoutineView::GetName(char *AName, int MaxLen) {$/;"	f	class:RoutineView
GetNewModelID	o_model.cpp	/^int GetNewModelID(EModel *B) {$/;"	f
GetNum	c_config.cpp	/^int GetNum(CurPos &cp, long &num) {$/;"	f
GetNumber	cfte.cpp	/^int GetNumber(CurPos &cp) {$/;"	f
GetObj	c_config.cpp	/^unsigned char GetObj(CurPos &cp, unsigned short &len) {$/;"	f
GetOp	cfte.cpp	/^void GetOp(CurPos &cp, int what) {$/;"	f
GetPMClip	clip_gpm.cpp	/^int GetPMClip() {$/;"	f
GetPMClip	clip_no.cpp	/^int GetPMClip() {$/;"	f
GetPMClip	clip_os2.cpp	/^int GetPMClip() {$/;"	f
GetPMClip	clip_x11.cpp	/^int GetPMClip() {$/;"	f
GetPath	o_buffer.cpp	/^void EBuffer::GetPath(char *APath, int MaxLen) {$/;"	f	class:EBuffer
GetPath	o_directory.cpp	/^void EDirectory::GetPath(char *APath, int MaxLen) {$/;"	f	class:EDirectory
GetPath	o_messages.cpp	/^void EMessages::GetPath(char *APath, int MaxLen) {$/;"	f	class:EMessages
GetPath	o_model.cpp	/^void EModel::GetPath(char *APath, int MaxLen) { *APath = 0; }$/;"	f	class:EModel
GetPipeEvent	con_dosx.cpp	/^int GetPipeEvent(TEvent *Event) {$/;"	f
GetPipeEvent	con_nt.cpp	/^int GetPipeEvent(int i, TEvent *Event) {$/;"	f
GetPipeEvent	con_os2.cpp	/^int GetPipeEvent(TEvent *Event) {$/;"	f
GetPos	o_buffer.cpp	/^void EEditPort::GetPos() {$/;"	f	class:EEditPort
GetPos	o_list.cpp	/^void EListPort::GetPos() {$/;"	f	class:EListPort
GetPos	o_model.cpp	/^void EViewPort::GetPos() { }$/;"	f	class:EViewPort
GetStatusContext	i_oview.h	/^    virtual ExView *GetStatusContext() { return this; }$/;"	f	class:ExView
GetStatusContext	i_view.h	/^    virtual ExView* GetStatusContext() { if (Top) return Top->GetStatusContext(); else return 0; }$/;"	f	class:GxView
GetStr	i_view.cpp	/^int GxView::GetStr(const char *Prompt, unsigned int BufLen, char *Str, int HistId) {$/;"	f	class:GxView
GetStrParam	c_bind.cpp	/^int ExState::GetStrParam(EView *view, char *str, int maxlen) {$/;"	f	class:ExState
GetStrVar	o_buffer.cpp	/^int EBuffer::GetStrVar(int var, char *str, int buflen) {$/;"	f	class:EBuffer
GetStrVar	o_model.cpp	/^int EModel::GetStrVar(int var, char *str, int buflen) {$/;"	f	class:EModel
GetStrVar	view.cpp	/^int EView::GetStrVar(int var, char *str, int buflen) {$/;"	f	class:EView
GetString	cfte.cpp	/^char *GetString(CurPos &cp) {$/;"	f
GetTitle	o_buffer.cpp	/^void EBuffer::GetTitle(char *ATitle, int MaxLen, char *ASTitle, int SMaxLen) {$/;"	f	class:EBuffer
GetTitle	o_buflist.cpp	/^void BufferView::GetTitle(char *ATitle, int MaxLen, char *ASTitle, int SMaxLen) {$/;"	f	class:BufferView
GetTitle	o_directory.cpp	/^void EDirectory::GetTitle(char *ATitle, int MaxLen, char *ASTitle, int SMaxLen) {$/;"	f	class:EDirectory
GetTitle	o_messages.cpp	/^void EMessages::GetTitle(char *ATitle, int MaxLen, char *ASTitle, int SMaxLen) {$/;"	f	class:EMessages
GetTitle	o_model.cpp	/^void EModel::GetTitle(char *ATitle, int MaxLen, char *ASTitle, int SMaxLen) { *ATitle = 0; *ASTitle = 0; }$/;"	f	class:EModel
GetTitle	o_modemap.cpp	/^void EventMapView::GetTitle(char *ATitle, int MaxLen, char *ASTitle, int SMaxLen) {$/;"	f	class:EventMapView
GetTitle	o_routine.cpp	/^void RoutineView::GetTitle(char *ATitle, int MaxLen, char *ASTitle, int SMaxLen) {$/;"	f	class:RoutineView
GetTrans	e_trans.cpp	/^int EBuffer::GetTrans(ExState &State, TransTable tab) {$/;"	f	class:EBuffer
GetUData	e_undo.cpp	/^int EBuffer::GetUData(int No, int pos, void **data, int len) {$/;"	f	class:EBuffer
GetVPort	e_redraw.cpp	/^EEditPort *EBuffer::GetVPort() {$/;"	f	class:EBuffer
GetVPort	o_list.cpp	/^EListPort *EList::GetVPort() {$/;"	f	class:EList
GetVPosItem	menu_text.cpp	/^int GetVPosItem(int id, int w, int X, int Y) {$/;"	f
GetVSize	menu_text.cpp	/^int GetVSize(int id, int &X, int &Y) {$/;"	f
GetViewContext	i_ascii.h	/^    virtual ExView* GetViewContext() { return Next; }$/;"	f	class:ExASCII
GetViewContext	i_choice.h	/^    virtual ExView* GetViewContext() { return Next; }$/;"	f	class:ExChoice
GetViewContext	i_complete.h	/^    virtual ExView* GetViewContext() { return Next; }$/;"	f	class:ExComplete
GetViewContext	i_input.h	/^    virtual ExView *GetViewContext() { return Next; }$/;"	f	class:ExInput
GetViewContext	i_key.h	/^    virtual ExView* GetViewContext() { return Next; }$/;"	f	class:ExKey
GetViewContext	i_oview.h	/^    virtual ExView *GetViewContext() { return this; }$/;"	f	class:ExView
GetViewContext	i_search.h	/^    virtual ExView *GetViewContext() { return Next; }$/;"	f	class:ExISearch
GetViewContext	i_view.h	/^    virtual ExView* GetViewContext() { if (Top) return Top->GetViewContext(); else return 0; }$/;"	f	class:GxView
GetViewVPort	e_redraw.cpp	/^EEditPort *EBuffer::GetViewVPort(EView *V) {$/;"	f	class:EBuffer
GetViewVPort	o_list.cpp	/^EListPort *EList::GetViewVPort(EView *V) {$/;"	f	class:EList
GetWord	cfte.cpp	/^int GetWord(CurPos &cp, char *w) {$/;"	f
GetXSelection	con_x11.cpp	/^int GetXSelection(int *len, char **data) {$/;"	f
GetXSelection	g_motif.cpp	/^int GetXSelection(int *len, char **data) {$/;"	f
GetXSelection	g_qt.cpp	/^int GetXSelection(int *len, char **data) {$/;"	f
GlobalLog	log.h	/^    GlobalLog() : m_strLogFile(NULL), m_bOpened(false) {}$/;"	f	class:GlobalLog
GlobalLog	log.h	/^    GlobalLog(char const* strLogFile) : m_strLogFile(strdup(strLogFile)), m_bOpened(false) {}$/;"	f	class:GlobalLog
GlobalLog	log.h	/^class GlobalLog$/;"	c
GotoBookmark	e_search.cpp	/^int EBuffer::GotoBookmark(char *Name) {$/;"	f	class:EBuffer
GotoBookmark	o_buffer.cpp	/^int EBuffer::GotoBookmark(ExState &State) {$/;"	f	class:EBuffer
GotoFilePos	e_tags.cpp	/^static int GotoFilePos(EView *View, char *FileName, int Line, int Col) { \/*FOLD00*\/$/;"	f	file:
GotoGlobalBookmark	view.cpp	/^int EView::GotoGlobalBookmark(ExState &State) {$/;"	f	class:EView
GotoTag	e_tags.cpp	/^static int GotoTag(int M, EView *View) { \/*FOLD00*\/$/;"	f	file:
GpmFd	con_linux.cpp	/^int GpmFd = -1;$/;"	v
GxView	i_view.cpp	/^GxView::GxView(GFrame *Parent): GView(Parent, -1, -1) {$/;"	f	class:GxView
GxView	i_view.h	/^class GxView: public GView {$/;"	c
HILIT_ADA	c_mode.h	39;"	d
HILIT_C	c_mode.h	31;"	d
HILIT_CATBS	c_mode.h	45;"	d
HILIT_CLR	cfte.cpp	258;"	d	file:
HILIT_DIFF	c_mode.h	35;"	d
HILIT_FTE	c_mode.h	44;"	d
HILIT_HTML	c_mode.h	32;"	d
HILIT_IPF	c_mode.h	36;"	d
HILIT_MAKE	c_mode.h	33;"	d
HILIT_MERGE	c_mode.h	38;"	d
HILIT_MSG	c_mode.h	40;"	d
HILIT_P	c_hilit.h	/^typedef HILIT_P((*SyntaxProc));$/;"	t
HILIT_P	c_hilit.h	19;"	d
HILIT_PASCAL	c_mode.h	42;"	d
HILIT_PERL	c_mode.h	37;"	d
HILIT_PLAIN	c_mode.h	30;"	d
HILIT_REXX	c_mode.h	34;"	d
HILIT_SH	c_mode.h	41;"	d
HILIT_SIMPLE	c_mode.h	46;"	d
HILIT_TEX	c_mode.h	43;"	d
HILIT_VARS	c_hilit.h	120;"	d
HISTORY_NAME	c_history.h	16;"	d
HISTORY_NAME	c_history.h	18;"	d
HISTORY_VER	c_history.cpp	14;"	d	file:
HIST_BOOKMARK	c_history.h	57;"	d
HIST_COMPILE	c_history.h	55;"	d
HIST_DEFAULT	c_history.h	49;"	d
HIST_PATH	c_history.h	50;"	d
HIST_POSITION	c_history.h	52;"	d
HIST_REGEXP	c_history.h	58;"	d
HIST_SEARCH	c_history.h	51;"	d
HIST_SEARCHOPT	c_history.h	56;"	d
HIST_SETUP	c_history.h	53;"	d
HIST_SHELL	c_history.h	54;"	d
HIST_TAGFILES	c_history.h	60;"	d
HIST_TRANS	c_history.h	59;"	d
HMachine	c_hilit.cpp	/^HMachine::HMachine() {$/;"	f	class:HMachine
HMachine	c_hilit.h	/^class HMachine {$/;"	c
HState	c_hilit.h	/^struct HState {$/;"	s
HTrans	c_hilit.h	/^struct HTrans {$/;"	s
HandleEvent	g_motif.cpp	/^void GView::HandleEvent(TEvent &Event) {$/;"	f	class:GView
HandleEvent	g_pm.cpp	/^void GView::HandleEvent(TEvent &Event) {$/;"	f	class:GView
HandleEvent	g_qt.cpp	/^void GView::HandleEvent(TEvent &Event) {$/;"	f	class:GView
HandleEvent	g_text.cpp	/^void GView::HandleEvent(TEvent &\/*Event*\/) {$/;"	f	class:GView
HandleEvent	i_ascii.cpp	/^void ExASCII::HandleEvent(TEvent &Event) {$/;"	f	class:ExASCII
HandleEvent	i_choice.cpp	/^void ExChoice::HandleEvent(TEvent &Event) {$/;"	f	class:ExChoice
HandleEvent	i_complete.cpp	/^void ExComplete::HandleEvent(TEvent &Event)$/;"	f	class:ExComplete
HandleEvent	i_input.cpp	/^void ExInput::HandleEvent(TEvent &Event) {$/;"	f	class:ExInput
HandleEvent	i_key.cpp	/^void ExKey::HandleEvent(TEvent &Event) {$/;"	f	class:ExKey
HandleEvent	i_modelview.cpp	/^void ExModelView::HandleEvent(TEvent &Event) {$/;"	f	class:ExModelView
HandleEvent	i_oview.cpp	/^void ExView::HandleEvent(TEvent &Event) {$/;"	f	class:ExView
HandleEvent	i_search.cpp	/^void ExISearch::HandleEvent(TEvent &Event) {$/;"	f	class:ExISearch
HandleEvent	i_view.cpp	/^void GxView::HandleEvent(TEvent &Event) {$/;"	f	class:GxView
HandleEvent	o_buffer.cpp	/^void EBuffer::HandleEvent(TEvent &Event) {$/;"	f	class:EBuffer
HandleEvent	o_buffer.cpp	/^void EEditPort::HandleEvent(TEvent &Event) {$/;"	f	class:EEditPort
HandleEvent	o_directory.cpp	/^void EDirectory::HandleEvent(TEvent &Event) {$/;"	f	class:EDirectory
HandleEvent	o_list.cpp	/^void EList::HandleEvent(TEvent &\/*Event*\/) {$/;"	f	class:EList
HandleEvent	o_list.cpp	/^void EListPort::HandleEvent(TEvent &Event) {$/;"	f	class:EListPort
HandleEvent	o_model.cpp	/^void EModel::HandleEvent(TEvent &Event) {$/;"	f	class:EModel
HandleEvent	o_model.cpp	/^void EViewPort::HandleEvent(TEvent &Event) { }$/;"	f	class:EViewPort
HandleEvent	view.cpp	/^void EView::HandleEvent(TEvent &Event) {$/;"	f	class:EView
HandleHScroll	g_text.cpp	/^void HandleHScroll(GView *view, TEvent &E) {$/;"	f
HandleMouse	o_buffer.cpp	/^void EEditPort::HandleMouse(TEvent &Event) {$/;"	f	class:EEditPort
HandleMouse	o_list.cpp	/^void EListPort::HandleMouse(TEvent &Event) {$/;"	f	class:EListPort
HandleVScroll	g_text.cpp	/^void HandleVScroll(GView *view, TEvent &E) {$/;"	f
HashStr	c_bind.cpp	/^int HashStr(const char *p, int maxim) {$/;"	f
HaveGUIDialogs	g_motif.cpp	/^unsigned long HaveGUIDialogs = 0;$/;"	v
HaveGUIDialogs	g_pm.cpp	/^unsigned long HaveGUIDialogs =$/;"	v
HaveGUIDialogs	g_qt_dlg.cpp	/^unsigned long HaveGUIDialogs = GUIDLG_FILE | GUIDLG_CHOICE;$/;"	v
HaveGUIDialogs	g_text.cpp	/^unsigned long HaveGUIDialogs = 0; \/\/ no gui dialogs in text gui$/;"	v
HelpCommand	c_config.cpp	/^char HelpCommand[128] = "man -a";$/;"	v
HideRow	e_fold.cpp	/^int EBuffer::HideRow(int Row) { \/*FOLD00*\/$/;"	f	class:EBuffer
Hilit	e_redraw.cpp	/^void EBuffer::Hilit(int FromRow) {$/;"	f	class:EBuffer
HilitAddWord	c_hilit.cpp	/^int EBuffer::HilitAddWord(const char *Word) {$/;"	f	class:EBuffer
HilitFindWord	c_hilit.cpp	/^int EBuffer::HilitFindWord(const char *Word) {$/;"	f	class:EBuffer
HilitMatchBracket	e_search.cpp	/^int EBuffer::HilitMatchBracket() {$/;"	f	class:EBuffer
HilitModes	c_hilit.cpp	/^} HilitModes[] = {$/;"	v	file:
HilitProc	e_buffer.h	/^    SyntaxProc HilitProc;$/;"	m	class:EBuffer
HilitRemoveWord	c_hilit.cpp	/^int EBuffer::HilitRemoveWord(const char *Word) {$/;"	f	class:EBuffer
HilitWord	c_hilit.cpp	/^int EBuffer::HilitWord() {$/;"	f	class:EBuffer
Hilit_ADA	c_hilit.h	/^HILIT_P(Hilit_ADA);$/;"	v
Hilit_ADA	h_ada.cpp	/^int Hilit_ADA(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_C	c_hilit.h	/^HILIT_P(Hilit_C);$/;"	v
Hilit_C	h_c.cpp	/^int Hilit_C(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_CATBS	c_hilit.h	/^HILIT_P(Hilit_CATBS);$/;"	v
Hilit_CATBS	h_catbs.cpp	/^int Hilit_CATBS(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_DIFF	c_hilit.h	/^HILIT_P(Hilit_DIFF);$/;"	v
Hilit_DIFF	h_diff.cpp	/^int Hilit_DIFF(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine* Line, hlState& State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_FTE	c_hilit.h	/^HILIT_P(Hilit_FTE);$/;"	v
Hilit_FTE	h_fte.cpp	/^int Hilit_FTE(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_HTML	c_hilit.h	/^HILIT_P(Hilit_HTML);$/;"	v
Hilit_HTML	h_html.cpp	/^int Hilit_HTML(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_IPF	c_hilit.h	/^HILIT_P(Hilit_IPF);$/;"	v
Hilit_IPF	h_ipf.cpp	/^int Hilit_IPF(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_MAKE	c_hilit.h	/^HILIT_P(Hilit_MAKE);$/;"	v
Hilit_MAKE	h_make.cpp	/^int Hilit_MAKE(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_MERGE	c_hilit.h	/^HILIT_P(Hilit_MERGE);$/;"	v
Hilit_MERGE	h_merge.cpp	/^int Hilit_MERGE(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine* Line, hlState& State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_MSG	c_hilit.h	/^HILIT_P(Hilit_MSG);$/;"	v
Hilit_MSG	h_msg.cpp	/^int Hilit_MSG(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine* Line, hlState& State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_PASCAL	c_hilit.h	/^HILIT_P(Hilit_PASCAL);$/;"	v
Hilit_PASCAL	h_pascal.cpp	/^int Hilit_PASCAL(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_PERL	c_hilit.h	/^HILIT_P(Hilit_PERL);$/;"	v
Hilit_PERL	h_perl.cpp	/^int Hilit_PERL(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_Plain	c_hilit.h	/^HILIT_P(Hilit_Plain);$/;"	v
Hilit_Plain	h_plain.cpp	/^int Hilit_Plain(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine* Line, hlState& State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_REXX	c_hilit.h	/^HILIT_P(Hilit_REXX);$/;"	v
Hilit_REXX	h_rexx.cpp	/^int Hilit_REXX(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_SH	c_hilit.h	/^HILIT_P(Hilit_SH);$/;"	v
Hilit_SH	h_sh.cpp	/^int Hilit_SH(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_SIMPLE	c_hilit.h	/^HILIT_P(Hilit_SIMPLE);$/;"	v
Hilit_SIMPLE	h_simple.cpp	/^int Hilit_SIMPLE(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
Hilit_TEX	c_hilit.h	/^HILIT_P(Hilit_TEX);$/;"	v
Hilit_TEX	h_tex.cpp	/^int Hilit_TEX(EBuffer *BF, int \/*LN*\/, PCell B, int Pos, int Width, ELine *Line, hlState &State, hsState *StateMap, int *ECol) {$/;"	f
HistId	g_pm.cpp	/^    int HistId;$/;"	m	struct:	file:
HistId	i_input.h	/^    int HistId;$/;"	m	class:ExInput
HistoryFileName	c_history.cpp	/^char HistoryFileName[256] = "";$/;"	v
HorzPos	g_motif.cpp	/^    int VertPos, HorzPos;$/;"	m	class:GViewPeer	file:
HorzPos	g_qt.cpp	/^    int VertPos, HorzPos;$/;"	m	class:GViewPeer	file:
HorzValueChanged	g_motif.cpp	/^void HorzValueChanged(Widget w, GViewPeer *Peer, XmScrollBarCallbackStruct *Call) {$/;"	f
I18NFocusIn	con_i18n.cpp	/^void I18NFocusIn(XIC xic) \/*fold00*\/$/;"	f
I18NFocusOut	con_i18n.cpp	/^void I18NFocusOut(XIC xic) \/*fold00*\/$/;"	f
I18NInit	con_i18n.cpp	/^XIC I18NInit(Display * display, Window win, unsigned long *mask) \/*fold00*\/$/;"	f
I18NKeyAnalyze	con_i18n.cpp	/^static int I18NKeyAnalyze(XKeyEvent * keyEvent, KeySym * key, \/*fold00*\/$/;"	f	file:
I18NLookupString	con_i18n.cpp	/^int I18NLookupString(XKeyEvent * keyEvent, char *keyName, int keySize, \/*FOLD00*\/$/;"	f
ICompleteWord	i_view.cpp	/^int GxView::ICompleteWord(EView *View) {$/;"	f	class:GxView
IDC_ALLOCCURENCES	pmdlg.h	20;"	d
IDC_BLOCK	pmdlg.h	17;"	d
IDC_DELETELINE	pmdlg.h	23;"	d
IDC_GLOBAL	pmdlg.h	18;"	d
IDC_IGNORECASE	pmdlg.h	14;"	d
IDC_JOINLINE	pmdlg.h	22;"	d
IDC_NOPROMPTING	pmdlg.h	21;"	d
IDC_REGEXPS	pmdlg.h	15;"	d
IDC_REVERSE	pmdlg.h	19;"	d
IDC_WORDS	pmdlg.h	16;"	d
IDD_FILEDLG	pmdlg.h	25;"	d
IDD_FIND	pmdlg.h	6;"	d
IDD_FINDREPLACE	pmdlg.h	5;"	d
IDD_PROMPT	pmdlg.h	1;"	d
IDE_FIELD	pmdlg.h	3;"	d
IDE_FIND	pmdlg.h	11;"	d
IDE_REPLACE	pmdlg.h	12;"	d
IDL_FIND	pmdlg.h	8;"	d
IDL_REPLACE	pmdlg.h	9;"	d
IDS_PROMPT	pmdlg.h	2;"	d
IF_TAB	c_hilit.h	135;"	d
INCL_AVIO	g_pm.cpp	25;"	d	file:
INCL_BASE	con_os2.cpp	31;"	d	file:
INCL_BASE	s_direct.cpp	15;"	d	file:
INCL_DOS	clip_pmv.cpp	14;"	d	file:
INCL_DOS	clip_vio.cpp	15;"	d	file:
INCL_DOS	clipprog.cpp	11;"	d	file:
INCL_DOS	clipserv.cpp	10;"	d	file:
INCL_DOS	con_os2.cpp	32;"	d	file:
INCL_DOS	fte.cpp	89;"	d	file:
INCL_DOS	fte2.cpp	84;"	d	file:
INCL_DOS	g_pm.cpp	26;"	d	file:
INCL_DOS	s_files.cpp	14;"	d	file:
INCL_DOSDEVIOCTL	con_os2.cpp	33;"	d	file:
INCL_DOSERRORS	g_pm.cpp	27;"	d	file:
INCL_GPI	g_pm.cpp	23;"	d	file:
INCL_KBD	con_os2.cpp	28;"	d	file:
INCL_MOU	con_os2.cpp	30;"	d	file:
INCL_ORDINALS	clip_pmv.cpp	15;"	d	file:
INCL_PM	clipprog.cpp	12;"	d	file:
INCL_PM	clipserv.cpp	11;"	d	file:
INCL_SUB	con_os2.cpp	27;"	d	file:
INCL_VIO	con_os2.cpp	29;"	d	file:
INCL_VIO	g_pm.cpp	24;"	d	file:
INCL_WIN	clip_pm.cpp	13;"	d	file:
INCL_WIN	clip_pmv.cpp	13;"	d	file:
INCL_WIN	con_os2.cpp	26;"	d	file:
INCL_WIN	g_pm.cpp	22;"	d	file:
INDENT_C	c_mode.h	49;"	d
INDENT_PLAIN	c_mode.h	48;"	d
INDENT_REXX	c_mode.h	50;"	d
INDENT_SIMPLE	c_mode.h	51;"	d
INoMatch	i_search.h	/^    typedef enum { IOk, INoMatch, INoPrev, INoNext } IState;$/;"	e	enum:ExISearch::<anonymous>
INoNext	i_search.h	/^    typedef enum { IOk, INoMatch, INoPrev, INoNext } IState;$/;"	e	enum:ExISearch::<anonymous>
INoPrev	i_search.h	/^    typedef enum { IOk, INoMatch, INoPrev, INoNext } IState;$/;"	e	enum:ExISearch::<anonymous>
IOk	i_search.h	/^    typedef enum { IOk, INoMatch, INoPrev, INoNext } IState;$/;"	e	enum:ExISearch::<anonymous>
ISNAME	h_c.cpp	18;"	d	file:
ISSEP	s_files.h	20;"	d
ISSEP	s_files.h	33;"	d
ISSLASH	s_files.h	19;"	d
ISSLASH	s_files.h	32;"	d
IS_MBRACE	h_perl.cpp	50;"	d	file:
IS_OBRACE	h_perl.cpp	31;"	d	file:
ISearchStr	i_search.h	/^    char ISearchStr[MAXISEARCH + 1];$/;"	m	class:ExISearch
IState	i_search.h	/^    typedef enum { IOk, INoMatch, INoPrev, INoNext } IState;$/;"	t	class:ExISearch
Id	c_history.h	/^    int *Id;$/;"	m	struct:
InRange	con_x11.cpp	490;"	d	file:
InRange	e_buffer.h	44;"	d
InRange	g_motif.cpp	740;"	d	file:
InRange	g_qt.cpp	807;"	d	file:
InRange	pm_tool.cpp	2;"	d	file:
IncrementalSearch	i_view.cpp	/^int GxView::IncrementalSearch(EView *View) {$/;"	f	class:GxView
IndentCPP	h_c.cpp	/^static int IndentCPP(EBuffer *B, int Line, int \/*StateLen*\/, hsState * \/*StateMap*\/) {$/;"	f	file:
IndentComment	h_c.cpp	/^static int IndentComment(EBuffer *B, int Row, int \/*StateLen*\/, hsState * \/*StateMap*\/) {$/;"	f	file:
IndentComment	h_rexx.cpp	/^static int IndentComment(EBuffer *B, int Row, int \/*StateLen*\/, hsState * \/*StateMap*\/) {$/;"	f	file:
IndentFunction	e_block.cpp	/^int EBuffer::IndentFunction() {$/;"	f	class:EBuffer
IndentLine	e_cmds.cpp	/^int EBuffer::IndentLine(int Row, int Indent) {$/;"	f	class:EBuffer
IndentModes	c_hilit.cpp	/^} IndentModes[] = {$/;"	v	file:
IndentNormal	h_c.cpp	/^static int IndentNormal(EBuffer *B, int Line, int \/*StateLen*\/, hsState * \/*StateMap*\/) {$/;"	f	file:
IndentNormal	h_rexx.cpp	/^static int IndentNormal(EBuffer *B, int Line, int \/*StateLen*\/, hsState * \/*StateMap*\/) {$/;"	f	file:
Indent_C	h_c.cpp	/^int Indent_C(EBuffer *B, int Line, int PosCursor) {$/;"	f
Indent_Plain	h_plain.cpp	/^int Indent_Plain(EBuffer *B, int Line, int PosCursor) {$/;"	f
Indent_REXX	h_rexx.cpp	/^int Indent_REXX(EBuffer *B, int Line, int PosCursor) {$/;"	f
Indent_SIMPLE	indent.cpp	/^int Indent_SIMPLE(EBuffer *B, int Line, int PosCursor) {$/;"	f
InitState	c_hilit.cpp	/^void HState::InitState() {$/;"	f	class:HState
InitTrans	c_hilit.cpp	/^void HTrans::InitTrans() {$/;"	f	class:HTrans
InitWordChars	c_bind.cpp	/^void InitWordChars() {$/;"	f
InitXColors	con_x11.cpp	/^static int InitXColors() {$/;"	f	file:
InitXColors	g_motif.cpp	/^static int InitXColors() {$/;"	f	file:
InitXFonts	con_x11.cpp	/^static int InitXFonts(void)$/;"	f	file:
InitXGCs	con_x11.cpp	/^static int InitXGCs() {$/;"	f	file:
Initialized	con_dosx.cpp	/^static int Initialized = 0;$/;"	v	file:
Initialized	con_nt.cpp	/^static int Initialized = 0;$/;"	v	file:
Initialized	con_os2.cpp	/^static int Initialized = 0;$/;"	v	file:
InputHistory	c_history.h	/^} InputHistory;$/;"	t
InputWindow	g_motif.cpp	/^void InputWindow(Widget w, GViewPeer *Peer, XEvent *event, Boolean *cont) {$/;"	f
InsChars	e_buffer.cpp	/^int EBuffer::InsChars(int Row, int Ofs, int ACount, char *Buffer) {$/;"	f	class:EBuffer
InsLine	e_buffer.cpp	/^int EBuffer::InsLine(int Row, int DoAppend, int DoMark) {$/;"	f	class:EBuffer
InsLineText	e_buffer.cpp	/^int EBuffer::InsLineText(int Row, int Col, int ACount, int LCol, PELine Line) {$/;"	f	class:EBuffer
InsPrevLineChar	e_cmds.cpp	/^int EBuffer::InsPrevLineChar() {$/;"	f	class:EBuffer
InsPrevLineToEol	e_cmds.cpp	/^int EBuffer::InsPrevLineToEol() {$/;"	f	class:EBuffer
InsText	e_buffer.cpp	/^int EBuffer::InsText(int Row, int Col, int ACount, char *ABuffer, int DoMark) {$/;"	f	class:EBuffer
InsertChar	e_cmds.cpp	/^int EBuffer::InsertChar(char aCh) {$/;"	f	class:EBuffer
InsertChar	o_buffer.cpp	/^int EBuffer::InsertChar(ExState &State) {$/;"	f	class:EBuffer
InsertDate	o_buffer.cpp	/^int EBuffer::InsertDate(ExState &State) {$/;"	f	class:EBuffer
InsertHistory	g_pm.cpp	/^void InsertHistory(HWND hwnd, int id, int maxlen) {$/;"	f
InsertLine	e_buffer.cpp	/^int EBuffer::InsertLine(EPoint Pos, int ACount, char *AChars) {$/;"	f	class:EBuffer
InsertSpace	e_cmds.cpp	/^int EBuffer::InsertSpace() {$/;"	f	class:EBuffer
InsertSpacesToTab	e_cmds.cpp	/^int EBuffer::InsertSpacesToTab(int TSize) {$/;"	f	class:EBuffer
InsertString	e_cmds.cpp	/^int EBuffer::InsertString(char *aStr, int aCount) {$/;"	f	class:EBuffer
InsertString	o_buffer.cpp	/^int EBuffer::InsertString(ExState &State) {$/;"	f	class:EBuffer
InsertTab	e_cmds.cpp	/^int EBuffer::InsertTab() {$/;"	f	class:EBuffer
InsertUid	o_buffer.cpp	/^int EBuffer::InsertUid() {$/;"	f	class:EBuffer
InsertView	g_motif.cpp	/^void GFrame::InsertView(GView *Prev, GView *view) {$/;"	f	class:GFrame
InsertView	g_pm.cpp	/^void GFrame::InsertView(GView *Prev, GView *view) {$/;"	f	class:GFrame
InsertView	g_qt.cpp	/^void GFrame::InsertView(GView *Prev, GView *view) {$/;"	f	class:GFrame
InsertView	g_text.cpp	/^void GFrame::InsertView(GView *Prev, GView *view) {$/;"	f	class:GFrame
InterfaceCleanup	egui.cpp	/^void EGUI::InterfaceCleanup() {$/;"	f	class:EGUI
InterfaceCleanup	fte2.cpp	/^static void InterfaceCleanup() {$/;"	f	file:
InterfaceInit	egui.cpp	/^int EGUI::InterfaceInit(int &argc, char **argv) {$/;"	f	class:EGUI
InterfaceInit	fte2.cpp	/^static int InterfaceInit(int &argc, char **argv) {$/;"	f	file:
IsActive	g_motif.cpp	/^int GView::IsActive() {$/;"	f	class:GView
IsActive	g_pm.cpp	/^int GView::IsActive() {$/;"	f	class:GView
IsActive	g_qt.cpp	/^int GView::IsActive() {$/;"	f	class:GView
IsActive	g_text.cpp	/^int GView::IsActive() {$/;"	f	class:GView
IsActive	i_oview.cpp	/^int ExView::IsActive() {$/;"	f	class:ExView
IsDirectory	s_files.cpp	/^int IsDirectory(const char *Path) {$/;"	f
IsFullPath	s_files.cpp	/^int IsFullPath(const char *Path) {$/;"	f
IsLineBlank	e_cmds.cpp	/^int EBuffer::IsLineBlank(int Row) {$/;"	f	class:EBuffer
IsModelView	i_modelview.h	/^    virtual int IsModelView() { return 1; }$/;"	f	class:ExModelView
IsModelView	i_oview.h	/^    virtual int IsModelView() { return 0; }$/;"	f	class:ExView
IsModelView	i_view.h	/^    int IsModelView() { return Top ? Top->IsModelView() : 0; }$/;"	f	class:GxView
IsSameFile	s_files.cpp	/^int IsSameFile(const char *Path1, const char *Path2) {$/;"	f
IsState	h_c.cpp	/^int IsState(hsState *Buf, hsState State, int Len) {$/;"	f
Items	console.h	/^    mItem *Items;$/;"	m	struct:_mMenu
JoinDirFile	s_files.cpp	/^int JoinDirFile(char *Dest, const char *Dir, const char *Name) {$/;"	f
JoinLine	e_buffer.cpp	/^int EBuffer::JoinLine(int Row, int Col) {$/;"	f	class:EBuffer
JustDirectory	s_files.cpp	/^int JustDirectory(const char *Path, char *Dir) {$/;"	f
JustFileName	s_files.cpp	/^int JustFileName(const char *Path, char *Name) {$/;"	f
JustLastDirectory	s_files.cpp	/^int JustLastDirectory(const char *Path, char *Dir) {$/;"	f
JustRoot	s_files.cpp	/^int JustRoot(const char *Path, char *Root) {$/;"	f
KBD_MACRO	con_ikcz.h	331;"	d
KEYBYTEMAX	con_i18n.cpp	24;"	d	file:
KEYMAPS_MACRO	con_ikcz.h	295;"	d
KEYMASK	con_i18n.cpp	23;"	d	file:
K_ABBREV	cfte.cpp	475;"	d	file:
K_COLOR	cfte.cpp	463;"	d	file:
K_COLORIZE	cfte.cpp	474;"	d	file:
K_COLPALETTE	cfte.cpp	481;"	d	file:
K_COMPILERX	cfte.cpp	469;"	d	file:
K_EVENTMAP	cfte.cpp	473;"	d	file:
K_EXTERN	cfte.cpp	470;"	d	file:
K_HSTATE	cfte.cpp	476;"	d	file:
K_HTRANS	cfte.cpp	477;"	d	file:
K_HWORDS	cfte.cpp	478;"	d	file:
K_HWTYPE	cfte.cpp	480;"	d	file:
K_INCLUDE	cfte.cpp	471;"	d	file:
K_ITEM	cfte.cpp	467;"	d	file:
K_KEY	cfte.cpp	462;"	d	file:
K_KEYWORD	cfte.cpp	464;"	d	file:
K_MENU	cfte.cpp	466;"	d	file:
K_MODE	cfte.cpp	461;"	d	file:
K_OBJECT	cfte.cpp	465;"	d	file:
K_SUB	cfte.cpp	472;"	d	file:
K_SUBMENU	cfte.cpp	468;"	d	file:
K_SUBMENUCOND	cfte.cpp	479;"	d	file:
K_UNKNOWN	cfte.cpp	460;"	d	file:
KeepHistory	c_config.cpp	/^int KeepHistory = 0;$/;"	v
KeepMessages	c_config.cpp	/^int KeepMessages = 0;$/;"	v
Key	c_bind.cpp	/^    TKeyCode Key;$/;"	m	struct:	file:
Key	c_bind.h	/^    TKeyCode Key;$/;"	m	struct:
Key	console.h	/^    TKeyEvent Key;$/;"	m	union:
Key	i_key.h	/^    TKeyCode Key;$/;"	m	class:ExKey
KeyCode	con_dosx.cpp	/^	TKeyCode KeyCode;$/;"	m	struct:	file:
KeyCode	con_linux.cpp	/^    unsigned long KeyCode;$/;"	m	struct:	file:
KeyCode	con_nt.cpp	/^    TKeyCode KeyCode;$/;"	m	struct:	file:
KeyCode	con_nt.cpp	/^    unsigned long KeyCode;$/;"	m	struct:	file:
KeyCode	con_os2.cpp	/^    TKeyCode KeyCode;$/;"	m	struct:	file:
KeyList	c_bind.cpp	/^} KeyList[] = {$/;"	v	file:
KeyMap	c_bind.h	/^    EKeyMap *KeyMap;$/;"	m	class:EEventMap
KeyMask	console.h	/^    TKeyCode KeyMask;$/;"	m	struct:
KeySel	c_bind.h	/^} KeySel;$/;"	t
KeySym	con_linux.cpp	/^    unsigned long KeySym;$/;"	m	struct:	file:
KeyTrans	con_linux.cpp	/^} KeyTrans[] = {$/;"	v	file:
Keywords	c_hilit.h	/^    ColorKeywords Keywords; \/\/ keywords to highlight$/;"	m	class:EColorize
KillBlock	e_cmds.cpp	/^int EBuffer::KillBlock() {$/;"	f	class:EBuffer
KillBlockOrChar	e_cmds.cpp	/^int EBuffer::KillBlockOrChar() {$/;"	f	class:EBuffer
KillBlockOrCharPrev	e_cmds.cpp	/^int EBuffer::KillBlockOrCharPrev() {$/;"	f	class:EBuffer
KillChar	e_cmds.cpp	/^int EBuffer::KillChar() {$/;"	f	class:EBuffer
KillCharPrev	e_cmds.cpp	/^int EBuffer::KillCharPrev() {$/;"	f	class:EBuffer
KillLine	e_cmds.cpp	/^int EBuffer::KillLine() {$/;"	f	class:EBuffer
KillToLineEnd	e_cmds.cpp	/^int EBuffer::KillToLineEnd() {$/;"	f	class:EBuffer
KillToLineStart	e_cmds.cpp	/^int EBuffer::KillToLineStart() {$/;"	f	class:EBuffer
KillWord	e_cmds.cpp	/^int EBuffer::KillWord() {$/;"	f	class:EBuffer
KillWordOrCap	e_cmds.cpp	/^int EBuffer::KillWordOrCap() {$/;"	f	class:EBuffer
KillWordOrCapPrev	e_cmds.cpp	/^int EBuffer::KillWordOrCapPrev() {$/;"	f	class:EBuffer
KillWordPrev	e_cmds.cpp	/^int EBuffer::KillWordPrev() {$/;"	f	class:EBuffer
LINE_LENGTH	log.cpp	128;"	d	file:
LL	e_buffer.h	/^    PELine *LL;$/;"	m	class:EBuffer
LOCALE_SORT	i_complete.cpp	17;"	d	file:
LOG	log.h	183;"	d
LOG	log.h	290;"	d
LOGBINARYDATA	log.h	286;"	d
LOGBINARYDATA	log.h	302;"	d
LOGOBJNAME	log.h	182;"	d
LPopupMenu	g_motif.cpp	/^Widget LPopupMenu = 0;$/;"	v
LPos	i_ascii.h	/^    int Pos, LPos;$/;"	m	class:ExASCII
LPos	i_input.h	/^    unsigned int LPos;$/;"	m	class:ExInput
LSearch	o_buffer.cpp	/^SearchReplaceOptions LSearch = { 0 };$/;"	v
LastEventChar	egui.cpp	/^int LastEventChar = -1;$/;"	v
LastMouseEvent	con_x11.cpp	/^static TEvent LastMouseEvent = { evNone };$/;"	v	file:
LastMouseEvent	g_motif.cpp	/^static TEvent LastMouseEvent = { evNone };$/;"	v	file:
LastMousePos	g_qt.cpp	/^static QPoint LastMousePos;$/;"	v	file:
LastMouseX	con_linux.cpp	/^int LastMouseX = 0, LastMouseY = 0;$/;"	v
LastMouseX	con_nt.cpp	/^static int LastMouseX = 0;$/;"	v	file:
LastMouseX	con_x11.cpp	/^static int LastMouseX = -1, LastMouseY = -1;$/;"	v	file:
LastMouseX	g_motif.cpp	/^static int LastMouseX = -1, LastMouseY = -1;$/;"	v	file:
LastMouseX	g_qt.cpp	/^static int LastMouseX = -1, LastMouseY = -1;$/;"	v	file:
LastMouseY	con_linux.cpp	/^int LastMouseX = 0, LastMouseY = 0;$/;"	v
LastMouseY	con_nt.cpp	/^static int      LastMouseY = 0;$/;"	v	file:
LastMouseY	con_x11.cpp	/^static int LastMouseX = -1, LastMouseY = -1;$/;"	v	file:
LastMouseY	g_motif.cpp	/^static int LastMouseX = -1, LastMouseY = -1;$/;"	v	file:
LastMouseY	g_qt.cpp	/^static int LastMouseX = -1, LastMouseY = -1;$/;"	v	file:
LastRelease	g_motif.cpp	/^XButtonEvent LastRelease;$/;"	v
LastState	c_hilit.h	/^    HState *LastState() { return state + stateCount - 1; }$/;"	f	class:HMachine
LeavePmClipboard	clip_pmv.cpp	/^static void LeavePmClipboard(void) {$/;"	f	file:
LeftCol	o_list.h	/^    int Row, LeftCol, TopRow, Count;$/;"	m	class:EList
LeftCol	o_list.h	/^    int Row, TopRow, LeftCol;$/;"	m	class:EListPort
Line	c_history.h	/^    char **Line;$/;"	m	struct:
Line	e_tags.cpp	/^    int Line, Col;$/;"	m	struct:TagStack	file:
Line	e_tags.cpp	/^    int Line;$/;"	m	struct:TagData	file:
Line	i_input.h	/^    char *Line;$/;"	m	class:ExInput
LineAdd	e_cmds.cpp	/^int EBuffer::LineAdd() {$/;"	f	class:EBuffer
LineCaseDown	e_trans.cpp	/^int EBuffer::LineCaseDown() {$/;"	f	class:EBuffer
LineCaseToggle	e_trans.cpp	/^int EBuffer::LineCaseToggle()  {$/;"	f	class:EBuffer
LineCaseUp	e_trans.cpp	/^int EBuffer::LineCaseUp() {$/;"	f	class:EBuffer
LineCenter	e_cmds.cpp	/^int EBuffer::LineCenter() {$/;"	f	class:EBuffer
LineChars	e_buffer.cpp	/^int EBuffer::LineChars(int Row) {$/;"	f	class:EBuffer
LineCount	e_cmds.cpp	/^int EBuffer::LineCount() {$/;"	f	class:EBuffer
LineDuplicate	e_cmds.cpp	/^int EBuffer::LineDuplicate() {$/;"	f	class:EBuffer
LineIndent	e_cmds.cpp	/^int EBuffer::LineIndent() {$/;"	f	class:EBuffer
LineIndented	e_cmds.cpp	/^int EBuffer::LineIndented(int Row) {$/;"	f	class:EBuffer
LineInsert	e_cmds.cpp	/^int EBuffer::LineInsert() {$/;"	f	class:EBuffer
LineJoin	e_cmds.cpp	/^int EBuffer::LineJoin() {$/;"	f	class:EBuffer
LineLen	e_buffer.cpp	/^int EBuffer::LineLen(int Row) {$/;"	f	class:EBuffer
LineLen	e_cmds.cpp	/^int EBuffer::LineLen() {$/;"	f	class:EBuffer
LineNew	e_cmds.cpp	/^int EBuffer::LineNew() {$/;"	f	class:EBuffer
LineSplit	e_cmds.cpp	/^int EBuffer::LineSplit() {$/;"	f	class:EBuffer
LineTrans	e_trans.cpp	/^int EBuffer::LineTrans(ExState &State) {$/;"	f	class:EBuffer
LineTrans	e_trans.cpp	/^int EBuffer::LineTrans(TransTable tab) {$/;"	f	class:EBuffer
LineTrim	e_cmds.cpp	/^int EBuffer::LineTrim() {$/;"	f	class:EBuffer
Lines	e_buffer.h	/^    int *Lines;$/;"	m	struct:_RoutineList
List	o_list.h	/^    EList *List;$/;"	m	class:EListPort
Load	e_loadsave.cpp	/^int EBuffer::Load() {$/;"	f	class:EBuffer
LoadConfig	c_config.cpp	/^int LoadConfig(int \/*argc*\/, char ** \/*argv*\/, char *CfgFileName) {$/;"	f
LoadDesktop	c_desktop.cpp	/^int LoadDesktop(char *FileName) {$/;"	f
LoadDesktopMode	c_config.cpp	/^int LoadDesktopMode = 0;$/;"	v
LoadDesktopOnEntry	c_config.cpp	/^int LoadDesktopOnEntry = 0;$/;"	v
LoadFile	cfte.cpp	/^int LoadFile(const char *WhereName, const char *CfgName, int Level) {$/;"	f
LoadFrom	e_loadsave.cpp	/^int EBuffer::LoadFrom(char *AFileName) {$/;"	f	class:EBuffer
LoadHistory	c_history.cpp	/^int LoadHistory(char *FileName) { \/*fold00*\/$/;"	f
LoadRegion	e_buffer.cpp	/^int EBuffer::LoadRegion(EPoint * \/*A*\/, int \/*FH*\/, int \/*StripChar*\/, int \/*LineChar*\/) {$/;"	f	class:EBuffer
LoadTagFiles	e_tags.cpp	/^static int LoadTagFiles() { \/*FOLD00*\/$/;"	f	file:
Loaded	e_buffer.h	/^    int Loaded;$/;"	m	class:EBuffer
Loading	e_buffer.h	/^    int Loading;$/;"	m	class:EBuffer
LocalMenu	egui.cpp	/^int EGUI::LocalMenu(GxView *View) {$/;"	f	class:EGUI
Log__BinaryData	log.cpp	/^void Log__BinaryData(FunctionLog& LOGOBJNAME, void* bin_data, size_t len, unsigned long line)$/;"	f
Log__osBinChar	log.cpp	/^ostream& Log__osBinChar(ostream& os, char const& c)$/;"	f
Log__osFillChar	log.cpp	/^ostream& Log__osFillChar(ostream& os, char const& c, size_t const& len)$/;"	f
LookAt	h_c.cpp	/^int LookAt(EBuffer *B, int Row, unsigned int Pos, const char *What, hsState State, int NoWord, int CaseInsensitive) {$/;"	f
LookAtNoCase	c_hilit.h	/^inline int LookAtNoCase(EBuffer *B, int Row, unsigned int Pos, const char *What, hsState State, int NoWord = 1)$/;"	f
Lookup	cfte.cpp	/^int Lookup(OrdLookup *where, char *what) {$/;"	f
MATCH_MUST_BOL	c_mode.h	230;"	d
MATCH_MUST_BOLW	c_mode.h	231;"	d
MATCH_MUST_EOL	c_mode.h	232;"	d
MATCH_MUST_EOLW	c_mode.h	233;"	d
MATCH_NEGATE	c_mode.h	240;"	d
MATCH_NOGRAB	c_mode.h	239;"	d
MATCH_NOTSET	c_mode.h	236;"	d
MATCH_NO_CASE	c_mode.h	234;"	d
MATCH_QUOTECH	c_mode.h	237;"	d
MATCH_QUOTEEOL	c_mode.h	238;"	d
MATCH_SET	c_mode.h	235;"	d
MATCH_TAGASNEXT	c_mode.h	241;"	d
MAXCLIPTEXT	cliputil.cpp	15;"	d	file:
MAXCOMPLETEWORDS	i_complete.h	14;"	d
MAXISEARCH	i_search.h	13;"	d
MAXPATH	sysdep.h	102;"	d
MAXPATH	sysdep.h	131;"	d
MAXREGEXP	o_messages.cpp	13;"	d	file:
MAXSEARCH	gui.h	200;"	d
MAXSEOF	h_perl.cpp	107;"	d	file:
MAXSEOF	h_sh.cpp	18;"	d	file:
MAXXSIZE	g_pm.cpp	72;"	d	file:
MAXYSIZE	g_pm.cpp	73;"	d	file:
MAX_INPUT_HIST	c_history.h	26;"	d
MAX_PIPES	con_dosx.cpp	30;"	d	file:
MAX_PIPES	con_linux.cpp	61;"	d	file:
MAX_PIPES	con_nt.cpp	1505;"	d	file:
MAX_PIPES	con_nt.cpp	891;"	d	file:
MAX_PIPES	con_os2.cpp	42;"	d	file:
MAX_PIPES	con_slang.cpp	30;"	d	file:
MAX_PIPES	con_x11.cpp	66;"	d	file:
MAX_PIPES	g_motif.cpp	47;"	d	file:
MAX_PIPES	g_pm.cpp	75;"	d	file:
MAX_PIPES	g_qt.cpp	46;"	d	file:
MEM_PAGE_SIZE	con_linux.cpp	104;"	d	file:
MEM_PREFIX	clip_vio.cpp	21;"	d	file:
MEM_PREFIX	clipprog.cpp	20;"	d	file:
MEM_PREFIX	clipserv.cpp	20;"	d	file:
MIN_SCRHEIGHT	con_x11.cpp	64;"	d	file:
MIN_SCRWIDTH	con_x11.cpp	63;"	d	file:
MODE_BFI	cfte.cpp	253;"	d	file:
MODE_BFS	cfte.cpp	254;"	d	file:
MODE_FLG	cfte.cpp	255;"	d	file:
MSGBUFTMP_SIZE	o_model.h	173;"	d
MTime	s_direct.h	/^    time_t MTime() { return mtime; }$/;"	f	class:FileInfo
MView	o_model.h	/^    ExModelView *MView; \/\/ model view controller$/;"	m	class:EView
Macro	c_bind.h	/^    int Macro;$/;"	m	class:ExState
MacroVariable	c_mode.h	/^} MacroVariable;$/;"	t
Macros	c_bind.cpp	/^ExMacro *Macros = 0;$/;"	v
Macros	cfte.cpp	/^ExMacro *Macros = 0;$/;"	v
MainCallback	g_motif.cpp	/^void MainCallback (Widget w, mItem *item, XtPointer callData) {$/;"	f
MainMenu	egui.cpp	/^int EGUI::MainMenu(ExState &State, GxView *View) {$/;"	f	class:EGUI
MainWin	g_motif.cpp	/^    Widget ShellWin, MainWin, PanedWin, MenuBar;$/;"	m	class:GFramePeer	file:
MakeBackup	s_util.cpp	/^char *MakeBackup(char *FileName, char *NewName) {$/;"	f
MakeSub	e_regex.cpp	/^static int MakeSub(RxNode **F, RxNode **N, char What) {$/;"	f	file:
MakeTrans	e_trans.cpp	/^int MakeTrans(TransTable tab, int What) {$/;"	f
MapFrame	g_motif.cpp	/^void GFramePeer::MapFrame() {$/;"	f	class:GFramePeer
MapFrame	g_pm.cpp	/^void GFramePeer::MapFrame() {$/;"	f	class:GFramePeer
MapFrame	g_qt.cpp	/^void GFramePeer::MapFrame() {$/;"	f	class:GFramePeer
Mask	c_bind.h	/^    TKeyCode Mask;$/;"	m	struct:
Match	c_bind.h	/^    char *Match;$/;"	m	class:EAbbrev
Match	e_buffer.h	/^    EPoint Match;$/;"	m	class:EBuffer
Match	h_rexx.cpp	/^static int Match(int Len, int Pos, hsState *StateMap, const char *Text, const char *String, hsState State) {$/;"	f	file:
MatchBracket	e_search.cpp	/^int EBuffer::MatchBracket() {$/;"	f	class:EBuffer
MatchCount	e_buffer.h	/^    int MatchCount;$/;"	m	class:EBuffer
MatchCount	o_messages.h	/^    int MatchCount;$/;"	m	class:EMessages
MatchKey	c_bind.cpp	/^int MatchKey(TKeyCode aKey, KeySel aSel) {$/;"	f
MatchLen	e_buffer.h	/^    int MatchLen;$/;"	m	class:EBuffer
MatchLine	c_bind.h	/^    char *MatchLine;$/;"	m	class:EMode
MatchLineRx	c_bind.h	/^    RxNode *MatchLineRx;$/;"	m	class:EMode
MatchName	c_bind.h	/^    char *MatchName;$/;"	m	class:EMode
MatchNameRx	c_bind.h	/^    RxNode *MatchNameRx;$/;"	m	class:EMode
MatchRes	e_buffer.h	/^    RxMatchRes MatchRes;$/;"	m	class:EBuffer
MatchStr	i_input.h	/^    char *MatchStr;$/;"	m	class:ExInput
Max	e_buffer.h	46;"	d
Max	pm_tool.cpp	4;"	d	file:
MaxLen	g_pm.cpp	/^    int MaxLen;$/;"	m	struct:	file:
MaxLen	i_input.h	/^    unsigned int MaxLen;$/;"	m	class:ExInput
MaxRedraw	e_buffer.h	/^    int MinRedraw, MaxRedraw;$/;"	m	class:EBuffer
Menu	c_bind.h	/^    char *Menu[EM_MENUS]; \/\/ main + local$/;"	m	class:EEventMap
Menu	gui.h	/^    char *Menu;$/;"	m	class:GFrame
MenuBar	g_motif.cpp	/^    Widget ShellWin, MainWin, PanedWin, MenuBar;$/;"	m	class:GFramePeer	file:
MenuCount	g_menu.cpp	/^int MenuCount = 0;$/;"	v
MenuPopdownCb	g_motif.cpp	/^void MenuPopdownCb (Widget w, mItem *item, XtPointer callData) {$/;"	f
Menus	g_menu.cpp	/^mMenu *Menus = 0;$/;"	v
Min	e_buffer.h	45;"	d
Min	pm_tool.cpp	3;"	d	file:
MinRedraw	e_buffer.h	/^    int MinRedraw, MaxRedraw;$/;"	m	class:EBuffer
Mode	e_buffer.h	/^    EMode *Mode;$/;"	m	class:EBuffer
Model	console.h	/^    EModel *Model;$/;"	m	struct:
Model	o_model.h	/^    EModel *Model;       \/\/ model for this view$/;"	m	class:EView
ModelNo	o_model.h	/^    int ModelNo;$/;"	m	class:EModel
Modes	c_bind.cpp	/^EMode *Modes = 0;$/;"	v
Modified	e_buffer.h	/^    int Modified;$/;"	m	class:EBuffer
Modify	e_buffer.cpp	/^int EBuffer::Modify() {$/;"	f	class:EBuffer
Mouse	console.h	/^    TMouseEvent Mouse;$/;"	m	union:
MouseAutoDelay	con_dosx.cpp	/^static long MouseAutoDelay = 400;$/;"	v	file:
MouseAutoDelay	con_os2.cpp	/^static long MouseAutoDelay = 400;$/;"	v	file:
MouseAutoDelay	con_x11.cpp	/^static long MouseAutoDelay = 40;$/;"	v	file:
MouseAutoDelay	g_motif.cpp	/^static long MouseAutoDelay = 40;$/;"	v	file:
MouseAutoRepeat	con_dosx.cpp	/^static long MouseAutoRepeat = 5;$/;"	v	file:
MouseAutoRepeat	con_os2.cpp	/^static long MouseAutoRepeat = 5;$/;"	v	file:
MouseAutoRepeat	con_x11.cpp	/^static long MouseAutoRepeat = 200;$/;"	v	file:
MouseAutoRepeat	g_motif.cpp	/^static long MouseAutoRepeat = 200;$/;"	v	file:
MouseCapture	g_motif.cpp	/^static GView *MouseCapture = 0;$/;"	v	file:
MouseCapture	g_pm.cpp	/^GView *MouseCapture = 0;$/;"	v
MouseCapture	g_qt.cpp	/^static GView *MouseCapture = 0;$/;"	v	file:
MouseCapture	g_text.cpp	/^GView *MouseCapture = 0;$/;"	v
MouseCaptured	i_choice.h	/^    int MouseCaptured;$/;"	m	class:ExChoice
MouseCaptured	i_modelview.h	/^    int MouseCaptured;$/;"	m	class:ExModelView
MouseCaptured	i_view.h	/^    int MouseCaptured;$/;"	m	class:GxView
MouseCaptured	o_list.h	/^    int MouseCaptured;$/;"	m	class:EList
MouseEv	con_dosx.cpp	/^static TEvent MouseEv = { evNone };$/;"	v	file:
MouseEv	con_nt.cpp	/^static TEvent MouseEv = { evNone };$/;"	v	file:
MouseEv	con_os2.cpp	/^static TEvent MouseEv = { evNone };$/;"	v	file:
MouseHandle	con_os2.cpp	/^static HMOU MouseHandle = 0;$/;"	v	file:
MouseMoved	i_modelview.h	/^    int MouseMoved;$/;"	m	class:ExModelView
MouseMoved	o_list.h	/^    int MouseMoved;$/;"	m	class:EList
MouseMultiClick	con_dosx.cpp	/^static long MouseMultiClick = 300;$/;"	v	file:
MouseMultiClick	con_os2.cpp	/^static long MouseMultiClick = 300;$/;"	v	file:
MouseMultiClick	con_x11.cpp	/^static long MouseMultiClick = 300;$/;"	v	file:
MouseMultiClick	g_motif.cpp	/^static long MouseMultiClick = 300;$/;"	v	file:
MousePosCell	con_linux.cpp	/^TCell MousePosCell;$/;"	v
MousePresent	con_dosx.cpp	/^static int MousePresent = 0;$/;"	v	file:
MousePresent	con_nt.cpp	/^static int MousePresent = 0;$/;"	v	file:
MousePresent	con_os2.cpp	/^static int MousePresent = 0;$/;"	v	file:
MouseVisible	con_dosx.cpp	/^static int MouseVisible = 0; \/* 0 means hidden *\/$/;"	v	file:
MouseVisible	con_nt.cpp	/^static int MouseVisible = 0; \/* 0 means hidden *\/$/;"	v	file:
MouseVisible	con_os2.cpp	/^static int MouseVisible = 0; \/* 0 means hidden *\/$/;"	v	file:
MoveAttr	g_draw.cpp	/^void MoveAttr(PCell B, int Pos, int Width, TAttr Attr, int Count) {$/;"	f
MoveBeginLinePageFile	e_cmds.cpp	/^int EBuffer::MoveBeginLinePageFile() {$/;"	f	class:EBuffer
MoveBeginOrNonWhite	e_cmds.cpp	/^int EBuffer::MoveBeginOrNonWhite() {$/;"	f	class:EBuffer
MoveBgAttr	g_draw.cpp	/^void MoveBgAttr(PCell B, int Pos, int Width, TAttr Attr, int Count) {$/;"	f
MoveBlockEnd	e_cmds.cpp	/^int EBuffer::MoveBlockEnd() {$/;"	f	class:EBuffer
MoveBlockStart	e_cmds.cpp	/^int EBuffer::MoveBlockStart() {$/;"	f	class:EBuffer
MoveCStr	g_draw.cpp	/^void MoveCStr(PCell B, int Pos, int Width, const char* Ch, TAttr A0, TAttr A1, int MaxCount) {$/;"	f
MoveCh	g_draw.cpp	/^void MoveCh(PCell B, char CCh, TAttr Attr, int Count) {$/;"	f
MoveCh	g_draw.cpp	/^void MoveCh(PCell B, char Ch, TAttr Attr, int Count) {$/;"	f
MoveChar	g_draw.cpp	/^void MoveChar(PCell B, int Pos, int Width, char const CCh, TAttr Attr, int Count) {$/;"	f
MoveChar	g_draw.cpp	/^void MoveChar(PCell B, int Pos, int Width, const char Ch, TAttr Attr, int Count) {$/;"	f
MoveDown	e_cmds.cpp	/^int EBuffer::MoveDown() {$/;"	f	class:EBuffer
MoveDown	o_list.cpp	/^int EList::MoveDown() {$/;"	f	class:EList
MoveEndLinePageFile	e_cmds.cpp	/^int EBuffer::MoveEndLinePageFile() {$/;"	f	class:EBuffer
MoveFileEnd	e_cmds.cpp	/^int EBuffer::MoveFileEnd() {$/;"	f	class:EBuffer
MoveFileEnd	o_list.cpp	/^int EList::MoveFileEnd() {$/;"	f	class:EList
MoveFileStart	e_cmds.cpp	/^int EBuffer::MoveFileStart() {$/;"	f	class:EBuffer
MoveFileStart	o_list.cpp	/^int EList::MoveFileStart() {$/;"	f	class:EList
MoveFirstNonWhite	e_cmds.cpp	/^int EBuffer::MoveFirstNonWhite() {$/;"	f	class:EBuffer
MoveFoldNext	e_fold.cpp	/^int EBuffer::MoveFoldNext() { \/*FOLD00*\/$/;"	f	class:EBuffer
MoveFoldPrev	e_fold.cpp	/^int EBuffer::MoveFoldPrev() { \/*FOLD00*\/$/;"	f	class:EBuffer
MoveFoldTop	e_fold.cpp	/^int EBuffer::MoveFoldTop() { \/*FOLD00*\/$/;"	f	class:EBuffer
MoveFunctionNext	e_block.cpp	/^int EBuffer::MoveFunctionNext() {$/;"	f	class:EBuffer
MoveFunctionPrev	e_block.cpp	/^int EBuffer::MoveFunctionPrev() {$/;"	f	class:EBuffer
MoveLastNonWhite	e_cmds.cpp	/^int EBuffer::MoveLastNonWhite() {$/;"	f	class:EBuffer
MoveLeft	e_cmds.cpp	/^int EBuffer::MoveLeft() {$/;"	f	class:EBuffer
MoveLeft	o_list.cpp	/^int EList::MoveLeft() {$/;"	f	class:EList
MoveLineBottom	e_cmds.cpp	/^int EBuffer::MoveLineBottom() {$/;"	f	class:EBuffer
MoveLineCenter	e_cmds.cpp	/^int EBuffer::MoveLineCenter() {$/;"	f	class:EBuffer
MoveLineEnd	e_cmds.cpp	/^int EBuffer::MoveLineEnd() {$/;"	f	class:EBuffer
MoveLineEnd	o_list.cpp	/^int EList::MoveLineEnd() {$/;"	f	class:EList
MoveLineStart	e_cmds.cpp	/^int EBuffer::MoveLineStart() {$/;"	f	class:EBuffer
MoveLineStart	o_list.cpp	/^int EList::MoveLineStart() {$/;"	f	class:EList
MoveLineTop	e_cmds.cpp	/^int EBuffer::MoveLineTop() {$/;"	f	class:EBuffer
MoveMem	g_draw.cpp	/^void MoveMem(PCell B, int Pos, int Width, const char* Ch, TAttr Attr, int Count) {$/;"	f
MoveNext	e_cmds.cpp	/^int EBuffer::MoveNext() {$/;"	f	class:EBuffer
MoveNextEqualIndent	e_cmds.cpp	/^int EBuffer::MoveNextEqualIndent() {$/;"	f	class:EBuffer
MoveNextTab	e_cmds.cpp	/^int EBuffer::MoveNextTab() {$/;"	f	class:EBuffer
MovePageDown	e_cmds.cpp	/^int EBuffer::MovePageDown() {$/;"	f	class:EBuffer
MovePageDown	o_list.cpp	/^int EList::MovePageDown() {$/;"	f	class:EList
MovePageEnd	e_cmds.cpp	/^int EBuffer::MovePageEnd() {$/;"	f	class:EBuffer
MovePageEnd	o_list.cpp	/^int EList::MovePageEnd() {$/;"	f	class:EList
MovePageLeft	e_cmds.cpp	/^int EBuffer::MovePageLeft() {$/;"	f	class:EBuffer
MovePageRight	e_cmds.cpp	/^int EBuffer::MovePageRight() {$/;"	f	class:EBuffer
MovePageStart	e_cmds.cpp	/^int EBuffer::MovePageStart() {$/;"	f	class:EBuffer
MovePageStart	o_list.cpp	/^int EList::MovePageStart() {$/;"	f	class:EList
MovePageUp	e_cmds.cpp	/^int EBuffer::MovePageUp() {$/;"	f	class:EBuffer
MovePageUp	o_list.cpp	/^int EList::MovePageUp() {$/;"	f	class:EList
MovePrev	e_cmds.cpp	/^int EBuffer::MovePrev() {$/;"	f	class:EBuffer
MovePrevEqualIndent	e_cmds.cpp	/^int EBuffer::MovePrevEqualIndent() {$/;"	f	class:EBuffer
MovePrevPos	e_cmds.cpp	/^int EBuffer::MovePrevPos() {$/;"	f	class:EBuffer
MovePrevTab	e_cmds.cpp	/^int EBuffer::MovePrevTab() {$/;"	f	class:EBuffer
MoveRGap	e_line.cpp	/^int EBuffer::MoveRGap(int RPos) {$/;"	f	class:EBuffer
MoveRight	e_cmds.cpp	/^int EBuffer::MoveRight() {$/;"	f	class:EBuffer
MoveRight	o_list.cpp	/^int EList::MoveRight() {$/;"	f	class:EList
MoveSavedPos	e_cmds.cpp	/^int EBuffer::MoveSavedPos() {$/;"	f	class:EBuffer
MoveSavedPosCol	e_cmds.cpp	/^int EBuffer::MoveSavedPosCol() {$/;"	f	class:EBuffer
MoveSavedPosRow	e_cmds.cpp	/^int EBuffer::MoveSavedPosRow() {$/;"	f	class:EBuffer
MoveStr	g_draw.cpp	/^void MoveStr(PCell B, int Pos, int Width, const char* Ch, TAttr Attr, int MaxCount) {$/;"	f
MoveTabEnd	e_cmds.cpp	/^int EBuffer::MoveTabEnd() {$/;"	f	class:EBuffer
MoveTabStart	e_cmds.cpp	/^int EBuffer::MoveTabStart() {$/;"	f	class:EBuffer
MoveToColumn	o_buffer.cpp	/^int EBuffer::MoveToColumn(ExState &State) {$/;"	f	class:EBuffer
MoveToLine	o_buffer.cpp	/^int EBuffer::MoveToLine(ExState &State) {$/;"	f	class:EBuffer
MoveUp	e_cmds.cpp	/^int EBuffer::MoveUp() {$/;"	f	class:EBuffer
MoveUp	o_list.cpp	/^int EList::MoveUp() {$/;"	f	class:EList
MoveVGap	e_line.cpp	/^int EBuffer::MoveVGap(int VPos) {$/;"	f	class:EBuffer
MoveWordEndLeft	e_cmds.cpp	/^int EBuffer::MoveWordEndLeft() {$/;"	f	class:EBuffer
MoveWordEndNext	e_cmds.cpp	/^int EBuffer::MoveWordEndNext() {$/;"	f	class:EBuffer
MoveWordEndPrev	e_cmds.cpp	/^int EBuffer::MoveWordEndPrev() {$/;"	f	class:EBuffer
MoveWordEndRight	e_cmds.cpp	/^int EBuffer::MoveWordEndRight() {$/;"	f	class:EBuffer
MoveWordLeft	e_cmds.cpp	/^int EBuffer::MoveWordLeft() {$/;"	f	class:EBuffer
MoveWordLeftX	e_cmds.cpp	/^int EBuffer::MoveWordLeftX(int start) {$/;"	f	class:EBuffer
MoveWordNext	e_cmds.cpp	/^int EBuffer::MoveWordNext() {$/;"	f	class:EBuffer
MoveWordOrCapEndLeft	e_cmds.cpp	/^int EBuffer::MoveWordOrCapEndLeft() {$/;"	f	class:EBuffer
MoveWordOrCapEndNext	e_cmds.cpp	/^int EBuffer::MoveWordOrCapEndNext() {$/;"	f	class:EBuffer
MoveWordOrCapEndPrev	e_cmds.cpp	/^int EBuffer::MoveWordOrCapEndPrev() {$/;"	f	class:EBuffer
MoveWordOrCapEndRight	e_cmds.cpp	/^int EBuffer::MoveWordOrCapEndRight() {$/;"	f	class:EBuffer
MoveWordOrCapLeft	e_cmds.cpp	/^int EBuffer::MoveWordOrCapLeft() {$/;"	f	class:EBuffer
MoveWordOrCapNext	e_cmds.cpp	/^int EBuffer::MoveWordOrCapNext() {$/;"	f	class:EBuffer
MoveWordOrCapPrev	e_cmds.cpp	/^int EBuffer::MoveWordOrCapPrev() {$/;"	f	class:EBuffer
MoveWordOrCapRight	e_cmds.cpp	/^int EBuffer::MoveWordOrCapRight() {$/;"	f	class:EBuffer
MoveWordPrev	e_cmds.cpp	/^int EBuffer::MoveWordPrev() {$/;"	f	class:EBuffer
MoveWordRight	e_cmds.cpp	/^int EBuffer::MoveWordRight() {$/;"	f	class:EBuffer
MoveWordRightX	e_cmds.cpp	/^int EBuffer::MoveWordRightX(int start) {$/;"	f	class:EBuffer
Msg	console.h	/^    TMsgEvent Msg;$/;"	m	union:
Msg	o_model.cpp	/^void EModel::Msg(int level, const char *s, ...) {$/;"	f	class:EModel
Msg	view.cpp	/^void EView::Msg(int level, const char *s, ...) {$/;"	f	class:EView
MsgBuf	o_messages.h	/^    char MsgBuf[4096];$/;"	m	class:EMessages
MsgColor	c_color.cpp	/^ChColor MsgColor[3] = { 0x07, 0x0B, 0x04 };$/;"	v
MultiFileLoad	e_file.cpp	/^int MultiFileLoad(int createFlags, const char *FileName, const char *Mode, EView *View) {$/;"	f
NCOLORS	c_color.cpp	109;"	d	file:
NCRegexp	o_messages.cpp	/^int NCRegexp = 0;$/;"	v
NEED_LOG_H	fte.cpp	9;"	d	file:
NEED_LOG_H	h_c.cpp	10;"	d	file:
NEED_LOG_H	o_directory.cpp	10;"	d	file:
NNN	e_regex.cpp	127;"	d	file:
NO_NEW_CPP_FEATURES	sysdep.h	83;"	d
NO_NEW_CPP_FEATURES	sysdep.h	92;"	d
NO_PIPES	con_x11.cpp	16;"	d	file:
NO_SIGNALS	con_x11.cpp	17;"	d	file:
NOpt	i_choice.h	/^    int NOpt;$/;"	m	class:ExChoice
NSEXPS	e_regex.h	83;"	d
NSel	g_pm.cpp	/^    int NSel;$/;"	m	struct:	file:
NUMITEMS	con_nt.cpp	103;"	d	file:
NUM_BRACE	h_perl.cpp	34;"	d	file:
Name	c_bind.cpp	/^    const char *Name;$/;"	m	struct:	file:
Name	c_bind.h	/^    char *Name;$/;"	m	class:EEventMap
Name	c_bind.h	/^    char *Name;$/;"	m	struct:
Name	c_cmdtab.h	/^    const char *Name;$/;"	m	struct:
Name	c_color.cpp	/^    const char *Name;$/;"	m	struct:	file:
Name	c_hilit.cpp	/^    const char *Name;$/;"	m	struct:	file:
Name	c_hilit.h	/^    char *Name;$/;"	m	class:EColorize
Name	cfte.cpp	/^    char *Name;$/;"	m	struct:	file:
Name	cfte.cpp	/^    const char *Name;$/;"	m	struct:_OrdLookup	file:
Name	console.h	/^    char *Name;$/;"	m	struct:_mItem
Name	console.h	/^    char *Name;$/;"	m	struct:_mMenu
Name	e_buffer.h	/^    char *Name;$/;"	m	struct:
Name	e_mark.h	/^    char *Name;$/;"	m	class:EMark
Name	s_direct.h	/^    char *Name() { return name; }$/;"	f	class:FileInfo
NeedsRedraw	o_list.h	/^    int NeedsUpdate, NeedsRedraw;$/;"	m	class:EList
NeedsUpdate	o_list.h	/^    int NeedsUpdate, NeedsRedraw;$/;"	m	class:EList
NewChar	e_regex.cpp	/^static RxNode *NewChar(char Ch) {$/;"	f	file:
NewCommand	c_bind.cpp	/^int NewCommand(const char *Name) {$/;"	f
NewCommand	cfte.cpp	/^int NewCommand(const char *Name) {$/;"	f
NewData	con_nt.cpp	/^    HANDLE NewData;$/;"	m	struct:	file:
NewData	con_os2.cpp	/^    HEV NewData;$/;"	m	struct:	file:
NewEscape	e_regex.cpp	/^static RxNode *NewEscape(const char **const Regexp) {$/;"	f	file:
NewItem	g_menu.cpp	/^int NewItem(int menu, const char *Name) {$/;"	f
NewMenu	g_menu.cpp	/^int NewMenu(const char *Name) {$/;"	f
NewNode	e_regex.cpp	/^static  RxNode *NewNode(int aWhat) {$/;"	f	file:
NewSet	e_regex.cpp	/^static RxNode *NewSet(const char ** const Regexp) {$/;"	f	file:
NewSubMenu	g_menu.cpp	/^int NewSubMenu(int menu, const char *Name, int submenu, int Type) {$/;"	f
NewView	i_view.cpp	/^void GxView::NewView(ExView * \/*view*\/) {$/;"	f	class:GxView
Next	c_bind.h	/^    EEventMap *Next;$/;"	m	class:EEventMap
Next	c_hilit.h	/^    EColorize *Next;$/;"	m	class:EColorize
Next	e_tags.cpp	/^    TagStack *Next;$/;"	m	struct:TagStack	file:
Next	gui.h	/^    GFrame *Prev, *Next;$/;"	m	class:GFrame
Next	gui.h	/^    GView *Next, *Prev;$/;"	m	class:GView
Next	i_oview.h	/^    ExView *Next;$/;"	m	class:ExView
Next	o_model.h	/^    EModel *Next;    \/\/ next model$/;"	m	class:EModel
Next	o_model.h	/^    EView *Next;        \/\/ next view$/;"	m	class:EView
NextChar	c_hilit.h	117;"	d
NextCmd	e_buffer.h	/^    int NextCmd, Record, Undo;$/;"	m	struct:_UndoStack
NextCommand	e_undo.cpp	/^int EBuffer::NextCommand() {$/;"	f	class:EBuffer
NextEvent	g_motif.cpp	/^TEvent NextEvent = { evNone };$/;"	v
NextEvent	g_qt.cpp	/^TEvent NextEvent = { evNone };$/;"	v
NextEvent	g_text.cpp	/^TEvent NextEvent = { 0 };$/;"	v
NextTab	e_buffer.h	48;"	d
NextView	o_model.h	/^    EView *NextView;    \/\/ next view for model$/;"	m	class:EView
NotifyDelete	o_messages.cpp	/^void EMessages::NotifyDelete(EModel *Deleting) {$/;"	f	class:EMessages
NotifyDelete	o_model.cpp	/^void EModel::NotifyDelete(EModel *Deleted) {$/;"	f	class:EModel
NotifyPipe	o_messages.cpp	/^void EMessages::NotifyPipe(int APipeId) {$/;"	f	class:EMessages
NotifyPipe	o_model.cpp	/^void EModel::NotifyPipe(int PipeId) { }$/;"	f	class:EModel
Num	c_hilit.cpp	/^    int Num;$/;"	m	struct:	file:
Num	e_buffer.h	/^    int Num;$/;"	m	struct:_UndoStack
ORD_WIN32ADDATOM	clip_pmv.cpp	28;"	d	file:
ORD_WIN32ALARM	clip_pmv.cpp	29;"	d	file:
ORD_WIN32BEGINENUMWINDOWS	clip_pmv.cpp	30;"	d	file:
ORD_WIN32BEGINPAINT	clip_pmv.cpp	31;"	d	file:
ORD_WIN32BROADCASTMSG	clip_pmv.cpp	223;"	d	file:
ORD_WIN32CALCFRAMERECT	clip_pmv.cpp	32;"	d	file:
ORD_WIN32CALLMSGFILTER	clip_pmv.cpp	227;"	d	file:
ORD_WIN32CANCELSHUTDOWN	clip_pmv.cpp	33;"	d	file:
ORD_WIN32CLOSECLIPBRD	clip_pmv.cpp	34;"	d	file:
ORD_WIN32COMPARESTRINGS	clip_pmv.cpp	35;"	d	file:
ORD_WIN32COPYACCELTABLE	clip_pmv.cpp	36;"	d	file:
ORD_WIN32COPYRECT	clip_pmv.cpp	37;"	d	file:
ORD_WIN32CPTRANSLATECHAR	clip_pmv.cpp	38;"	d	file:
ORD_WIN32CPTRANSLATESTRING	clip_pmv.cpp	39;"	d	file:
ORD_WIN32CREATEACCELTABLE	clip_pmv.cpp	40;"	d	file:
ORD_WIN32CREATEATOMTABLE	clip_pmv.cpp	41;"	d	file:
ORD_WIN32CREATECURSOR	clip_pmv.cpp	42;"	d	file:
ORD_WIN32CREATEDLG	clip_pmv.cpp	244;"	d	file:
ORD_WIN32CREATEFRAMECONTROLS	clip_pmv.cpp	228;"	d	file:
ORD_WIN32CREATEMENU	clip_pmv.cpp	229;"	d	file:
ORD_WIN32CREATEMSGQUEUE	clip_pmv.cpp	43;"	d	file:
ORD_WIN32CREATEPOINTER	clip_pmv.cpp	44;"	d	file:
ORD_WIN32CREATEPOINTERINDIRECT	clip_pmv.cpp	264;"	d	file:
ORD_WIN32CREATESTDWINDOW	clip_pmv.cpp	230;"	d	file:
ORD_WIN32CREATEWINDOW	clip_pmv.cpp	231;"	d	file:
ORD_WIN32DDEINITIATE	clip_pmv.cpp	45;"	d	file:
ORD_WIN32DDEPOSTMSG	clip_pmv.cpp	46;"	d	file:
ORD_WIN32DDERESPOND	clip_pmv.cpp	47;"	d	file:
ORD_WIN32DEFDLGPROC	clip_pmv.cpp	232;"	d	file:
ORD_WIN32DEFWINDOWPROC	clip_pmv.cpp	233;"	d	file:
ORD_WIN32DELETEATOM	clip_pmv.cpp	48;"	d	file:
ORD_WIN32DELETELIBRARY	clip_pmv.cpp	49;"	d	file:
ORD_WIN32DESTROYACCELTABLE	clip_pmv.cpp	50;"	d	file:
ORD_WIN32DESTROYATOMTABLE	clip_pmv.cpp	51;"	d	file:
ORD_WIN32DESTROYCURSOR	clip_pmv.cpp	52;"	d	file:
ORD_WIN32DESTROYMSGQUEUE	clip_pmv.cpp	53;"	d	file:
ORD_WIN32DESTROYPOINTER	clip_pmv.cpp	54;"	d	file:
ORD_WIN32DESTROYWINDOW	clip_pmv.cpp	55;"	d	file:
ORD_WIN32DISMISSDLG	clip_pmv.cpp	56;"	d	file:
ORD_WIN32DISPATCHMSG	clip_pmv.cpp	234;"	d	file:
ORD_WIN32DLGBOX	clip_pmv.cpp	245;"	d	file:
ORD_WIN32DRAWBITMAP	clip_pmv.cpp	57;"	d	file:
ORD_WIN32DRAWBORDER	clip_pmv.cpp	58;"	d	file:
ORD_WIN32DRAWPOINTER	clip_pmv.cpp	59;"	d	file:
ORD_WIN32DRAWTEXT	clip_pmv.cpp	235;"	d	file:
ORD_WIN32EMPTYCLIPBRD	clip_pmv.cpp	60;"	d	file:
ORD_WIN32ENABLEPHYSINPUT	clip_pmv.cpp	61;"	d	file:
ORD_WIN32ENABLEWINDOW	clip_pmv.cpp	62;"	d	file:
ORD_WIN32ENABLEWINDOWUPDATE	clip_pmv.cpp	63;"	d	file:
ORD_WIN32ENDENUMWINDOWS	clip_pmv.cpp	64;"	d	file:
ORD_WIN32ENDPAINT	clip_pmv.cpp	65;"	d	file:
ORD_WIN32ENUMCLIPBRDFMTS	clip_pmv.cpp	66;"	d	file:
ORD_WIN32ENUMDLGITEM	clip_pmv.cpp	67;"	d	file:
ORD_WIN32EQUALRECT	clip_pmv.cpp	68;"	d	file:
ORD_WIN32EXCLUDEUPDATEREGION	clip_pmv.cpp	69;"	d	file:
ORD_WIN32FILLRECT	clip_pmv.cpp	70;"	d	file:
ORD_WIN32FINDATOM	clip_pmv.cpp	71;"	d	file:
ORD_WIN32FLASHWINDOW	clip_pmv.cpp	72;"	d	file:
ORD_WIN32FOCUSCHANGE	clip_pmv.cpp	73;"	d	file:
ORD_WIN32FREEERRORINFO	clip_pmv.cpp	74;"	d	file:
ORD_WIN32GETCLIPPS	clip_pmv.cpp	75;"	d	file:
ORD_WIN32GETCURRENTTIME	clip_pmv.cpp	76;"	d	file:
ORD_WIN32GETDLGMSG	clip_pmv.cpp	236;"	d	file:
ORD_WIN32GETERASEPS	clip_pmv.cpp	266;"	d	file:
ORD_WIN32GETERRORINFO	clip_pmv.cpp	77;"	d	file:
ORD_WIN32GETKEYSTATE	clip_pmv.cpp	78;"	d	file:
ORD_WIN32GETLASTERROR	clip_pmv.cpp	79;"	d	file:
ORD_WIN32GETMAXPOSITION	clip_pmv.cpp	80;"	d	file:
ORD_WIN32GETMINPOSITION	clip_pmv.cpp	81;"	d	file:
ORD_WIN32GETMSG	clip_pmv.cpp	237;"	d	file:
ORD_WIN32GETNEXTWINDOW	clip_pmv.cpp	82;"	d	file:
ORD_WIN32GETPHYSKEYSTATE	clip_pmv.cpp	84;"	d	file:
ORD_WIN32GETPS	clip_pmv.cpp	83;"	d	file:
ORD_WIN32GETSCREENPS	clip_pmv.cpp	85;"	d	file:
ORD_WIN32GETSYSBITMAP	clip_pmv.cpp	86;"	d	file:
ORD_WIN32INFLATERECT	clip_pmv.cpp	88;"	d	file:
ORD_WIN32INITIALIZE	clip_pmv.cpp	89;"	d	file:
ORD_WIN32INSENDMSG	clip_pmv.cpp	87;"	d	file:
ORD_WIN32INTERSECTRECT	clip_pmv.cpp	90;"	d	file:
ORD_WIN32INVALIDATERECT	clip_pmv.cpp	91;"	d	file:
ORD_WIN32INVALIDATEREGION	clip_pmv.cpp	92;"	d	file:
ORD_WIN32INVERTRECT	clip_pmv.cpp	93;"	d	file:
ORD_WIN32ISCHILD	clip_pmv.cpp	94;"	d	file:
ORD_WIN32ISPHYSINPUTENABLED	clip_pmv.cpp	95;"	d	file:
ORD_WIN32ISRECTEMPTY	clip_pmv.cpp	96;"	d	file:
ORD_WIN32ISTHREADACTIVE	clip_pmv.cpp	97;"	d	file:
ORD_WIN32ISWINDOW	clip_pmv.cpp	98;"	d	file:
ORD_WIN32ISWINDOWENABLED	clip_pmv.cpp	99;"	d	file:
ORD_WIN32ISWINDOWSHOWING	clip_pmv.cpp	100;"	d	file:
ORD_WIN32ISWINDOWVISIBLE	clip_pmv.cpp	101;"	d	file:
ORD_WIN32LOADACCELTABLE	clip_pmv.cpp	102;"	d	file:
ORD_WIN32LOADDLG	clip_pmv.cpp	246;"	d	file:
ORD_WIN32LOADLIBRARY	clip_pmv.cpp	103;"	d	file:
ORD_WIN32LOADMENU	clip_pmv.cpp	104;"	d	file:
ORD_WIN32LOADMESSAGE	clip_pmv.cpp	105;"	d	file:
ORD_WIN32LOADPOINTER	clip_pmv.cpp	106;"	d	file:
ORD_WIN32LOADSTRING	clip_pmv.cpp	107;"	d	file:
ORD_WIN32LOCKVISREGIONS	clip_pmv.cpp	108;"	d	file:
ORD_WIN32LOCKWINDOWUPDATE	clip_pmv.cpp	109;"	d	file:
ORD_WIN32MAKEPOINTS	clip_pmv.cpp	110;"	d	file:
ORD_WIN32MAKERECT	clip_pmv.cpp	111;"	d	file:
ORD_WIN32MAPDLGPOINTS	clip_pmv.cpp	112;"	d	file:
ORD_WIN32MAPWINDOWPOINTS	clip_pmv.cpp	113;"	d	file:
ORD_WIN32MESSAGEBOX	clip_pmv.cpp	114;"	d	file:
ORD_WIN32MSGMUXSEMWAIT	clip_pmv.cpp	238;"	d	file:
ORD_WIN32MSGSEMWAIT	clip_pmv.cpp	115;"	d	file:
ORD_WIN32MULTWINDOWFROMIDS	clip_pmv.cpp	239;"	d	file:
ORD_WIN32NEXTCHAR	clip_pmv.cpp	116;"	d	file:
ORD_WIN32OFFSETRECT	clip_pmv.cpp	117;"	d	file:
ORD_WIN32OPENCLIPBRD	clip_pmv.cpp	118;"	d	file:
ORD_WIN32OPENWINDOWDC	clip_pmv.cpp	119;"	d	file:
ORD_WIN32PEEKMSG	clip_pmv.cpp	240;"	d	file:
ORD_WIN32POPUPMENU	clip_pmv.cpp	259;"	d	file:
ORD_WIN32POSTMSG	clip_pmv.cpp	241;"	d	file:
ORD_WIN32POSTQUEUEMSG	clip_pmv.cpp	224;"	d	file:
ORD_WIN32PREVCHAR	clip_pmv.cpp	120;"	d	file:
ORD_WIN32PROCESSDLG	clip_pmv.cpp	121;"	d	file:
ORD_WIN32PTINRECT	clip_pmv.cpp	122;"	d	file:
ORD_WIN32QUERYACCELTABLE	clip_pmv.cpp	123;"	d	file:
ORD_WIN32QUERYACTIVEWINDOW	clip_pmv.cpp	124;"	d	file:
ORD_WIN32QUERYANCHORBLOCK	clip_pmv.cpp	125;"	d	file:
ORD_WIN32QUERYATOMLENGTH	clip_pmv.cpp	126;"	d	file:
ORD_WIN32QUERYATOMNAME	clip_pmv.cpp	127;"	d	file:
ORD_WIN32QUERYATOMUSAGE	clip_pmv.cpp	128;"	d	file:
ORD_WIN32QUERYCAPTURE	clip_pmv.cpp	129;"	d	file:
ORD_WIN32QUERYCLASSINFO	clip_pmv.cpp	247;"	d	file:
ORD_WIN32QUERYCLASSNAME	clip_pmv.cpp	130;"	d	file:
ORD_WIN32QUERYCLASSTHUNKPROC	clip_pmv.cpp	253;"	d	file:
ORD_WIN32QUERYCLIPBRDDATA	clip_pmv.cpp	131;"	d	file:
ORD_WIN32QUERYCLIPBRDFMTINFO	clip_pmv.cpp	132;"	d	file:
ORD_WIN32QUERYCLIPBRDOWNER	clip_pmv.cpp	133;"	d	file:
ORD_WIN32QUERYCLIPBRDVIEWER	clip_pmv.cpp	134;"	d	file:
ORD_WIN32QUERYCP	clip_pmv.cpp	135;"	d	file:
ORD_WIN32QUERYCPLIST	clip_pmv.cpp	136;"	d	file:
ORD_WIN32QUERYCURSORINFO	clip_pmv.cpp	137;"	d	file:
ORD_WIN32QUERYDESKTOPBKGND	clip_pmv.cpp	258;"	d	file:
ORD_WIN32QUERYDESKTOPWINDOW	clip_pmv.cpp	138;"	d	file:
ORD_WIN32QUERYDLGITEMSHORT	clip_pmv.cpp	139;"	d	file:
ORD_WIN32QUERYDLGITEMTEXT	clip_pmv.cpp	140;"	d	file:
ORD_WIN32QUERYDLGITEMTEXTLENGTH	clip_pmv.cpp	141;"	d	file:
ORD_WIN32QUERYFOCUS	clip_pmv.cpp	142;"	d	file:
ORD_WIN32QUERYMSGPOS	clip_pmv.cpp	143;"	d	file:
ORD_WIN32QUERYMSGTIME	clip_pmv.cpp	144;"	d	file:
ORD_WIN32QUERYOBJECTWINDOW	clip_pmv.cpp	145;"	d	file:
ORD_WIN32QUERYPOINTER	clip_pmv.cpp	146;"	d	file:
ORD_WIN32QUERYPOINTERINFO	clip_pmv.cpp	147;"	d	file:
ORD_WIN32QUERYPOINTERPOS	clip_pmv.cpp	148;"	d	file:
ORD_WIN32QUERYPRESPARAM	clip_pmv.cpp	261;"	d	file:
ORD_WIN32QUERYQUEUEINFO	clip_pmv.cpp	149;"	d	file:
ORD_WIN32QUERYQUEUESTATUS	clip_pmv.cpp	150;"	d	file:
ORD_WIN32QUERYSYSCOLOR	clip_pmv.cpp	151;"	d	file:
ORD_WIN32QUERYSYSMODALWINDOW	clip_pmv.cpp	152;"	d	file:
ORD_WIN32QUERYSYSPOINTER	clip_pmv.cpp	153;"	d	file:
ORD_WIN32QUERYSYSTEMATOMTABLE	clip_pmv.cpp	155;"	d	file:
ORD_WIN32QUERYSYSVALUE	clip_pmv.cpp	154;"	d	file:
ORD_WIN32QUERYUPDATERECT	clip_pmv.cpp	156;"	d	file:
ORD_WIN32QUERYUPDATEREGION	clip_pmv.cpp	157;"	d	file:
ORD_WIN32QUERYVERSION	clip_pmv.cpp	158;"	d	file:
ORD_WIN32QUERYWINDOW	clip_pmv.cpp	159;"	d	file:
ORD_WIN32QUERYWINDOWDC	clip_pmv.cpp	160;"	d	file:
ORD_WIN32QUERYWINDOWMODEL	clip_pmv.cpp	256;"	d	file:
ORD_WIN32QUERYWINDOWPOS	clip_pmv.cpp	161;"	d	file:
ORD_WIN32QUERYWINDOWPROCESS	clip_pmv.cpp	162;"	d	file:
ORD_WIN32QUERYWINDOWPTR	clip_pmv.cpp	163;"	d	file:
ORD_WIN32QUERYWINDOWRECT	clip_pmv.cpp	164;"	d	file:
ORD_WIN32QUERYWINDOWTEXT	clip_pmv.cpp	165;"	d	file:
ORD_WIN32QUERYWINDOWTEXTLENGTH	clip_pmv.cpp	166;"	d	file:
ORD_WIN32QUERYWINDOWTHUNKPROC	clip_pmv.cpp	255;"	d	file:
ORD_WIN32QUERYWINDOWULONG	clip_pmv.cpp	167;"	d	file:
ORD_WIN32QUERYWINDOWUSHORT	clip_pmv.cpp	168;"	d	file:
ORD_WIN32REALIZEPALETTE	clip_pmv.cpp	263;"	d	file:
ORD_WIN32REGISTERCLASS	clip_pmv.cpp	248;"	d	file:
ORD_WIN32REGISTERUSERDATATYPE	clip_pmv.cpp	169;"	d	file:
ORD_WIN32REGISTERUSERMSG	clip_pmv.cpp	170;"	d	file:
ORD_WIN32RELEASEERASEPS	clip_pmv.cpp	267;"	d	file:
ORD_WIN32RELEASEHOOK	clip_pmv.cpp	249;"	d	file:
ORD_WIN32RELEASEPS	clip_pmv.cpp	171;"	d	file:
ORD_WIN32REMOVEPRESPARAM	clip_pmv.cpp	262;"	d	file:
ORD_WIN32REQUESTMUTEXSEM	clip_pmv.cpp	272;"	d	file:
ORD_WIN32SAVEWINDOWPOS	clip_pmv.cpp	265;"	d	file:
ORD_WIN32SCROLLWINDOW	clip_pmv.cpp	172;"	d	file:
ORD_WIN32SENDDLGITEMMSG	clip_pmv.cpp	225;"	d	file:
ORD_WIN32SENDMSG	clip_pmv.cpp	242;"	d	file:
ORD_WIN32SETACCELTABLE	clip_pmv.cpp	173;"	d	file:
ORD_WIN32SETACTIVEWINDOW	clip_pmv.cpp	174;"	d	file:
ORD_WIN32SETCAPTURE	clip_pmv.cpp	175;"	d	file:
ORD_WIN32SETCLASSMSGINTEREST	clip_pmv.cpp	176;"	d	file:
ORD_WIN32SETCLASSTHUNKPROC	clip_pmv.cpp	252;"	d	file:
ORD_WIN32SETCLIPBRDDATA	clip_pmv.cpp	177;"	d	file:
ORD_WIN32SETCLIPBRDOWNER	clip_pmv.cpp	178;"	d	file:
ORD_WIN32SETCLIPBRDVIEWER	clip_pmv.cpp	179;"	d	file:
ORD_WIN32SETCP	clip_pmv.cpp	180;"	d	file:
ORD_WIN32SETDESKTOPBKGND	clip_pmv.cpp	257;"	d	file:
ORD_WIN32SETDLGITEMSHORT	clip_pmv.cpp	181;"	d	file:
ORD_WIN32SETDLGITEMTEXT	clip_pmv.cpp	182;"	d	file:
ORD_WIN32SETERRORINFO	clip_pmv.cpp	270;"	d	file:
ORD_WIN32SETFOCUS	clip_pmv.cpp	183;"	d	file:
ORD_WIN32SETHOOK	clip_pmv.cpp	250;"	d	file:
ORD_WIN32SETKEYBOARDSTATETABLE	clip_pmv.cpp	243;"	d	file:
ORD_WIN32SETMSGINTEREST	clip_pmv.cpp	184;"	d	file:
ORD_WIN32SETMSGMODE	clip_pmv.cpp	185;"	d	file:
ORD_WIN32SETMULTWINDOWPOS	clip_pmv.cpp	186;"	d	file:
ORD_WIN32SETOWNER	clip_pmv.cpp	187;"	d	file:
ORD_WIN32SETPARENT	clip_pmv.cpp	188;"	d	file:
ORD_WIN32SETPOINTER	clip_pmv.cpp	189;"	d	file:
ORD_WIN32SETPOINTEROWNER	clip_pmv.cpp	268;"	d	file:
ORD_WIN32SETPOINTERPOS	clip_pmv.cpp	190;"	d	file:
ORD_WIN32SETPRESPARAM	clip_pmv.cpp	260;"	d	file:
ORD_WIN32SETRECT	clip_pmv.cpp	191;"	d	file:
ORD_WIN32SETRECTEMPTY	clip_pmv.cpp	192;"	d	file:
ORD_WIN32SETSYNCHROMODE	clip_pmv.cpp	193;"	d	file:
ORD_WIN32SETSYSCOLORS	clip_pmv.cpp	194;"	d	file:
ORD_WIN32SETSYSMODALWINDOW	clip_pmv.cpp	195;"	d	file:
ORD_WIN32SETSYSVALUE	clip_pmv.cpp	196;"	d	file:
ORD_WIN32SETWINDOWBITS	clip_pmv.cpp	197;"	d	file:
ORD_WIN32SETWINDOWPOS	clip_pmv.cpp	198;"	d	file:
ORD_WIN32SETWINDOWPTR	clip_pmv.cpp	199;"	d	file:
ORD_WIN32SETWINDOWTEXT	clip_pmv.cpp	200;"	d	file:
ORD_WIN32SETWINDOWTHUNKPROC	clip_pmv.cpp	254;"	d	file:
ORD_WIN32SETWINDOWULONG	clip_pmv.cpp	201;"	d	file:
ORD_WIN32SETWINDOWUSHORT	clip_pmv.cpp	202;"	d	file:
ORD_WIN32SHOWCURSOR	clip_pmv.cpp	203;"	d	file:
ORD_WIN32SHOWPOINTER	clip_pmv.cpp	204;"	d	file:
ORD_WIN32SHOWTRACKRECT	clip_pmv.cpp	205;"	d	file:
ORD_WIN32SHOWWINDOW	clip_pmv.cpp	206;"	d	file:
ORD_WIN32STARTTIMER	clip_pmv.cpp	207;"	d	file:
ORD_WIN32STOPTIMER	clip_pmv.cpp	208;"	d	file:
ORD_WIN32STRETCHPOINTER	clip_pmv.cpp	269;"	d	file:
ORD_WIN32SUBCLASSWINDOW	clip_pmv.cpp	251;"	d	file:
ORD_WIN32SUBSTITUTESTRINGS	clip_pmv.cpp	209;"	d	file:
ORD_WIN32SUBTRACTRECT	clip_pmv.cpp	210;"	d	file:
ORD_WIN32TERMINATE	clip_pmv.cpp	211;"	d	file:
ORD_WIN32TRACKRECT	clip_pmv.cpp	212;"	d	file:
ORD_WIN32TRANSLATEACCEL	clip_pmv.cpp	226;"	d	file:
ORD_WIN32UNIONRECT	clip_pmv.cpp	213;"	d	file:
ORD_WIN32UPDATEWINDOW	clip_pmv.cpp	214;"	d	file:
ORD_WIN32UPPER	clip_pmv.cpp	215;"	d	file:
ORD_WIN32UPPERCHAR	clip_pmv.cpp	216;"	d	file:
ORD_WIN32VALIDATERECT	clip_pmv.cpp	217;"	d	file:
ORD_WIN32VALIDATEREGION	clip_pmv.cpp	218;"	d	file:
ORD_WIN32WAITEVENTSEM	clip_pmv.cpp	271;"	d	file:
ORD_WIN32WAITMSG	clip_pmv.cpp	219;"	d	file:
ORD_WIN32WAITMUXWAITSEM	clip_pmv.cpp	273;"	d	file:
ORD_WIN32WINDOWFROMDC	clip_pmv.cpp	220;"	d	file:
ORD_WIN32WINDOWFROMID	clip_pmv.cpp	221;"	d	file:
ORD_WIN32WINDOWFROMPOINT	clip_pmv.cpp	222;"	d	file:
O_BINARY	sysdep.h	135;"	d
ObjectWndProc	g_pm.cpp	/^MRESULT EXPENTRY ObjectWndProc(HWND hwnd, ULONG msg, MPARAM mp1, MPARAM mp2) {$/;"	f
OldConsoleMode	con_nt.cpp	/^static DWORD OldConsoleMode;$/;"	v	file:
OldCount	o_list.h	/^    int OldRow, OldTopRow, OldLeftCol, OldCount;$/;"	m	class:EListPort
OldLeftCol	o_list.h	/^    int OldRow, OldTopRow, OldLeftCol, OldCount;$/;"	m	class:EListPort
OldMouseX	g_pm.cpp	/^    int OldMouseX, OldMouseY;$/;"	m	class:GViewPeer	file:
OldMouseY	g_pm.cpp	/^    int OldMouseX, OldMouseY;$/;"	m	class:GViewPeer	file:
OldRow	o_list.h	/^    int OldRow, OldTopRow, OldLeftCol, OldCount;$/;"	m	class:EListPort
OldTP	e_buffer.h	/^    EPoint TP, OldTP;$/;"	m	class:EEditPort
OldTopRow	o_list.h	/^    int OldRow, OldTopRow, OldLeftCol, OldCount;$/;"	m	class:EListPort
Open	e_regex.h	/^    int Open[NSEXPS];    \/\/ -1 = not matched$/;"	m	struct:
OpenAfterClose	c_config.cpp	/^int OpenAfterClose = 1;$/;"	v
OpenDir	view.cpp	/^int EView::OpenDir(char *Path) {$/;"	f	class:EView
OpenLogFile	log.cpp	/^bool GlobalLog::OpenLogFile()$/;"	f	class:GlobalLog
OpenPipe	con_dosx.cpp	/^int GUI::OpenPipe(char *Command, EModel *notify) {$/;"	f	class:GUI
OpenPipe	con_linux.cpp	/^int GUI::OpenPipe(char *Command, EModel *notify) {$/;"	f	class:GUI
OpenPipe	con_nt.cpp	/^int GUI::OpenPipe(char *Command, EModel *notify) {$/;"	f	class:GUI
OpenPipe	con_os2.cpp	/^int GUI::OpenPipe(char *Command, EModel *notify) {$/;"	f	class:GUI
OpenPipe	con_slang.cpp	/^int GUI::OpenPipe(char *Command, EModel * notify)$/;"	f	class:GUI
OpenPipe	con_x11.cpp	/^int GUI::OpenPipe(char *Command, EModel *notify) {$/;"	f	class:GUI
OpenPipe	g_motif.cpp	/^int GUI::OpenPipe(char *Command, EModel *notify) {$/;"	f	class:GUI
OpenPipe	g_pm.cpp	/^int GUI::OpenPipe(char *Command, EModel *notify) {$/;"	f	class:GUI
OpenPipe	g_qt.cpp	/^int GUI::OpenPipe(char *Command, EModel *notify) {$/;"	f	class:GUI
Options	gui.h	/^    unsigned long Options;$/;"	m	struct:
OrdLookup	cfte.cpp	/^} OrdLookup;$/;"	t	file:
Orig	i_complete.h	/^    EPoint Orig;$/;"	m	class:ExComplete
Orig	i_search.h	/^    EPoint Orig;$/;"	m	class:ExISearch
OurConOut	con_nt.cpp	/^static HANDLE OurConOut;$/;"	v	file:
OutputIndent	log.cpp	/^ostream& FunctionLog::OutputIndent(ostream& os)$/;"	f	class:FunctionLog
OutputLine	log.h	/^    ostream& OutputLine()$/;"	f	class:FunctionLog
OutputLine	log.h	/^    ostream& OutputLine(unsigned long line)$/;"	f	class:FunctionLog
OverrideMap	egui.h	/^    EKeyMap *OverrideMap;$/;"	m	class:EGUI
PATHTYPE	sysdep.h	167;"	d
PATHTYPE	sysdep.h	169;"	d
PAttr	console.h	/^typedef TAttr *PAttr;$/;"	t
PCLI	c_hilit.h	97;"	d
PCLI	c_hilit.h	99;"	d
PCell	console.h	/^typedef TCell *PCell;$/;"	t
PDrawBuffer	console.h	/^typedef TDrawBuffer *PDrawBuffer;$/;"	t
PELine	e_buffer.h	/^typedef class ELine* PELine;$/;"	t
PEPoint	e_buffer.h	/^typedef class EPoint* PEPoint;$/;"	t
PIPEBUF_SZ	con_nt.cpp	893;"	d	file:
PIPE_BUFLEN	con_dosx.cpp	31;"	d	file:
PIPE_BUFLEN	con_nt.cpp	1506;"	d	file:
PIPE_BUFLEN	con_nt.cpp	892;"	d	file:
PIPE_BUFLEN	con_os2.cpp	43;"	d	file:
PIPE_BUFLEN	g_pm.cpp	76;"	d	file:
PLCPUF_A	port.h	86;"	d
PLCPUF_C	port.h	84;"	d
PLCPUF_D	port.h	91;"	d
PLCPUF_I	port.h	90;"	d
PLCPUF_O	port.h	92;"	d
PLCPUF_P	port.h	85;"	d
PLCPUF_S	port.h	88;"	d
PLCPUF_T	port.h	89;"	d
PLCPUF_Z	port.h	87;"	d
PLFA_ARCH	port.h	113;"	d
PLFA_DIREC	port.h	112;"	d
PLFA_HIDDEN	port.h	109;"	d
PLFA_LABEL	port.h	111;"	d
PLFA_NORMAL	port.h	107;"	d
PLFA_RDONLY	port.h	108;"	d
PLFA_SYSTEM	port.h	110;"	d
PLKF_ALT	port.h	273;"	d
PLKF_CAPSLOCK	port.h	276;"	d
PLKF_CTRL	port.h	272;"	d
PLKF_NUMLOCK	port.h	275;"	d
PLKF_SCROLLLOCK	port.h	274;"	d
PLKF_SHIFT	port.h	271;"	d
PL_DIRECTORY	port.h	101;"	d
PL_DRIVE	port.h	102;"	d
PL_EXTENSION	port.h	99;"	d
PL_FILENAME	port.h	100;"	d
PL_LK_LOCK	port.h	147;"	d
PL_LK_NBLCK	port.h	148;"	d
PL_LK_NBRLCK	port.h	150;"	d
PL_LK_RLCK	port.h	149;"	d
PL_LK_UNLCK	port.h	146;"	d
PL_WILDCARDS	port.h	98;"	d
PMData	g_pm.cpp	/^struct PMData {$/;"	s	file:
PMDisableAccel	c_config.cpp	/^int PMDisableAccel = 0;$/;"	v
PMHideCursor	g_motif.cpp	/^int GViewPeer::PMHideCursor() {$/;"	f	class:GViewPeer
PMHideCursor	g_pm.cpp	/^int GViewPeer::PMHideCursor() {$/;"	f	class:GViewPeer
PMHideCursor	g_qt.cpp	/^int GViewPeer::PMHideCursor() {$/;"	f	class:GViewPeer
PMPTR	g_pm.cpp	/^} PMPTR;$/;"	t	file:
PMSetCursorPos	g_motif.cpp	/^int GViewPeer::PMSetCursorPos() {$/;"	f	class:GViewPeer
PMSetCursorPos	g_pm.cpp	/^int GViewPeer::PMSetCursorPos() {$/;"	f	class:GViewPeer
PMSetCursorPos	g_qt.cpp	/^int GViewPeer::PMSetCursorPos() {$/;"	f	class:GViewPeer
PMShowCursor	g_motif.cpp	/^int GViewPeer::PMShowCursor() {$/;"	f	class:GViewPeer
PMShowCursor	g_pm.cpp	/^int GViewPeer::PMShowCursor() {$/;"	f	class:GViewPeer
PMShowCursor	g_qt.cpp	/^int GViewPeer::PMShowCursor() {$/;"	f	class:GViewPeer
PM_STACK_SIZE	g_pm.cpp	50;"	d	file:
PRINTF	h_c.cpp	16;"	d	file:
PROGRAM	ftever.h	6;"	d
PROG_CFTE	ftever.h	5;"	d
PROG_FTE	ftever.h	4;"	d
PT_DOSISH	sysdep.h	151;"	d
PT_UNIXISH	sysdep.h	150;"	d
P_ASSIGN	cfte.cpp	449;"	d	file:
P_CLOSEBRACE	cfte.cpp	453;"	d	file:
P_COLON	cfte.cpp	454;"	d	file:
P_COMMA	cfte.cpp	455;"	d	file:
P_DOT	cfte.cpp	458;"	d	file:
P_EOF	cfte.cpp	444;"	d	file:
P_EOS	cfte.cpp	450;"	d	file:
P_KEYSPEC	cfte.cpp	451;"	d	file:
P_NUMBER	cfte.cpp	447;"	d	file:
P_OPENBRACE	cfte.cpp	452;"	d	file:
P_QUEST	cfte.cpp	456;"	d	file:
P_STRING	cfte.cpp	448;"	d	file:
P_SYNTAX	cfte.cpp	445;"	d	file:
P_VARIABLE	cfte.cpp	457;"	d	file:
P_WORD	cfte.cpp	446;"	d	file:
PadLine	e_buffer.cpp	/^int EBuffer::PadLine(int Row, int Length) {$/;"	f	class:EBuffer
PaintView	o_list.cpp	/^void EListPort::PaintView(int PaintAll) {$/;"	f	class:EListPort
PanedWin	g_motif.cpp	/^    Widget ShellWin, MainWin, PanedWin, MenuBar;$/;"	m	class:GFramePeer	file:
Param1	console.h	/^    long Param1;$/;"	m	struct:
Param2	console.h	/^    void *Param2;$/;"	m	struct:
Parent	c_bind.h	/^    EEventMap *Parent;$/;"	m	class:EEventMap
Parent	c_hilit.h	/^    EColorize *Parent;$/;"	m	class:EColorize
Parent	gui.h	/^    GFrame *Parent;$/;"	m	class:GView
Parse	cfte.cpp	/^int Parse(CurPos &cp) {$/;"	f
ParseCommands	cfte.cpp	/^int ParseCommands(CurPos &cp, char *Name) {$/;"	f
ParseConfigFile	cfte.cpp	/^int ParseConfigFile(CurPos &cp) {$/;"	f
ParseKey	c_bind.cpp	/^int ParseKey(const char *Key, KeySel &ks) {$/;"	f
ParseSearchOption	e_search.cpp	/^int ParseSearchOption(int replace, char c, unsigned long &opt) {$/;"	f
ParseSearchOptions	e_search.cpp	/^int ParseSearchOptions(int replace, const char *str, unsigned long &Options) {$/;"	f
ParseSearchReplace	e_search.cpp	/^int ParseSearchReplace(EBuffer *B, const char *str, int replace, SearchReplaceOptions &opt) {$/;"	f
ParseTrans	e_trans.cpp	/^int ParseTrans(unsigned char *S, unsigned char *D, TransTable tab) {$/;"	f
Path	o_directory.h	/^    char *Path;$/;"	m	class:EDirectory
Pattern	s_direct.h	/^    char *Pattern;$/;"	m	class:FileFind
Peer	g_pm.cpp	/^    GViewPeer *Peer;$/;"	m	struct:PMData	file:
Peer	gui.h	/^    GFramePeer *Peer;$/;"	m	class:GFrame
Peer	gui.h	/^    GViewPeer *Peer;$/;"	m	class:GView
Pending	con_x11.cpp	/^static TEvent Pending = { evNone };$/;"	v	file:
PickASCII	i_view.cpp	/^int GxView::PickASCII() {$/;"	f	class:GxView
PipeCallback	g_motif.cpp	/^void PipeCallback(GPipe *pipe, int *source, XtInputId *input) {$/;"	f
PipeId	o_messages.h	/^    int PipeId;$/;"	m	class:EMessages
PipeThread	con_dosx.cpp	/^static void PipeThread(void *p) {$/;"	f	file:
PipeThread	con_nt.cpp	/^static DWORD __stdcall PipeThread(void *p) {$/;"	f	file:
PipeThread	con_os2.cpp	/^static void _LNK_CONV PipeThread(void *p) {$/;"	f	file:
PipeThread	g_pm.cpp	/^static void _LNK_CONV PipeThread(void *p) {$/;"	f	file:
Pipes	con_dosx.cpp	/^static GPipe Pipes[MAX_PIPES] = {$/;"	v	file:
Pipes	con_linux.cpp	/^static GPipe Pipes[MAX_PIPES] = {$/;"	v	file:
Pipes	con_nt.cpp	/^static GPipe Pipes[MAX_PIPES] = {$/;"	v	file:
Pipes	con_os2.cpp	/^static GPipe Pipes[MAX_PIPES] = {$/;"	v	file:
Pipes	con_slang.cpp	/^static GPipe Pipes[MAX_PIPES] =$/;"	v	file:
Pipes	con_x11.cpp	/^static GPipe Pipes[MAX_PIPES] = {$/;"	v	file:
Pipes	g_motif.cpp	/^static GPipe Pipes[MAX_PIPES] = {$/;"	v	file:
Pipes	g_pm.cpp	/^static GPipe Pipes[MAX_PIPES] = {$/;"	v	file:
Pipes	g_qt.cpp	/^static GPipe Pipes[MAX_PIPES] = {$/;"	v	file:
PlaceBookmark	e_search.cpp	/^int EBuffer::PlaceBookmark(char *Name, EPoint P) {$/;"	f	class:EBuffer
PlaceBookmark	o_buffer.cpp	/^int EBuffer::PlaceBookmark(ExState &State) {$/;"	f	class:EBuffer
PlaceGlobalBookmark	o_buffer.cpp	/^int EBuffer::PlaceGlobalBookmark(ExState &State) {$/;"	f	class:EBuffer
PmInfo	clip_pmv.cpp	/^} PmInfo;$/;"	v	file:
Point	e_mark.h	/^    EPoint Point;$/;"	m	class:EMark
PopGlobalBookmark	view.cpp	/^int EView::PopGlobalBookmark() {$/;"	f	class:EView
PopView	i_view.cpp	/^ExView *GxView::PopView() {$/;"	f	class:GxView
PopupCallback	g_motif.cpp	/^void PopupCallback (Widget w, mItem *item, XtPointer callData) {$/;"	f
PopupMenu	g_motif.cpp	/^int GFrame::PopupMenu(const char *Name) {$/;"	f	class:GFrame
PopupMenu	g_pm.cpp	/^int GFrame::PopupMenu(const char *Name) {$/;"	f	class:GFrame
PopupMenu	g_qt.cpp	/^int GFrame::PopupMenu(const char *Name) {$/;"	f	class:GFrame
PopupMenu	menu_text.cpp	/^int GFrame::PopupMenu(const char *Name) {$/;"	f	class:GFrame
Port	o_model.h	/^    EViewPort *Port;$/;"	m	class:EView
Pos	c_bind.h	/^    int Pos;$/;"	m	class:ExState
Pos	i_ascii.h	/^    int Pos, LPos;$/;"	m	class:ExASCII
Pos	i_input.h	/^    unsigned int Pos;$/;"	m	class:ExInput
Prev	con_linux.cpp	/^static TEvent Prev = { evNone };$/;"	v	file:
Prev	con_slang.cpp	/^static TEvent Prev =$/;"	v	file:
Prev	gui.h	/^    GFrame *Prev, *Next;$/;"	m	class:GFrame
Prev	gui.h	/^    GView *Next, *Prev;$/;"	m	class:GView
Prev	o_model.h	/^    EModel *Prev;    \/\/ prev model$/;"	m	class:EModel
Prev	o_model.h	/^    EView *Prev;        \/\/ prev view$/;"	m	class:EView
PrevISearch	i_search.cpp	/^static char PrevISearch[MAXISEARCH] = "";$/;"	v	file:
PrevPos	e_buffer.h	/^    EPoint PrevPos;$/;"	m	class:EBuffer
PrintDevice	c_config.cpp	/^char PrintDevice[MAXPATH] = "PRN";$/;"	v
PrintDevice	c_config.cpp	/^char PrintDevice[MAXPATH] = "\\\\DEV\\\\PRN";$/;"	v
Proc	c_hilit.cpp	/^    SyntaxProc Proc;$/;"	m	struct:	file:
ProcessEvent	g_motif.cpp	/^void GUI::ProcessEvent() {$/;"	f	class:GUI
ProcessEvent	g_pm.cpp	/^void GUI::ProcessEvent() {$/;"	f	class:GUI
ProcessEvent	g_qt.cpp	/^void GUI::ProcessEvent() {$/;"	f	class:GUI
ProcessEvent	g_text.cpp	/^void GUI::ProcessEvent() {$/;"	f	class:GUI
ProcessXEvents	con_x11.cpp	/^void ProcessXEvents(TEvent *Event) {$/;"	f
ProcessXEvents	g_motif.cpp	/^void ProcessXEvents(XEvent *event, TEvent *Event, GViewPeer *Peer) {$/;"	f
Prompt	i_choice.h	/^    char Prompt[160];$/;"	m	class:ExChoice
Prompt	i_input.h	/^    char *Prompt;$/;"	m	class:ExInput
Prompt	i_key.h	/^    char *Prompt;$/;"	m	class:ExKey
PromptDlgProc	g_pm.cpp	/^MRESULT EXPENTRY PromptDlgProc(HWND hwnd, ULONG msg, MPARAM mp1, MPARAM mp2) {$/;"	f
PromptInfo	g_pm.cpp	/^} PromptInfo;$/;"	v	file:
PushBlockData	e_undo.cpp	/^int EBuffer::PushBlockData() {$/;"	f	class:EBuffer
PushGlobalBookmark	o_buffer.cpp	/^int EBuffer::PushGlobalBookmark() {$/;"	f	class:EBuffer
PushPos	e_tags.cpp	/^static int PushPos(EBuffer *B) { \/*FOLD00*\/$/;"	f	file:
PushUChar	e_undo.cpp	/^int EBuffer::PushUChar(unsigned char ch) {$/;"	f	class:EBuffer
PushUData	e_undo.cpp	/^int EBuffer::PushUData(void *data, int len) {$/;"	f	class:EBuffer
PushULong	e_undo.cpp	/^int EBuffer::PushULong(unsigned long l) {$/;"	f	class:EBuffer
PushView	i_view.cpp	/^void GxView::PushView(ExView *view) {$/;"	f	class:GxView
PutClipText	clip_pm.cpp	/^int PutClipText(ClipData *cd) {$/;"	f
PutClipText	clip_pmv.cpp	/^int PutClipText(ClipData *cd) {$/;"	f
PutClipText	clip_vio.cpp	/^int PutClipText(ClipData *cd) {$/;"	f
PutClipText	con_nt.cpp	/^int PutClipText(ClipData *cd) {$/;"	f
PutNull	cfte.cpp	/^void PutNull(CurPos &cp, int xtag) {$/;"	f
PutNumber	cfte.cpp	/^void PutNumber(CurPos &cp, int xtag, long num) {$/;"	f
PutObject	cfte.cpp	/^void PutObject(CurPos &cp, int xtag, int xlen, void *obj) {$/;"	f
PutPMClip	clip_gpm.cpp	/^int PutPMClip() {$/;"	f
PutPMClip	clip_no.cpp	/^int PutPMClip() {$/;"	f
PutPMClip	clip_os2.cpp	/^int PutPMClip() {$/;"	f
PutPMClip	clip_x11.cpp	/^int PutPMClip() {$/;"	f
PutString	cfte.cpp	/^void PutString(CurPos &cp, int xtag, char *str) {$/;"	f
QCHAR	h_perl.cpp	58;"	d	file:
QChoiceBox	g_qt_dlg.cpp	/^QChoiceBox::QChoiceBox(QWidget *parent, const char *name)$/;"	f	class:QChoiceBox
QChoiceBox	g_qt_dlg.cpp	/^class QChoiceBox : public QDialog {$/;"	c	file:
QEFrame	g_qt.cpp	/^QEFrame::QEFrame(GFramePeer *peer, QWidget *parent, const char *name): QFrame(parent, name)$/;"	f	class:QEFrame
QEFrame	g_qt.cpp	/^class QEFrame : public QFrame {$/;"	c	file:
QEText	g_qt.cpp	/^QEText::QEText(GViewPeer *peer, QWidget *parent, const char *name): QWidget(parent, name) {$/;"	f	class:QEText
QEText	g_qt.cpp	/^class QEText: public QWidget {$/;"	c	file:
QEView	g_qt.cpp	/^QEView::QEView(GViewPeer *peer, QWidget *parent, const char *name): QFrame(parent, name)$/;"	f	class:QEView
QEView	g_qt.cpp	/^class QEView: public QFrame {$/;"	c	file:
QSET	h_perl.cpp	59;"	d	file:
QuerySbVPos	g_motif.cpp	/^int GView::QuerySbVPos() {$/;"	f	class:GView
QuerySbVPos	g_motif.cpp	/^int GViewPeer::QuerySbVPos() {$/;"	f	class:GViewPeer
QuerySbVPos	g_pm.cpp	/^int GView::QuerySbVPos() {$/;"	f	class:GView
QuerySbVPos	g_pm.cpp	/^int GViewPeer::QuerySbVPos() {$/;"	f	class:GViewPeer
QuerySbVPos	g_qt.cpp	/^int GView::QuerySbVPos() {$/;"	f	class:GView
QuerySbVPos	g_qt.cpp	/^int GViewPeer::QuerySbVPos() {$/;"	f	class:GViewPeer
QuerySbVPos	g_text.cpp	/^int GView::QuerySbVPos() {$/;"	f	class:GView
QuerySbVPos	g_text.cpp	/^int GViewPeer::QuerySbVPos() {$/;"	f	class:GViewPeer
RAllocated	e_buffer.h	/^    int RAllocated;   \/\/ text line allocation$/;"	m	class:EBuffer
RC	log.cpp	/^ostream& FunctionLog::RC(unsigned long line)$/;"	f	class:FunctionLog
RCount	e_buffer.h	/^    int RCount;$/;"	m	class:EBuffer
REXX_BASE_INDENT	h_rexx.cpp	297;"	d	file:
REXX_Base_Indent	h_rexx.cpp	/^int REXX_Base_Indent = 4;$/;"	v
REXX_DO_OFFSET	h_rexx.cpp	298;"	d	file:
REXX_Do_Offset	h_rexx.cpp	/^int REXX_Do_Offset = 0;$/;"	v
RE_ANY	e_regex.h	62;"	d
RE_ATBOL	e_regex.h	54;"	d
RE_ATBOW	e_regex.h	56;"	d
RE_ATEOL	e_regex.h	55;"	d
RE_ATEOW	e_regex.h	57;"	d
RE_BRANCH	e_regex.h	80;"	d
RE_BREAK	e_regex.h	53;"	d
RE_CASE	e_regex.h	58;"	d
RE_CHAR	e_regex.h	65;"	d
RE_CLOSE	e_regex.h	77;"	d
RE_DIGIT	e_regex.h	70;"	d
RE_END	e_regex.h	60;"	d
RE_GREEDY	e_regex.h	81;"	d
RE_GROUP	e_regex.h	75;"	d
RE_INSET	e_regex.h	63;"	d
RE_JUMP	e_regex.h	52;"	d
RE_LOWER	e_regex.h	69;"	d
RE_MEM	e_regex.h	78;"	d
RE_NCASE	e_regex.h	59;"	d
RE_NDIGIT	e_regex.h	71;"	d
RE_NOTHING	e_regex.h	51;"	d
RE_NOTINSET	e_regex.h	64;"	d
RE_NWORD	e_regex.h	73;"	d
RE_NWSPACE	e_regex.h	67;"	d
RE_OPEN	e_regex.h	76;"	d
RE_UPPER	e_regex.h	68;"	d
RE_WORD	e_regex.h	72;"	d
RE_WSPACE	e_regex.h	66;"	d
RGap	e_buffer.h	/^    int RGap;$/;"	m	class:EBuffer
RLine	e_buffer.h	/^    PELine RLine(int No) {$/;"	f	class:EBuffer
RLine	e_buffer.h	/^    void RLine(int No, PELine L) {$/;"	f	class:EBuffer
RToV	e_line.cpp	/^int EBuffer::RToV(int No) {$/;"	f	class:EBuffer
RToVN	e_line.cpp	/^int EBuffer::RToVN(int No) {$/;"	f	class:EBuffer
RUN_ASYNC	gui.h	14;"	d
RUN_WAIT	gui.h	13;"	d
RValidPos	e_buffer.cpp	/^int EBuffer::RValidPos(EPoint Pos) {$/;"	f	class:EBuffer
RWBUFSIZE	e_buffer.h	34;"	d
RWBUFSIZE	e_buffer.h	36;"	d
RX_CASE	e_regex.h	85;"	d
ReCenter	o_model.h	/^    int ReCenter;$/;"	m	class:EViewPort
ReadColorize	c_config.cpp	/^int ReadColorize(CurPos &cp, EColorize *Colorize, const char *ModeName) {$/;"	f
ReadColors	c_config.cpp	/^int ReadColors(CurPos &cp, const char *ObjName) {$/;"	f
ReadCommands	c_config.cpp	/^int ReadCommands(CurPos &cp, const char *Name) {$/;"	f
ReadConfigFile	c_config.cpp	/^int ReadConfigFile(CurPos &cp) {$/;"	f
ReadConsoleEvent	con_nt.cpp	/^int ReadConsoleEvent(TEvent *E) \/*FOLD00*\/$/;"	f
ReadEventMap	c_config.cpp	/^int ReadEventMap(CurPos &cp, EEventMap *Map, const char * \/*MapName*\/) {$/;"	f
ReadHilitColors	c_config.cpp	/^int ReadHilitColors(CurPos &cp, EColorize *Colorize, const char * \/*ObjName*\/) {$/;"	f
ReadKbdEvent	con_dosx.cpp	/^int ReadKbdEvent(TEvent *Event, int Wait)$/;"	f
ReadKbdEvent	con_os2.cpp	/^int ReadKbdEvent(TEvent *Event, int Wait) {$/;"	f
ReadKeywords	c_config.cpp	/^int ReadKeywords(CurPos &cp, ColorKeywords *keywords, int color) {$/;"	f
ReadMenu	c_config.cpp	/^int ReadMenu(CurPos &cp, const char *MenuName) {$/;"	f
ReadMode	c_config.cpp	/^int ReadMode(CurPos &cp, EMode *Mode, const char * \/*ModeName*\/) {$/;"	f
ReadMouseEvent	con_dosx.cpp	/^int ReadMouseEvent(TEvent *Event, unsigned long EventMask)$/;"	f
ReadMouseEvent	con_os2.cpp	/^int ReadMouseEvent(TEvent *Event, ULONG EventMask) {$/;"	f
ReadObject	c_config.cpp	/^int ReadObject(CurPos &cp, const char *ObjName) {$/;"	f
ReadPipe	con_dosx.cpp	/^int GUI::ReadPipe(int id, void *buffer, int len) {$/;"	f	class:GUI
ReadPipe	con_linux.cpp	/^int GUI::ReadPipe(int id, void *buffer, int len) {$/;"	f	class:GUI
ReadPipe	con_nt.cpp	/^int GUI::ReadPipe(int id, void *buffer, int len) {$/;"	f	class:GUI
ReadPipe	con_os2.cpp	/^int GUI::ReadPipe(int id, void *buffer, int len) {$/;"	f	class:GUI
ReadPipe	con_slang.cpp	/^int GUI::ReadPipe(int id, void *buffer, int len)$/;"	f	class:GUI
ReadPipe	con_x11.cpp	/^int GUI::ReadPipe(int id, void *buffer, int len) {$/;"	f	class:GUI
ReadPipe	g_motif.cpp	/^int GUI::ReadPipe(int id, void *buffer, int len) {$/;"	f	class:GUI
ReadPipe	g_pm.cpp	/^int GUI::ReadPipe(int id, void *buffer, int len) {$/;"	f	class:GUI
ReadPipe	g_qt.cpp	/^int GUI::ReadPipe(int id, void *buffer, int len) {$/;"	f	class:GUI
ReadStr	i_view.cpp	/^int GxView::ReadStr(const char *Prompt, unsigned int BufLen, char *Str, Completer Comp, int Select, int HistId) {$/;"	f	class:GxView
Record	e_buffer.h	/^    int NextCmd, Record, Undo;$/;"	m	struct:_UndoStack
Redo	e_undo.cpp	/^int EBuffer::Redo() {$/;"	f	class:EBuffer
Redraw	e_redraw.cpp	/^void EBuffer::Redraw() {$/;"	f	class:EBuffer
RedrawAll	o_buffer.cpp	/^void EEditPort::RedrawAll() {$/;"	f	class:EEditPort
RedrawToEos	e_buffer.h	/^    int RedrawToEos;$/;"	m	class:EBuffer
RefFile	o_messages.cpp	/^    int RefFile;$/;"	m	struct:	file:
RefLine	o_messages.cpp	/^    int RefLine;$/;"	m	struct:	file:
RefMsg	o_messages.cpp	/^    int RefMsg;$/;"	m	struct:	file:
Refresh	con_x11.cpp	/^static int Refresh = 0;$/;"	v	file:
RefreshComplete	i_complete.cpp	/^int ExComplete::RefreshComplete()$/;"	f	class:ExComplete
RegCount	e_regex.cpp	/^static int RegCount = 0;$/;"	v	file:
RegisterToolBarClass	pm_tool.cpp	/^void RegisterToolBarClass(HAB hab) {$/;"	f
Rehilit	e_redraw.cpp	/^void EBuffer::Rehilit(int ToRow) {$/;"	f	class:EBuffer
Reload	e_loadsave.cpp	/^int EBuffer::Reload() {$/;"	f	class:EBuffer
RemoveBookmark	e_search.cpp	/^int EBuffer::RemoveBookmark(char *Name) {$/;"	f	class:EBuffer
RemoveBookmark	o_buffer.cpp	/^int EBuffer::RemoveBookmark(ExState &State) {$/;"	f	class:EBuffer
RemoveDots	s_files.cpp	/^int RemoveDots(char *Source, char *Dest) {$/;"	f
RemoveGlobalBookmark	view.cpp	/^int EView::RemoveGlobalBookmark(ExState &State) {$/;"	f	class:EView
RemoveView	g_motif.cpp	/^void GFrame::RemoveView(GView *view) {$/;"	f	class:GFrame
RemoveView	g_pm.cpp	/^void GFrame::RemoveView(GView *view) {$/;"	f	class:GFrame
RemoveView	g_qt.cpp	/^void GFrame::RemoveView(GView *view) {$/;"	f	class:GFrame
RemoveView	g_text.cpp	/^void GFrame::RemoveView(GView *view) {$/;"	f	class:GFrame
RemoveView	o_model.cpp	/^void EModel::RemoveView(EView *V) {$/;"	f	class:EModel
Repaint	g_motif.cpp	/^void GFrame::Repaint() {$/;"	f	class:GFrame
Repaint	g_motif.cpp	/^void GView::Repaint() {$/;"	f	class:GView
Repaint	g_pm.cpp	/^void GFrame::Repaint() {$/;"	f	class:GFrame
Repaint	g_pm.cpp	/^void GView::Repaint() {$/;"	f	class:GView
Repaint	g_qt.cpp	/^void GFrame::Repaint() {$/;"	f	class:GFrame
Repaint	g_qt.cpp	/^void GView::Repaint() {$/;"	f	class:GView
Repaint	g_text.cpp	/^void GFrame::Repaint() {$/;"	f	class:GFrame
Repaint	g_text.cpp	/^void GView::Repaint() {$/;"	f	class:GView
Repaint	i_oview.h	/^    void Repaint() { RepaintStatus(); RepaintView(); }$/;"	f	class:ExView
Repaint	i_view.cpp	/^void GxView::Repaint() {$/;"	f	class:GxView
RepaintStatus	i_ascii.cpp	/^void ExASCII::RepaintStatus() {$/;"	f	class:ExASCII
RepaintStatus	i_choice.cpp	/^void ExChoice::RepaintStatus() {$/;"	f	class:ExChoice
RepaintStatus	i_complete.cpp	/^void ExComplete::RepaintStatus()$/;"	f	class:ExComplete
RepaintStatus	i_input.cpp	/^void ExInput::RepaintStatus() {$/;"	f	class:ExInput
RepaintStatus	i_key.cpp	/^void ExKey::RepaintStatus() {$/;"	f	class:ExKey
RepaintStatus	i_modelview.cpp	/^void ExModelView::RepaintStatus() {$/;"	f	class:ExModelView
RepaintStatus	i_oview.cpp	/^void ExView::RepaintStatus() {$/;"	f	class:ExView
RepaintStatus	i_search.cpp	/^void ExISearch::RepaintStatus() {$/;"	f	class:ExISearch
RepaintStatus	o_buffer.cpp	/^void EEditPort::RepaintStatus() {$/;"	f	class:EEditPort
RepaintStatus	o_list.cpp	/^void EListPort::RepaintStatus() {$/;"	f	class:EListPort
RepaintStatus	o_model.cpp	/^void EViewPort::RepaintStatus() { }$/;"	f	class:EViewPort
RepaintStatus	view.cpp	/^void EView::RepaintStatus() {$/;"	f	class:EView
RepaintView	i_ascii.cpp	/^void ExASCII::RepaintView() {$/;"	f	class:ExASCII
RepaintView	i_choice.cpp	/^void ExChoice::RepaintView() {$/;"	f	class:ExChoice
RepaintView	i_complete.cpp	/^void ExComplete::RepaintView()$/;"	f	class:ExComplete
RepaintView	i_input.cpp	/^void ExInput::RepaintView() {$/;"	f	class:ExInput
RepaintView	i_key.cpp	/^void ExKey::RepaintView() {$/;"	f	class:ExKey
RepaintView	i_modelview.cpp	/^void ExModelView::RepaintView() {$/;"	f	class:ExModelView
RepaintView	i_oview.cpp	/^void ExView::RepaintView() {$/;"	f	class:ExView
RepaintView	i_search.cpp	/^void ExISearch::RepaintView() {$/;"	f	class:ExISearch
RepaintView	o_buffer.cpp	/^void EEditPort::RepaintView() {$/;"	f	class:EEditPort
RepaintView	o_list.cpp	/^void EListPort::RepaintView() {$/;"	f	class:EListPort
RepaintView	o_model.cpp	/^void EViewPort::RepaintView() { }$/;"	f	class:EViewPort
RepaintView	view.cpp	/^void EView::RepaintView() {$/;"	f	class:EView
Replace	c_bind.h	/^    char *Replace;$/;"	m	class:EAbbrev
ReplaceDlg	g_pm.cpp	/^static int ReplaceDlg = 0;$/;"	v	file:
RescanDir	o_directory.cpp	/^int EDirectory::RescanDir() {$/;"	f	class:EDirectory
RescanList	o_directory.cpp	/^void EDirectory::RescanList() {$/;"	f	class:EDirectory
RescanList	o_list.cpp	/^void EList::RescanList() {}$/;"	f	class:EList
RescanList	o_routine.cpp	/^void RoutineView::RescanList() {$/;"	f	class:RoutineView
Resize	g_motif.cpp	/^void GFrame::Resize(int width, int height) {$/;"	f	class:GFrame
Resize	g_motif.cpp	/^void GView::Resize(int width, int height) {$/;"	f	class:GView
Resize	g_pm.cpp	/^void GFrame::Resize(int width, int height) {$/;"	f	class:GFrame
Resize	g_pm.cpp	/^void GView::Resize(int width, int height) {$/;"	f	class:GView
Resize	g_qt.cpp	/^void GFrame::Resize(int width, int height) {$/;"	f	class:GFrame
Resize	g_qt.cpp	/^void GView::Resize(int width, int height) {$/;"	f	class:GView
Resize	g_text.cpp	/^void GFrame::Resize(int width, int height) {$/;"	f	class:GFrame
Resize	g_text.cpp	/^void GView::Resize(int \/*width*\/, int \/*height*\/) {$/;"	f	class:GView
Resize	i_modelview.cpp	/^void ExModelView::Resize(int width, int height) {$/;"	f	class:ExModelView
Resize	i_oview.cpp	/^void ExView::Resize(int \/*width*\/, int \/*height*\/) {$/;"	f	class:ExView
Resize	i_view.cpp	/^void GxView::Resize(int width, int height) {$/;"	f	class:GxView
Resize	o_buffer.cpp	/^void EEditPort::Resize(int Width, int Height) {$/;"	f	class:EEditPort
Resize	o_model.cpp	/^void EViewPort::Resize(int Width, int Height) {}$/;"	f	class:EViewPort
Resize	view.cpp	/^void EView::Resize(int Width, int Height) {$/;"	f	class:EView
ResizeWindow	con_x11.cpp	/^void ResizeWindow(int ww, int hh) {$/;"	f
RestoreScreen	con_dosx.cpp	/^int RestoreScreen() {$/;"	f
RestoreScreen	con_linux.cpp	/^int RestoreScreen() {$/;"	f
RestoreScreen	con_nt.cpp	/^int RestoreScreen() { \/*FOLD00*\/$/;"	f
RestoreScreen	con_os2.cpp	/^int RestoreScreen() {$/;"	f
Result	gui.h	/^    int Result;$/;"	m	class:GView
ResumeRead	con_nt.cpp	/^    HANDLE ResumeRead;$/;"	m	struct:	file:
ResumeRead	con_os2.cpp	/^    HEV ResumeRead;$/;"	m	struct:	file:
ResumeRead	g_pm.cpp	/^    HEV ResumeRead;$/;"	m	struct:	file:
RetCode	con_nt.cpp	/^    DWORD RetCode;$/;"	m	struct:	file:
RetCode	con_os2.cpp	/^    int RetCode;$/;"	m	struct:	file:
RetCode	g_pm.cpp	/^    int RetCode;$/;"	m	struct:	file:
RetrieveFPos	c_history.cpp	/^int RetrieveFPos(char *FileName, int &Row, int &Col) { \/*FOLD00*\/$/;"	f
ReturnCode	o_messages.h	/^    int ReturnCode;$/;"	m	class:EMessages
Root	o_model.h	/^    EModel **Root;   \/\/ root ptr of this list$/;"	m	class:EModel
RoutineList	e_buffer.h	/^} RoutineList;$/;"	t
RoutineView	o_routine.cpp	/^RoutineView::RoutineView(int createFlags, EModel **ARoot, EBuffer *AB): EList(createFlags, ARoot, "Routines") {$/;"	f	class:RoutineView
RoutineView	o_routine.h	/^class RoutineView: public EList {$/;"	c
Routines	e_buffer.h	/^    RoutineView *Routines;$/;"	m	class:EBuffer
Row	c_history.h	/^    int Row, Col;$/;"	m	struct:
Row	e_buffer.h	/^    int Row;$/;"	m	class:EPoint
Row	o_list.h	/^    int Row, LeftCol, TopRow, Count;$/;"	m	class:EList
Row	o_list.h	/^    int Row, TopRow, LeftCol;$/;"	m	class:EListPort
Rows	e_buffer.h	/^    int Rows, Cols;$/;"	m	class:EEditPort
Run	g_motif.cpp	/^int GUI::Run() {$/;"	f	class:GUI
Run	g_pm.cpp	/^int GUI::Run() {$/;"	f	class:GUI
Run	g_qt.cpp	/^int GUI::Run() {$/;"	f	class:GUI
Run	g_text.cpp	/^int GUI::Run() {$/;"	f	class:GUI
RunCompiler	view.cpp	/^int EView::RunCompiler(ExState &State) {$/;"	f	class:EView
RunPipe	o_messages.cpp	/^int EMessages::RunPipe(char *ADir, char *ACommand) {$/;"	f	class:EMessages
RunProgram	con_dosx.cpp	/^int GUI::RunProgram(int mode, char *Command) {$/;"	f	class:GUI
RunProgram	con_linux.cpp	/^int GUI::RunProgram(int mode, char *Command) {$/;"	f	class:GUI
RunProgram	con_nt.cpp	/^int GUI::RunProgram(int mode, char *Command) { \/*FOLD00*\/$/;"	f	class:GUI
RunProgram	con_os2.cpp	/^int GUI::RunProgram(int mode, char *Command) {$/;"	f	class:GUI
RunProgram	con_slang.cpp	/^int GUI::RunProgram(int \/*mode *\/ , char *Command)$/;"	f	class:GUI
RunProgram	con_x11.cpp	/^int GUI::RunProgram(int mode, char *Command) {$/;"	f	class:GUI
RunProgram	egui.cpp	/^int EGUI::RunProgram(ExState &State, GxView *view) {$/;"	f	class:EGUI
RunProgram	g_motif.cpp	/^int GUI::RunProgram(int mode, char *Command) {$/;"	f	class:GUI
RunProgram	g_pm.cpp	/^int GUI::RunProgram(int mode, char *Command) {$/;"	f	class:GUI
RunProgram	g_qt.cpp	/^int GUI::RunProgram(char *Command) {$/;"	f	class:GUI
RunProgramAsync	egui.cpp	/^int EGUI::RunProgramAsync(ExState &State, GxView *view) {$/;"	f	class:EGUI
Running	o_messages.h	/^    int Running;$/;"	m	class:EMessages
RxComp	e_regex.cpp	/^static RxNode *RxComp(const char **const Regexp) {$/;"	f	file:
RxCompile	e_regex.cpp	/^RxNode *RxCompile(const char *Regexp) {$/;"	f
RxDump	e_regex.cpp	/^static void RxDump(int N, RxNode *n) {$/;"	f	file:
RxExec	e_regex.cpp	/^int RxExec(RxNode *Regexp, const char *Data, int Len, const char *Start, RxMatchRes *Match, unsigned int RxOpt) {$/;"	f
RxFree	e_regex.cpp	/^void RxFree(RxNode *n) {$/;"	f
RxMatch	e_regex.cpp	/^int RxMatch(RxNode *rx) {$/;"	f
RxMatchRes	e_regex.h	/^} RxMatchRes;$/;"	t
RxNode	e_regex.h	/^typedef struct _RxNode RxNode;$/;"	t
RxOptimize	e_regex.cpp	/^RxNode *RxOptimize(RxNode *rx) {$/;"	f
RxReplace	e_regex.cpp	/^int RxReplace(const char *rep, const char *Src, int \/*len*\/, RxMatchRes match, char **Dest, int *Dlen) {$/;"	f
RxTry	e_regex.cpp	/^int RxTry(RxNode *rx, const char *s) {$/;"	f
SCROLLBAR_SIZE	g_qt.cpp	44;"	d	file:
SDOT	s_files.h	13;"	d
SEARCH_ALL	gui.h	184;"	d
SEARCH_BACK	gui.h	177;"	d
SEARCH_BLOCK	gui.h	181;"	d
SEARCH_CENTER	gui.h	188;"	d
SEARCH_DELETE	gui.h	187;"	d
SEARCH_GLOBAL	gui.h	180;"	d
SEARCH_JOIN	gui.h	186;"	d
SEARCH_NASK	gui.h	183;"	d
SEARCH_NCASE	gui.h	179;"	d
SEARCH_NEXT	gui.h	182;"	d
SEARCH_NOPOS	gui.h	189;"	d
SEARCH_RE	gui.h	178;"	d
SEARCH_REPLACE	gui.h	185;"	d
SEARCH_WORD	gui.h	192;"	d
SEARCH_WORDBEG	gui.h	190;"	d
SEARCH_WORDEND	gui.h	191;"	d
SEM_PREFIX	clip_vio.cpp	20;"	d	file:
SEM_PREFIX	clipprog.cpp	19;"	d	file:
SEM_PREFIX	clipserv.cpp	19;"	d	file:
SETOP	e_regex.cpp	129;"	d	file:
SKIP_BACK	h_c.cpp	821;"	d	file:
SKIP_FORWARD	h_c.cpp	820;"	d	file:
SKIP_LINE	h_c.cpp	823;"	d	file:
SKIP_MATCH	h_c.cpp	822;"	d	file:
SKIP_TOBOL	h_c.cpp	824;"	d	file:
SLASH	s_files.h	16;"	d
SLASH	s_files.h	25;"	d
SLASH	s_files.h	28;"	d
SLPos	i_ascii.cpp	/^static int SLPos = 0;$/;"	v	file:
SOpt	i_choice.h	/^    char *SOpt[10];$/;"	m	class:ExChoice
SPos	i_ascii.cpp	/^static int SPos = 0;$/;"	v	file:
SSBuffer	e_buffer.cpp	/^EBuffer *SSBuffer = 0; \/\/ scrap buffer (clipboard)$/;"	v
SSLASH	s_files.h	17;"	d
SSLASH	s_files.h	26;"	d
SSLASH	s_files.h	29;"	d
STARTFUNC	log.h	186;"	d
STARTFUNC	log.h	293;"	d
STATE_NOCASE	c_mode.h	245;"	d
STATE_NOGRAB	c_mode.h	247;"	d
STATE_TAGASNEXT	c_mode.h	246;"	d
STRCOMPLETE	i_complete.cpp	14;"	d	file:
STRNOCOMPLETE	i_complete.cpp	15;"	d	file:
SUBMENU_CONDITIONAL	console.h	140;"	d
SUBMENU_NORMAL	console.h	139;"	d
SYSCALL	e_unix.cpp	42;"	d	file:
S_BOLD	s_util.h	17;"	d
S_BUSY	s_util.h	15;"	d
S_ERROR	s_util.h	18;"	d
S_INFO	s_util.h	16;"	d
S_ISDIR	sysdep.h	155;"	d
S_ISDIR	sysdep.h	157;"	d
S_IWGRP	sysdep.h	162;"	d
S_IWOTH	sysdep.h	163;"	d
Save	e_loadsave.cpp	/^int EBuffer::Save() {$/;"	f	class:EBuffer
SaveCursorPosX	con_dosx.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SaveCursorPosX	con_linux.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SaveCursorPosX	con_nt.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SaveCursorPosX	con_os2.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SaveCursorPosY	con_dosx.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SaveCursorPosY	con_linux.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SaveCursorPosY	con_nt.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SaveCursorPosY	con_os2.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SaveDesktop	c_desktop.cpp	/^int SaveDesktop(char *FileName) {$/;"	f
SaveDesktopOnExit	c_config.cpp	/^int SaveDesktopOnExit = 0;$/;"	v
SaveHistory	c_history.cpp	/^int SaveHistory(char *FileName) { \/*FOLD00*\/$/;"	f
SaveKbdState	con_os2.cpp	/^static KBDINFO SaveKbdState;$/;"	v	file:
SavePos	e_cmds.cpp	/^int EBuffer::SavePos() {$/;"	f	class:EBuffer
SaveScreen	con_dosx.cpp	/^int SaveScreen() {$/;"	f
SaveScreen	con_linux.cpp	/^int SaveScreen() {$/;"	f
SaveScreen	con_nt.cpp	/^int SaveScreen() { \/*FOLD00*\/$/;"	f
SaveScreen	con_os2.cpp	/^int SaveScreen() {$/;"	f
SaveTo	e_loadsave.cpp	/^int EBuffer::SaveTo(char *AFileName) {$/;"	f	class:EBuffer
Save_termios	con_linux.cpp	/^struct termios Save_termios;$/;"	v
SavedPos	e_buffer.h	/^    EPoint SavedPos;$/;"	m	class:EBuffer
SavedScreen	con_dosx.cpp	/^static PCell SavedScreen = 0;$/;"	v	file:
SavedScreen	con_linux.cpp	/^SavedScreen = 0;$/;"	v	file:
SavedScreen	con_nt.cpp	/^static PCell SavedScreen = 0;$/;"	v	file:
SavedScreen	con_os2.cpp	/^static PCell SavedScreen = 0;$/;"	v	file:
SavedX	con_dosx.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SavedX	con_linux.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SavedX	con_nt.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SavedX	con_os2.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SavedY	con_dosx.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SavedY	con_linux.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SavedY	con_nt.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SavedY	con_os2.cpp	/^static int SavedX, SavedY, SaveCursorPosX, SaveCursorPosY;$/;"	v	file:
SbHBegin	g_text.cpp	/^    int SbVBegin, SbVEnd, SbHBegin, SbHEnd;$/;"	m	class:GViewPeer	file:
SbHEnd	g_text.cpp	/^    int SbVBegin, SbVEnd, SbHBegin, SbHEnd;$/;"	m	class:GViewPeer	file:
SbHorz	g_motif.cpp	/^    Widget SbHorz, SbVert;$/;"	m	class:GViewPeer	file:
SbVBegin	g_text.cpp	/^    int SbVBegin, SbVEnd, SbHBegin, SbHEnd;$/;"	m	class:GViewPeer	file:
SbVEnd	g_text.cpp	/^    int SbVBegin, SbVEnd, SbHBegin, SbHEnd;$/;"	m	class:GViewPeer	file:
SbVert	g_motif.cpp	/^    Widget SbHorz, SbVert;$/;"	m	class:GViewPeer	file:
ScanCode	con_dosx.cpp	/^	int ScanCode;$/;"	m	struct:	file:
ScanCode	con_os2.cpp	/^    int ScanCode;$/;"	m	struct:	file:
ScanForRoutines	e_search.cpp	/^int EBuffer::ScanForRoutines() {$/;"	f	class:EBuffer
ScreenBuffer	con_x11.cpp	/^static unsigned char *ScreenBuffer = NULL;$/;"	v	file:
ScreenBuffer	g_motif.cpp	/^    unsigned char *ScreenBuffer;$/;"	m	class:GViewPeer	file:
ScreenBuffer	g_qt.cpp	/^    unsigned char *ScreenBuffer;$/;"	m	class:GViewPeer	file:
ScreenCols	con_x11.cpp	/^static unsigned int ScreenCols = 80;$/;"	v	file:
ScreenPos	e_line.cpp	/^int EBuffer::ScreenPos(ELine *L, int Offset) {$/;"	f	class:EBuffer
ScreenRows	con_x11.cpp	/^static unsigned int ScreenRows = 40;$/;"	v	file:
ScreenSizeX	c_config.cpp	/^int ScreenSizeX = -1, ScreenSizeY = -1;$/;"	v
ScreenSizeY	c_config.cpp	/^int ScreenSizeX = -1, ScreenSizeY = -1;$/;"	v
ScrollBarWidth	c_config.cpp	/^int ScrollBarWidth = 1;$/;"	v
ScrollBorderX	c_config.cpp	/^int ScrollBorderX = 0;$/;"	v
ScrollBorderY	c_config.cpp	/^int ScrollBorderY = 0;$/;"	v
ScrollDown	e_cmds.cpp	/^int EBuffer::ScrollDown(int Lines) {$/;"	f	class:EBuffer
ScrollDown	o_buffer.cpp	/^int EBuffer::ScrollDown(ExState &State) {$/;"	f	class:EBuffer
ScrollDown	o_list.cpp	/^int EList::ScrollDown(int Rows) {$/;"	f	class:EList
ScrollJumpX	c_config.cpp	/^int ScrollJumpX = 8;$/;"	v
ScrollJumpY	c_config.cpp	/^int ScrollJumpY = 1;$/;"	v
ScrollLeft	e_cmds.cpp	/^int EBuffer::ScrollLeft(int Cols) {$/;"	f	class:EBuffer
ScrollLeft	o_buffer.cpp	/^int EBuffer::ScrollLeft(ExState &State) {$/;"	f	class:EBuffer
ScrollLeft	o_list.cpp	/^int EList::ScrollLeft(int Cols) {$/;"	f	class:EList
ScrollRight	e_cmds.cpp	/^int EBuffer::ScrollRight(int Cols) {  $/;"	f	class:EBuffer
ScrollRight	o_buffer.cpp	/^int EBuffer::ScrollRight(ExState &State) {$/;"	f	class:EBuffer
ScrollRight	o_list.cpp	/^int EList::ScrollRight(int Cols) {$/;"	f	class:EList
ScrollUp	e_cmds.cpp	/^int EBuffer::ScrollUp(int Lines) {$/;"	f	class:EBuffer
ScrollUp	o_buffer.cpp	/^int EBuffer::ScrollUp(ExState &State) {$/;"	f	class:EBuffer
ScrollUp	o_list.cpp	/^int EList::ScrollUp(int Rows) {$/;"	f	class:EList
ScrollWin	g_motif.cpp	/^    Widget ScrollWin;$/;"	m	class:GViewPeer	file:
ScrollY	o_buffer.cpp	/^void EEditPort::ScrollY(int Delta) {$/;"	f	class:EEditPort
Search	e_search.cpp	/^int EBuffer::Search(ExState &State)          { return Search(State, 0, 0, 1); }$/;"	f	class:EBuffer
Search	e_search.cpp	/^int EBuffer::Search(ExState &State, char *aString, int Options, int \/*CanResume*\/) {$/;"	f	class:EBuffer
SearchAgain	e_search.cpp	/^int EBuffer::SearchAgain(ExState &State)     { return SearchAgain(State, 0); }$/;"	f	class:EBuffer
SearchAgain	e_search.cpp	/^int EBuffer::SearchAgain(ExState &\/*State*\/, unsigned int Options) {$/;"	f	class:EBuffer
SearchAgainB	e_search.cpp	/^int EBuffer::SearchAgainB(ExState &State)    { return SearchAgain(State, SEARCH_BACK); }$/;"	f	class:EBuffer
SearchB	e_search.cpp	/^int EBuffer::SearchB(ExState &State)         { return Search(State, 0, SEARCH_BACK, 1); }$/;"	f	class:EBuffer
SearchBackContext	h_rexx.cpp	/^static int SearchBackContext(EBuffer *B, int Row, char &ChFind) {$/;"	f	file:
SearchBackMatch	h_c.cpp	/^static int SearchBackMatch(int Count, EBuffer *B, int Row, hsState State, const char *Open, const char *Close, int *OPos, int *OLine, int matchparens = 0, int bolOnly = 0) {$/;"	f	file:
SearchLen	o_directory.h	/^    int SearchLen;$/;"	m	class:EDirectory
SearchMatch	h_rexx.cpp	/^static int SearchMatch(int Count, EBuffer *B, int Row, int Ctx) {$/;"	f	file:
SearchName	o_directory.h	/^    char SearchName[MAXISEARCH];$/;"	m	class:EDirectory
SearchOpt	g_pm.cpp	/^static SearchReplaceOptions SearchOpt;$/;"	v	file:
SearchPos	o_directory.h	/^    int SearchPos[MAXISEARCH];$/;"	m	class:EDirectory
SearchReplace	e_search.cpp	/^int EBuffer::SearchReplace(ExState &State)   { return SearchReplace(State, 0, 0, 0); }$/;"	f	class:EBuffer
SearchReplace	e_search.cpp	/^int EBuffer::SearchReplace(ExState &State, char *aString, char *aReplaceString, int Options) {$/;"	f	class:EBuffer
SearchReplaceB	e_search.cpp	/^int EBuffer::SearchReplaceB(ExState &State)  { return SearchReplace(State, 0, 0, SEARCH_BACK); }$/;"	f	class:EBuffer
SearchReplaceOptions	gui.h	/^} SearchReplaceOptions;$/;"	t
SearchReplaceRx	e_search.cpp	/^int EBuffer::SearchReplaceRx(ExState &State) { return SearchReplace(State, 0, 0, SEARCH_RE); }$/;"	f	class:EBuffer
SearchRx	e_search.cpp	/^int EBuffer::SearchRx(ExState &State)        { return Search(State, 0, SEARCH_RE, 1); }$/;"	f	class:EBuffer
SearchWord	e_search.cpp	/^int EBuffer::SearchWord(int SearchFlags) {$/;"	f	class:EBuffer
SelEnd	i_input.h	/^    unsigned int SelEnd;$/;"	m	class:ExInput
SelStart	i_input.h	/^    unsigned int SelStart;$/;"	m	class:ExInput
SelectModel	view.cpp	/^void EView::SelectModel(EModel *AModel) {$/;"	f	class:EView
SelectNext	g_motif.cpp	/^void GFrame::SelectNext(int back) {$/;"	f	class:GFrame
SelectNext	g_pm.cpp	/^void GFrame::SelectNext(int back) {$/;"	f	class:GFrame
SelectNext	g_qt.cpp	/^void GFrame::SelectNext(int back) {$/;"	f	class:GFrame
SelectNext	g_text.cpp	/^void GFrame::SelectNext(int back) {$/;"	f	class:GFrame
SelectPathname	c_config.cpp	/^int SelectPathname = 0;$/;"	v
SelectView	g_motif.cpp	/^int GFrame::SelectView(GView *view) {$/;"	f	class:GFrame
SelectView	g_pm.cpp	/^int GFrame::SelectView(GView *view) {$/;"	f	class:GFrame
SelectView	g_qt.cpp	/^int GFrame::SelectView(GView *view) {$/;"	f	class:GFrame
SelectView	g_text.cpp	/^int GFrame::SelectView(GView *view) {$/;"	f	class:GFrame
SelectView	o_model.cpp	/^void EModel::SelectView(EView *V) {$/;"	f	class:EModel
SelfInsert	o_buffer.cpp	/^int EBuffer::SelfInsert(ExState &\/*State*\/) {$/;"	f	class:EBuffer
SepRChr	s_files.cpp	/^char *SepRChr(char *Dir)$/;"	f
SetBB	e_block.cpp	/^int EBuffer::SetBB(EPoint M) {$/;"	f	class:EBuffer
SetBE	e_block.cpp	/^int EBuffer::SetBE(EPoint M) {$/;"	f	class:EBuffer
SetCIndentStyle	h_c.cpp	/^int EBuffer::SetCIndentStyle(ExState &State) {$/;"	f	class:EBuffer
SetColor	c_color.cpp	/^int SetColor(const char *ColorV, const char *Value) {$/;"	f
SetColor	c_hilit.cpp	/^int EColorize::SetColor(int idx, const char *Value) {$/;"	f	class:EColorize
SetColor	con_x11.cpp	/^static void SetColor(int i) {$/;"	f	file:
SetColor	g_motif.cpp	/^static void SetColor(int i) {$/;"	f	file:
SetColorizeString	c_config.cpp	/^int SetColorizeString(EColorize *Colorize, long what, const char *string) {$/;"	f
SetDefaultDirectory	commands.cpp	/^int SetDefaultDirectory(EModel *M) {$/;"	f
SetDrive	s_files.cpp	/^static int SetDrive(int drive) { \/\/ 1 = A, 2 = B, 3 = C, ...$/;"	f	file:
SetEventString	c_config.cpp	/^int SetEventString(EEventMap *Map, long what, const char *string) {$/;"	f
SetFileName	e_buffer.cpp	/^int EBuffer::SetFileName(const char *AFileName, const char *AMode) {$/;"	f	class:EBuffer
SetGlobalNumber	c_config.cpp	/^int SetGlobalNumber(int what, int number) {$/;"	f
SetGlobalString	c_config.cpp	/^int SetGlobalString(long what, const char *string) {$/;"	f
SetIndentWithTabs	o_buffer.cpp	/^int EBuffer::SetIndentWithTabs(ExState &State) {$/;"	f	class:EBuffer
SetKey	c_bind.cpp	/^EKey *SetKey(EEventMap *aMap, const char *aKey) {$/;"	f
SetLeftMargin	e_cmds.cpp	/^int EBuffer::SetLeftMargin() {$/;"	f	class:EBuffer
SetLogFile	log.h	/^    void SetLogFile(char const* strNewLogFile)$/;"	f	class:GlobalLog
SetMap	egui.cpp	/^void EGUI::SetMap(EKeyMap *aMap, KeySel *ks) {$/;"	f	class:EGUI
SetMenu	c_bind.cpp	/^void EEventMap::SetMenu(int which, const char *What) {$/;"	f	class:EEventMap
SetMenu	g_motif.cpp	/^int GFrame::SetMenu(const char *Name) {$/;"	f	class:GFrame
SetMenu	g_pm.cpp	/^int GFrame::SetMenu(const char *Name) {$/;"	f	class:GFrame
SetMenu	g_qt.cpp	/^int GFrame::SetMenu(const char *Name) {$/;"	f	class:GFrame
SetMenu	g_text.cpp	/^int GFrame::SetMenu(const char *Name) {$/;"	f	class:GFrame
SetModeNumber	c_config.cpp	/^int SetModeNumber(EMode *mode, int what, int number) {$/;"	f
SetModeString	c_config.cpp	/^int SetModeString(EMode *mode, int what, const char *string) {$/;"	f
SetModel	view.cpp	/^void EView::SetModel(EModel *AModel) {$/;"	f	class:EView
SetMsg	egui.cpp	/^void EGUI::SetMsg(char *Msg) {$/;"	f	class:EGUI
SetMsg	view.cpp	/^void EView::SetMsg(char *Msg) {$/;"	f	class:EView
SetNearPos	e_buffer.cpp	/^int EBuffer::SetNearPos(int Col, int Row, int tabMode) {$/;"	f	class:EBuffer
SetNearPosR	e_buffer.cpp	/^int EBuffer::SetNearPosR(int Col, int Row, int tabMode) {$/;"	f	class:EBuffer
SetOverrideMap	egui.cpp	/^void EGUI::SetOverrideMap(EKeyMap *aMap, char *ModeName) {$/;"	f	class:EGUI
SetPipeView	con_dosx.cpp	/^int GUI::SetPipeView(int id, EModel *notify) {$/;"	f	class:GUI
SetPipeView	con_linux.cpp	/^int GUI::SetPipeView(int id, EModel *notify) {$/;"	f	class:GUI
SetPipeView	con_nt.cpp	/^int GUI::SetPipeView(int id, EModel *notify) {$/;"	f	class:GUI
SetPipeView	con_os2.cpp	/^int GUI::SetPipeView(int id, EModel *notify) {$/;"	f	class:GUI
SetPipeView	con_slang.cpp	/^int GUI::SetPipeView(int id, EModel * notify)$/;"	f	class:GUI
SetPipeView	con_x11.cpp	/^int GUI::SetPipeView(int id, EModel *notify) {$/;"	f	class:GUI
SetPipeView	g_motif.cpp	/^int GUI::SetPipeView(int id, EModel *notify) {$/;"	f	class:GUI
SetPipeView	g_pm.cpp	/^int GUI::SetPipeView(int id, EModel *notify) {$/;"	f	class:GUI
SetPipeView	g_qt.cpp	/^int GUI::SetPipeView(int id, EModel *notify) {$/;"	f	class:GUI
SetPos	e_buffer.cpp	/^int EBuffer::SetPos(int Col, int Row, int tabMode) {$/;"	f	class:EBuffer
SetPos	o_list.cpp	/^int EList::SetPos(int ARow, int ACol) {$/;"	f	class:EList
SetPosR	e_buffer.cpp	/^int EBuffer::SetPosR(int Col, int Row, int tabMode) {$/;"	f	class:EBuffer
SetPrintDevice	view.cpp	/^int EView::SetPrintDevice(ExState &State) {$/;"	f	class:EView
SetRightMargin	e_cmds.cpp	/^int EBuffer::SetRightMargin() {$/;"	f	class:EBuffer
SetSbHPos	g_motif.cpp	/^int GView::SetSbHPos(int Start, int Amount, int Total) {$/;"	f	class:GView
SetSbHPos	g_motif.cpp	/^int GViewPeer::SetSbHPos(int Start, int Amount, int Total) {$/;"	f	class:GViewPeer
SetSbHPos	g_pm.cpp	/^int GView::SetSbHPos(int Start, int Amount, int Total) {$/;"	f	class:GView
SetSbHPos	g_pm.cpp	/^int GViewPeer::SetSbHPos(int Start, int Amount, int Total) {$/;"	f	class:GViewPeer
SetSbHPos	g_qt.cpp	/^int GView::SetSbHPos(int Start, int Amount, int Total) {$/;"	f	class:GView
SetSbHPos	g_qt.cpp	/^int GViewPeer::SetSbHPos(int Start, int Amount, int Total) {$/;"	f	class:GViewPeer
SetSbHPos	g_text.cpp	/^int GView::SetSbHPos(int Start, int Amount, int Total) {$/;"	f	class:GView
SetSbHPos	g_text.cpp	/^int GViewPeer::SetSbHPos(int Start, int Amount, int Total) {$/;"	f	class:GViewPeer
SetSbVPos	g_motif.cpp	/^int GView::SetSbVPos(int Start, int Amount, int Total) {$/;"	f	class:GView
SetSbVPos	g_motif.cpp	/^int GViewPeer::SetSbVPos(int Start, int Amount, int Total) {$/;"	f	class:GViewPeer
SetSbVPos	g_pm.cpp	/^int GView::SetSbVPos(int Start, int Amount, int Total) {$/;"	f	class:GView
SetSbVPos	g_pm.cpp	/^int GViewPeer::SetSbVPos(int Start, int Amount, int Total) {$/;"	f	class:GViewPeer
SetSbVPos	g_qt.cpp	/^int GView::SetSbVPos(int Start, int Amount, int Total) {$/;"	f	class:GView
SetSbVPos	g_qt.cpp	/^int GViewPeer::SetSbVPos(int Start, int Amount, int Total) {$/;"	f	class:GViewPeer
SetSbVPos	g_text.cpp	/^int GView::SetSbVPos(int Start, int Amount, int Total) {$/;"	f	class:GView
SetSbVPos	g_text.cpp	/^int GViewPeer::SetSbVPos(int Start, int Amount, int Total) {$/;"	f	class:GViewPeer
SetState	i_search.cpp	/^void ExISearch::SetState(IState s) {$/;"	f	class:ExISearch
SetTitle	o_list.cpp	/^void EList::SetTitle(char *ATitle) {$/;"	f	class:EList
SetTop	o_buffer.cpp	/^int EEditPort::SetTop(int Col, int Line) {$/;"	f	class:EEditPort
SetWordChars	c_bind.cpp	/^void SetWordChars(char *w, const char *s) {$/;"	f
SetXSelection	con_x11.cpp	/^int SetXSelection(int len, char *data) {$/;"	f
SetXSelection	g_motif.cpp	/^int SetXSelection(int len, char *data) {$/;"	f
SetXSelection	g_qt.cpp	/^int SetXSelection(int len, char *data) {$/;"	f
SetupXWindow	con_x11.cpp	/^static int SetupXWindow(int argc, char **argv) {$/;"	f	file:
SevenBit	c_config.cpp	/^int SevenBit = 0;$/;"	v
ShellWin	g_motif.cpp	/^    Widget ShellWin, MainWin, PanedWin, MenuBar;$/;"	m	class:GFramePeer	file:
ShortFName	s_files.cpp	/^const char *ShortFName(const char *Path, int len) {$/;"	f
Show	g_pm.cpp	/^void GFrame::Show() {$/;"	f	class:GFrame
Show	g_qt.cpp	/^void GFrame::Show() {$/;"	f	class:GFrame
Show	g_text.cpp	/^void GFrame::Show() {$/;"	f	class:GFrame
ShowEntryScreen	con_dosx.cpp	/^int GUI::ShowEntryScreen() {$/;"	f	class:GUI
ShowEntryScreen	con_linux.cpp	/^int GUI::ShowEntryScreen() {$/;"	f	class:GUI
ShowEntryScreen	con_nt.cpp	/^int GUI::ShowEntryScreen() { \/*FOLD00*\/$/;"	f	class:GUI
ShowEntryScreen	con_os2.cpp	/^int GUI::ShowEntryScreen() {$/;"	f	class:GUI
ShowEntryScreen	con_slang.cpp	/^int GUI::ShowEntryScreen()$/;"	f	class:GUI
ShowEntryScreen	con_x11.cpp	/^int GUI::ShowEntryScreen() {$/;"	f	class:GUI
ShowEntryScreen	egui.cpp	/^int EGUI::ShowEntryScreen() {$/;"	f	class:EGUI
ShowEntryScreen	g_motif.cpp	/^int GUI::ShowEntryScreen() {$/;"	f	class:GUI
ShowEntryScreen	g_pm.cpp	/^int GUI::ShowEntryScreen() {$/;"	f	class:GUI
ShowEntryScreen	g_qt.cpp	/^int GUI::ShowEntryScreen() {$/;"	f	class:GUI
ShowError	o_messages.cpp	/^void EMessages::ShowError(EView *V, int err) {$/;"	f	class:EMessages
ShowFrame	g_pm.cpp	/^void GFramePeer::ShowFrame() {$/;"	f	class:GFramePeer
ShowFrame	g_qt.cpp	/^void GFramePeer::ShowFrame() {$/;"	f	class:GFramePeer
ShowHScroll	g_motif.cpp	/^int ShowHScroll = 0;$/;"	v
ShowHScroll	g_pm.cpp	/^int ShowHScroll = 0;$/;"	v
ShowHScroll	g_qt.cpp	/^int ShowHScroll = 0;$/;"	v
ShowHScroll	g_text.cpp	/^int ShowHScroll = 1;$/;"	v
ShowHelpWord	o_buffer.cpp	/^int EBuffer::ShowHelpWord(ExState &State) {$/;"	f	class:EBuffer
ShowKey	view.cpp	/^int EView::ShowKey(ExState &\/*State*\/) {$/;"	f	class:EView
ShowMenu	egui.cpp	/^int EGUI::ShowMenu(ExState &State, GxView *View) {$/;"	f	class:EGUI
ShowMenuBar	g_motif.cpp	/^int ShowMenuBar = 1;$/;"	v
ShowMenuBar	g_pm.cpp	/^int ShowMenuBar = 1;$/;"	v
ShowMenuBar	g_qt.cpp	/^int ShowMenuBar = 1;$/;"	v
ShowMenuBar	g_text.cpp	/^int ShowMenuBar = 1;$/;"	v
ShowPosition	e_search.cpp	/^int EBuffer::ShowPosition() {$/;"	f	class:EBuffer
ShowRow	e_fold.cpp	/^int EBuffer::ShowRow(int Row) { \/*FOLD00*\/$/;"	f	class:EBuffer
ShowToolBar	g_motif.cpp	/^int ShowToolBar = 0;$/;"	v
ShowToolBar	g_pm.cpp	/^int ShowToolBar = 1;$/;"	v
ShowToolBar	g_qt.cpp	/^int ShowToolBar = 0;$/;"	v
ShowToolBar	g_text.cpp	/^int ShowToolBar = 0;$/;"	v
ShowVScroll	g_motif.cpp	/^int ShowVScroll = 1;$/;"	v
ShowVScroll	g_pm.cpp	/^int ShowVScroll = 1;$/;"	v
ShowVScroll	g_qt.cpp	/^int ShowVScroll = 1;$/;"	v
ShowVScroll	g_text.cpp	/^int ShowVScroll = 1;$/;"	v
ShowVersion	view.cpp	/^int EView::ShowVersion() {$/;"	f	class:EView
SigWindowChanged	con_linux.cpp	/^void SigWindowChanged(int arg) {$/;"	f
Size	s_direct.h	/^    off_t Size() { return size; }$/;"	f	class:FileInfo
SizeFrame	g_pm.cpp	/^void GFramePeer::SizeFrame() {$/;"	f	class:GFramePeer
SkipWhite	h_c.cpp	/^static int SkipWhite(EBuffer *B, int Bottom, int &Row, int &Col, int Flags) {$/;"	f	file:
Slash	s_files.cpp	/^char *Slash(char *Path, int Add) {$/;"	f
SlashDir	s_files.cpp	/^char *SlashDir(char *Path) {$/;"	f
SortBuffer	e_block.cpp	/^static EBuffer *SortBuffer;$/;"	v	file:
SortMaxCol	e_block.cpp	/^static int SortMaxCol;$/;"	v	file:
SortMaxRow	e_block.cpp	/^static int SortMaxRow;$/;"	v	file:
SortMinCol	e_block.cpp	/^static int SortMinCol;$/;"	v	file:
SortMinRow	e_block.cpp	/^static int SortMinRow;$/;"	v	file:
SortProc	e_block.cpp	/^static int _LNK_CONV SortProc(const void *A, const void *B) {$/;"	f	file:
SortReverse	e_block.cpp	/^static int SortReverse;$/;"	v	file:
SortRows	e_block.cpp	/^static int *SortRows = 0;$/;"	v	file:
SortTags	e_tags.cpp	/^int SortTags() { \/*FOLD00*\/$/;"	f
SplitLine	e_buffer.cpp	/^int EBuffer::SplitLine(int Row, int Col) {$/;"	f	class:EBuffer
Start	egui.cpp	/^int EGUI::Start(int &argc, char **argv) {$/;"	f	class:EGUI
Start	gui.cpp	/^int GUI::Start(int &\/*argc*\/, char ** \/*argv*\/) {$/;"	f	class:GUI
StartDir	cfte.cpp	/^char StartDir[MAXPATH] = "";$/;"	v
StartHilit	e_buffer.h	/^    int StartHilit, EndHilit;$/;"	m	class:EBuffer
StartInterface	g_pm.cpp	/^static HEV WorkerStarted, StartInterface;$/;"	v	file:
StateE	e_buffer.h	/^    hlState StateE;$/;"	m	class:ELine
Stop	egui.cpp	/^void EGUI::Stop() {$/;"	f	class:EGUI
Stop	gui.cpp	/^void GUI::Stop() {$/;"	f	class:GUI
StopLoop	gui.cpp	/^void GUI::StopLoop() {$/;"	f	class:GUI
StorePos	o_buffer.cpp	/^void EEditPort::StorePos() {$/;"	f	class:EEditPort
StorePos	o_list.cpp	/^void EListPort::StorePos() {$/;"	f	class:EListPort
StorePos	o_model.cpp	/^void EViewPort::StorePos() { }$/;"	f	class:EViewPort
StrFind	e_tags.cpp	/^    int StrFind;    \/\/ string to find$/;"	m	struct:TagData	file:
SubMenu	console.h	/^    int SubMenu;$/;"	m	struct:_mItem
SwitchTo	view.cpp	/^int EView::SwitchTo(ExState &State) {$/;"	f	class:EView
SwitchToModel	view.cpp	/^void EView::SwitchToModel(EModel *AModel) {$/;"	f	class:EView
SyntaxParser	c_hilit.h	/^    int SyntaxParser;$/;"	m	class:EColorize
SysShowHelp	e_djgpp2.cpp	/^int EView::SysShowHelp(ExState &State, const char *word) {$/;"	f	class:EView
SysShowHelp	e_os2.cpp	/^int EView::SysShowHelp(ExState &State, const char *word) {$/;"	f	class:EView
SysShowHelp	e_unix.cpp	/^int EView::SysShowHelp(ExState &State, const char *word) {$/;"	f	class:EView
SysShowHelp	e_win32.cpp	/^int EView::SysShowHelp(ExState &State, const char *word) {$/;"	f	class:EView
SystemClipboard	c_config.cpp	/^int SystemClipboard = 0;$/;"	v
TAB	c_cmdtab.h	10;"	d
TAttr	console.h	/^typedef unsigned char TAttr;$/;"	t
TCell	console.h	/^typedef unsigned long TCell;$/;"	t
TCell	console.h	/^typedef unsigned short TCell;$/;"	t
TCommand	console.h	/^typedef unsigned long TCommand;$/;"	t
TDrawBuffer	console.h	/^typedef TCell TDrawBuffer[ConMaxCols];$/;"	t
TEST	e_regex.cpp	1031;"	d	file:
TEST_ZERO	h_c.cpp	555;"	d	file:
TEST_ZERO	h_c.cpp	816;"	d	file:
TEvent	console.h	/^} TEvent;$/;"	t
TEventMask	console.h	/^typedef unsigned long TEventMask;$/;"	t
TKeyCode	console.h	/^typedef unsigned long TKeyCode;$/;"	t
TKeyEvent	console.h	/^} TKeyEvent;$/;"	t
TM_DIFF	con_dosx.cpp	419;"	d	file:
TM_DIFF	con_os2.cpp	253;"	d	file:
TM_DIFF	con_x11.cpp	961;"	d	file:
TM_DIFF	g_motif.cpp	369;"	d	file:
TMouseEvent	console.h	/^} TMouseEvent;$/;"	t
TMsgEvent	console.h	/^} TMsgEvent;$/;"	t
TOGGLE	e_cmds.cpp	1256;"	d	file:
TOGGLE_R	e_cmds.cpp	1261;"	d	file:
TP	e_buffer.h	/^    EPoint TP, OldTP;$/;"	m	class:EEditPort
TP	e_buffer.h	/^    EPoint TP;$/;"	m	class:EBuffer
TRUE	port.h	29;"	d
TStack	e_tags.cpp	/^static TagStack *TStack;$/;"	v	file:
TXBORDER	pm_tool.cpp	7;"	d	file:
TXICON	pm_tool.cpp	10;"	d	file:
TXSEPARATOR	pm_tool.cpp	8;"	d	file:
TYBORDER	pm_tool.cpp	6;"	d	file:
TYICON	pm_tool.cpp	9;"	d	file:
TabCount	i_input.h	/^    int TabCount;$/;"	m	class:ExInput
Tag	e_tags.cpp	/^    int Tag;        \/\/ tag name pos$/;"	m	struct:TagData	file:
TagBase	e_tags.cpp	/^    int TagBase;    \/\/ name of tag file$/;"	m	struct:TagData	file:
TagClear	e_tags.cpp	/^void TagClear() { \/*FOLD00*\/$/;"	f
TagComplete	e_tags.cpp	/^int TagComplete(char **Words, int *WordsPos, int WordsMax, char *Tag) {$/;"	f
TagD	e_tags.cpp	/^static TagData *TagD = 0;$/;"	v	file:
TagData	e_tags.cpp	/^struct TagData {$/;"	s	file:
TagDefined	e_tags.cpp	/^int TagDefined(char *Tag) {$/;"	f
TagFileCount	e_tags.cpp	/^static int TagFileCount = 0;$/;"	v	file:
TagFiles	e_tags.cpp	/^static int *TagFiles = 0;$/;"	v	file:
TagFilesLoaded	e_tags.cpp	/^static int TagFilesLoaded = 0;   \/\/ tag files are loaded at first lookup$/;"	v	file:
TagFind	e_tags.cpp	/^int TagFind(EBuffer *B, EView *View, char *Tag) { \/*FOLD00*\/$/;"	f
TagGoto	e_tags.cpp	/^int TagGoto(EView *View, char *Tag) {$/;"	f
TagI	e_tags.cpp	/^static int *TagI = 0;$/;"	v	file:
TagLen	e_tags.cpp	/^static int TagLen = 0;$/;"	v	file:
TagLoad	e_tags.cpp	/^int TagLoad(char *FileName) { \/*FOLD00*\/$/;"	f
TagLoad	view.cpp	/^int EView::TagLoad(ExState &State) {$/;"	f	class:EView
TagMem	e_tags.cpp	/^static char *TagMem = 0;$/;"	v	file:
TagNext	e_tags.cpp	/^int TagNext(EView *View) { \/*FOLD00*\/$/;"	f
TagPop	e_tags.cpp	/^int TagPop(EView *View) { \/*FOLD00*\/$/;"	f
TagPos	e_tags.cpp	/^    int TagPos;$/;"	m	struct:TagStack	file:
TagPosition	e_tags.cpp	/^static int TagPosition = -1;$/;"	v	file:
TagPrev	e_tags.cpp	/^int TagPrev(EView *View) { \/*FOLD00*\/$/;"	f
TagStack	e_tags.cpp	/^struct TagStack {$/;"	s	file:
TagsAdd	e_tags.cpp	/^int TagsAdd(char *FileName) { \/*FOLD00*\/$/;"	f
TagsLoad	e_tags.cpp	/^int TagsLoad(int id) { \/*FOLD00*\/$/;"	f
TagsSave	e_tags.cpp	/^int TagsSave(FILE *fp) { \/*FOLD00*\/$/;"	f
TextWin	g_motif.cpp	/^    Widget TextWin;$/;"	m	class:GViewPeer	file:
TheEventMapView	o_modemap.cpp	/^EventMapView *TheEventMapView = 0;$/;"	v
Thread	con_nt.cpp	/^    HANDLE Thread;$/;"	m	struct:	file:
Title	g_pm.cpp	/^    char *Title;$/;"	m	struct:	file:
Title	i_choice.h	/^    char *Title;$/;"	m	class:ExChoice
Title	o_list.h	/^    char *Title;$/;"	m	class:EList
ToggleAutoIndent	e_cmds.cpp	/^int EBuffer::ToggleAutoIndent() { TOGGLE(AutoIndent); }$/;"	f	class:EBuffer
ToggleBackSpKillTab	e_cmds.cpp	/^int EBuffer::ToggleBackSpKillTab() { TOGGLE(BackSpKillTab); }$/;"	f	class:EBuffer
ToggleBackSpUnindents	e_cmds.cpp	/^int EBuffer::ToggleBackSpUnindents() { TOGGLE(BackSpUnindents); }$/;"	f	class:EBuffer
ToggleDeleteKillTab	e_cmds.cpp	/^int EBuffer::ToggleDeleteKillTab() { TOGGLE(DeleteKillTab); }$/;"	f	class:EBuffer
ToggleExpandTabs	e_cmds.cpp	/^int EBuffer::ToggleExpandTabs() { TOGGLE_R(ExpandTabs); }$/;"	f	class:EBuffer
ToggleIndentWithTabs	e_cmds.cpp	/^int EBuffer::ToggleIndentWithTabs() { TOGGLE(IndentWithTabs); }$/;"	f	class:EBuffer
ToggleInsert	e_cmds.cpp	/^int EBuffer::ToggleInsert() { TOGGLE(Insert); }$/;"	f	class:EBuffer
ToggleKeepBackups	e_cmds.cpp	/^int EBuffer::ToggleKeepBackups() { TOGGLE(KeepBackups); }$/;"	f	class:EBuffer
ToggleMatchCase	e_cmds.cpp	/^int EBuffer::ToggleMatchCase() { TOGGLE(MatchCase); }$/;"	f	class:EBuffer
ToggleReadOnly	e_cmds.cpp	/^int EBuffer::ToggleReadOnly() { TOGGLE(ReadOnly); }$/;"	f	class:EBuffer
ToggleShowMarkers	e_cmds.cpp	/^int EBuffer::ToggleShowMarkers() { TOGGLE_R(ShowMarkers); }$/;"	f	class:EBuffer
ToggleShowTabs	e_cmds.cpp	/^int EBuffer::ToggleShowTabs() { TOGGLE_R(ShowTabs); }$/;"	f	class:EBuffer
ToggleSpaceTabs	e_cmds.cpp	/^int EBuffer::ToggleSpaceTabs() { TOGGLE(SpaceTabs); }$/;"	f	class:EBuffer
ToggleSysClipboard	view.cpp	/^int EView::ToggleSysClipboard(ExState &\/*State*\/) {$/;"	f	class:EView
ToggleTrim	e_cmds.cpp	/^int EBuffer::ToggleTrim() { TOGGLE(Trim); }$/;"	f	class:EBuffer
ToggleUndo	e_cmds.cpp	/^int EBuffer::ToggleUndo() { FreeUndo(); TOGGLE(Undo); }$/;"	f	class:EBuffer
ToggleWordWrap	e_cmds.cpp	/^int EBuffer::ToggleWordWrap() { $/;"	f	class:EBuffer
ToolBarData	pm_tool.h	/^} ToolBarData;$/;"	t
ToolBarItem	pm_tool.h	/^} ToolBarItem;$/;"	t
ToolBarProc	pm_tool.cpp	/^MRESULT EXPENTRY ToolBarProc(HWND hwnd, ULONG msg, MPARAM mp1, MPARAM mp2) {$/;"	f
Top	e_buffer.h	/^    int *Top;$/;"	m	struct:_UndoStack
Top	gui.h	/^    GView *Top, *Active;$/;"	m	class:GFrame
Top	i_view.h	/^    ExView *Top;$/;"	m	class:GxView
TopLevel	g_motif.cpp	/^static Widget TopLevel;$/;"	v	file:
TopRow	o_list.h	/^    int Row, LeftCol, TopRow, Count;$/;"	m	class:EList
TopRow	o_list.h	/^    int Row, TopRow, LeftCol;$/;"	m	class:EListPort
TotalCount	c_hilit.h	/^    int TotalCount;$/;"	m	struct:
TransCharScan	con_dosx.cpp	/^} TransCharScan[] = {$/;"	v	file:
TransCharScan	con_nt.cpp	/^} TransCharScan[] = {$/;"	v	file:
TransCharScan	con_os2.cpp	/^} TransCharScan[] = {$/;"	v	file:
TransScan	con_dosx.cpp	/^} TransScan[] = {$/;"	v	file:
TransScan	con_os2.cpp	/^} TransScan[] = {$/;"	v	file:
TransTable	e_buffer.h	/^typedef unsigned char TransTable[256];$/;"	t
TrimLine	e_cmds.cpp	/^int EBuffer::TrimLine(int Row) {$/;"	f	class:EBuffer
True	con_nt.cpp	47;"	d	file:
Type	s_direct.h	/^    int Type() { return type; }$/;"	f	class:FileInfo
TypeChar	e_cmds.cpp	/^int EBuffer::TypeChar(char aCh) { \/\/ does abbrev expansion if appropriate$/;"	f	class:EBuffer
TypeChar	o_buffer.cpp	/^int EBuffer::TypeChar(ExState &State) {$/;"	f	class:EBuffer
UBYTE	port.h	17;"	d
UGET	e_undo.cpp	158;"	d	file:
UGETC	e_undo.cpp	151;"	d	file:
ULONG	port.h	9;"	d
UNIX_RCPATHS	fte2.cpp	15;"	d	file:
US	e_buffer.h	/^    UndoStack US;$/;"	m	class:EBuffer
USE_CtrlEnter	s_util.h	13;"	d
USE_DIRENT	sysdep.h	46;"	d
USE_GPM	con_linux.cpp	12;"	d	file:
USE_SCRNMAP	con_linux.cpp	13;"	d	file:
UWM_CHOICE	g_pm.cpp	59;"	d	file:
UWM_CREATECHILD	g_pm.cpp	60;"	d	file:
UWM_CREATEFRAME	g_pm.cpp	62;"	d	file:
UWM_CREATEMAINMENU	g_pm.cpp	63;"	d	file:
UWM_CREATEPOPUPMENU	g_pm.cpp	64;"	d	file:
UWM_CREATEWORKER	g_pm.cpp	61;"	d	file:
UWM_DESTROY	g_pm.cpp	53;"	d	file:
UWM_DESTROYHWND	g_pm.cpp	54;"	d	file:
UWM_DLGBOX	g_pm.cpp	57;"	d	file:
UWM_DROPPEDFILE	g_pm.cpp	55;"	d	file:
UWM_FILEDIALOG	g_pm.cpp	56;"	d	file:
UWM_NOTIFY	g_pm.cpp	52;"	d	file:
UWM_PROCESSDLG	g_pm.cpp	58;"	d	file:
UWORD	port.h	13;"	d
UnTabPoint	e_buffer.cpp	/^int EBuffer::UnTabPoint(int Row, int Col) {$/;"	f	class:EBuffer
UnTabStr	s_util.cpp	/^int UnTabStr(char *dest, int maxlen, const char *source, int slen) {$/;"	f
Undo	e_buffer.h	/^    int NextCmd, Record, Undo;$/;"	m	struct:_UndoStack
Undo	e_undo.cpp	/^int EBuffer::Undo() {$/;"	f	class:EBuffer
Undo	e_undo.cpp	/^int EBuffer::Undo(int undo) {$/;"	f	class:EBuffer
UndoPtr	e_buffer.h	/^    int UndoPtr;$/;"	m	struct:_UndoStack
UndoStack	e_buffer.h	/^} UndoStack;$/;"	t
Unix_RCPaths	fte.cpp	/^const char *Unix_RCPaths[] = {$/;"	v
Unix_RCPaths	fte2.cpp	/^char *Unix_RCPaths[UNIX_RCPATHS]={$/;"	v
UnquoteString	e_search.cpp	/^int UnquoteString(char *str) {$/;"	f
UpMenu	menu_text.cpp	/^class UpMenu {$/;"	c	file:
Update	egui.cpp	/^void EFrame::Update() {$/;"	f	class:EFrame
Update	g_motif.cpp	/^void GFrame::Update() {$/;"	f	class:GFrame
Update	g_motif.cpp	/^void GView::Update() {$/;"	f	class:GView
Update	g_pm.cpp	/^void GFrame::Update() {$/;"	f	class:GFrame
Update	g_pm.cpp	/^void GView::Update() {$/;"	f	class:GView
Update	g_qt.cpp	/^void GFrame::Update() {$/;"	f	class:GFrame
Update	g_qt.cpp	/^void GView::Update() {$/;"	f	class:GView
Update	g_text.cpp	/^void GFrame::Update() {$/;"	f	class:GFrame
Update	g_text.cpp	/^void GView::Update() {$/;"	f	class:GView
Update	i_oview.h	/^    void Update() { UpdateStatus(); UpdateView(); }$/;"	f	class:ExView
Update	i_view.cpp	/^void GxView::Update() {$/;"	f	class:GxView
UpdateCursor	g_motif.cpp	/^int GViewPeer::UpdateCursor() {$/;"	f	class:GViewPeer
UpdateCursor	g_pm.cpp	/^int GViewPeer::UpdateCursor() {$/;"	f	class:GViewPeer
UpdateCursor	g_qt.cpp	/^int GViewPeer::UpdateCursor() {$/;"	f	class:GViewPeer
UpdateCursor	g_text.cpp	/^int GViewPeer::UpdateCursor() {$/;"	f	class:GViewPeer
UpdateFPos	c_history.cpp	/^int UpdateFPos(char *FileName, int Row, int Col) { \/*fold00*\/$/;"	f
UpdateList	o_buflist.cpp	/^void BufferView::UpdateList() {$/;"	f	class:BufferView
UpdateList	o_list.cpp	/^void EList::UpdateList() { NeedsUpdate = 1; }$/;"	f	class:EList
UpdateList	o_messages.cpp	/^void EMessages::UpdateList() {$/;"	f	class:EMessages
UpdateList	o_modemap.cpp	/^void EventMapView::UpdateList() {$/;"	f	class:EventMapView
UpdateList	o_routine.cpp	/^void RoutineView::UpdateList() {$/;"	f	class:RoutineView
UpdateMark	e_buffer.cpp	/^int EBuffer::UpdateMark(EPoint &M, int Type, int Row, int Col, int Rows, int Cols) {$/;"	f	class:EBuffer
UpdateMarker	e_buffer.cpp	/^int EBuffer::UpdateMarker(int Type, int Row, int Col, int Rows, int Cols) {$/;"	f	class:EBuffer
UpdateMenu	egui.cpp	/^void EFrame::UpdateMenu() {$/;"	f	class:EFrame
UpdateMenu	g_motif.cpp	/^void GFrame::UpdateMenu() {$/;"	f	class:GFrame
UpdateMenu	g_pm.cpp	/^void GFrame::UpdateMenu() {$/;"	f	class:GFrame
UpdateMenu	g_qt.cpp	/^void GFrame::UpdateMenu() {$/;"	f	class:GFrame
UpdateMenu	g_text.cpp	/^void GFrame::UpdateMenu() {$/;"	f	class:GFrame
UpdateStatus	i_ascii.cpp	/^void ExASCII::UpdateStatus() {$/;"	f	class:ExASCII
UpdateStatus	i_choice.cpp	/^void ExChoice::UpdateStatus() {$/;"	f	class:ExChoice
UpdateStatus	i_complete.cpp	/^void ExComplete::UpdateStatus()$/;"	f	class:ExComplete
UpdateStatus	i_input.cpp	/^void ExInput::UpdateStatus() {$/;"	f	class:ExInput
UpdateStatus	i_key.cpp	/^void ExKey::UpdateStatus() {$/;"	f	class:ExKey
UpdateStatus	i_modelview.cpp	/^void ExModelView::UpdateStatus() {$/;"	f	class:ExModelView
UpdateStatus	i_oview.cpp	/^void ExView::UpdateStatus() {$/;"	f	class:ExView
UpdateStatus	i_search.cpp	/^void ExISearch::UpdateStatus() {$/;"	f	class:ExISearch
UpdateStatus	o_buffer.cpp	/^void EEditPort::UpdateStatus() {$/;"	f	class:EEditPort
UpdateStatus	o_list.cpp	/^void EListPort::UpdateStatus() {$/;"	f	class:EListPort
UpdateStatus	o_model.cpp	/^void EViewPort::UpdateStatus() { }$/;"	f	class:EViewPort
UpdateStatus	view.cpp	/^void EView::UpdateStatus() {$/;"	f	class:EView
UpdateTitle	i_view.cpp	/^void GxView::UpdateTitle(char *Title, char *STitle) {$/;"	f	class:GxView
UpdateTitle	o_model.cpp	/^void EModel::UpdateTitle() {$/;"	f	class:EModel
UpdateView	i_ascii.cpp	/^void ExASCII::UpdateView() {$/;"	f	class:ExASCII
UpdateView	i_choice.cpp	/^void ExChoice::UpdateView() {$/;"	f	class:ExChoice
UpdateView	i_complete.cpp	/^void ExComplete::UpdateView()$/;"	f	class:ExComplete
UpdateView	i_input.cpp	/^void ExInput::UpdateView() {$/;"	f	class:ExInput
UpdateView	i_key.cpp	/^void ExKey::UpdateView() {$/;"	f	class:ExKey
UpdateView	i_modelview.cpp	/^void ExModelView::UpdateView() {$/;"	f	class:ExModelView
UpdateView	i_oview.cpp	/^void ExView::UpdateView() {$/;"	f	class:ExView
UpdateView	i_search.cpp	/^void ExISearch::UpdateView() {$/;"	f	class:ExISearch
UpdateView	o_buffer.cpp	/^void EEditPort::UpdateView() {$/;"	f	class:EEditPort
UpdateView	o_list.cpp	/^void EListPort::UpdateView() {$/;"	f	class:EListPort
UpdateView	o_model.cpp	/^void EViewPort::UpdateView() { }$/;"	f	class:EViewPort
UpdateView	view.cpp	/^void EView::UpdateView() {$/;"	f	class:EView
UpdateVis	e_fold.cpp	/^void EBuffer::UpdateVis(EPoint &M, int Row, int Delta) { \/*FOLD00*\/$/;"	f	class:EBuffer
UpdateVisible	e_fold.cpp	/^void EBuffer::UpdateVisible(int Row, int Delta) { \/*FOLD00*\/$/;"	f	class:EBuffer
UpdateWindow	con_x11.cpp	/^void UpdateWindow(int xx, int yy, int ww, int hh) {$/;"	f
UpdateWindow	g_motif.cpp	/^void GViewPeer::UpdateWindow(int xx, int yy, int ww, int hh) {$/;"	f	class:GViewPeer
UpdateWindow	g_qt.cpp	/^void GViewPeer::UpdateWindow(int xx, int yy, int ww, int hh) {$/;"	f	class:GViewPeer
Usage	fte.cpp	/^static void Usage() {$/;"	f	file:
Usage	fte2.cpp	/^static void Usage() {$/;"	f	file:
UseDefaultConfig	c_config.cpp	/^int UseDefaultConfig() {$/;"	f
VAllocated	e_buffer.h	/^    int VAllocated;   \/\/ visible lines$/;"	m	class:EBuffer
VCount	e_buffer.h	/^    int VCount;$/;"	m	class:EBuffer
VERNUM	ftever.h	8;"	d
VERSION	ftever.h	7;"	d
VGap	e_buffer.h	/^    int VGap;$/;"	m	class:EBuffer
VIDEO_MAP_SIZE	con_linux.cpp	106;"	d	file:
VIDEO_SIZE	con_linux.cpp	105;"	d	file:
VLine	e_buffer.h	/^    PELine VLine(int No) {$/;"	f	class:EBuffer
VLine	e_buffer.h	/^    void VLine(int No, PELine L) {$/;"	f	class:EBuffer
VToR	e_buffer.h	/^    int VToR(int No) {$/;"	f	class:EBuffer
VV	e_buffer.h	/^    int *VV;$/;"	m	class:EBuffer
ValidPos	e_buffer.cpp	/^int EBuffer::ValidPos(EPoint Pos) {$/;"	f	class:EBuffer
VcsFd	con_linux.cpp	/^static int VcsFd = -1;$/;"	v	file:
VertPos	g_motif.cpp	/^    int VertPos, HorzPos;$/;"	m	class:GViewPeer	file:
VertPos	g_qt.cpp	/^    int VertPos, HorzPos;$/;"	m	class:GViewPeer	file:
VertValueChanged	g_motif.cpp	/^void VertValueChanged(Widget w, GViewPeer *Peer, XmScrollBarCallbackStruct *Call) {$/;"	f
VideoCols	con_linux.cpp	/^unsigned int VideoCols = 80;$/;"	v
VideoRows	con_linux.cpp	/^unsigned int VideoRows = 25;$/;"	v
View	console.h	/^    GView *View;$/;"	m	struct:
View	g_motif.cpp	/^    GView *View;$/;"	m	class:GViewPeer	file:
View	g_pm.cpp	/^    GView *View;$/;"	m	class:GViewPeer	file:
View	g_qt.cpp	/^    GView *View;$/;"	m	class:GViewPeer	file:
View	g_text.cpp	/^    GView *View;$/;"	m	class:GViewPeer	file:
View	i_modelview.h	/^    EView *View;$/;"	m	class:ExModelView
View	o_model.h	/^    EView *View;     \/\/ active view of model$/;"	m	class:EModel
View	o_model.h	/^    EView *View;$/;"	m	class:EViewPort
ViewBuffers	view.cpp	/^int EView::ViewBuffers(ExState &\/*State*\/) {$/;"	f	class:EView
ViewMap	o_modemap.cpp	/^void EventMapView::ViewMap(EEventMap *Map) {$/;"	f	class:EventMapView
ViewMessages	view.cpp	/^int EView::ViewMessages(ExState &\/*State*\/) {$/;"	f	class:EView
ViewModeMap	view.cpp	/^int EView::ViewModeMap(ExState &\/*State*\/) {$/;"	f	class:EView
ViewRoutines	view.cpp	/^int EView::ViewRoutines(ExState &\/*State*\/) {$/;"	f	class:EView
VirtCode	con_nt.cpp	/^    SHORT VirtCode;$/;"	m	struct:	file:
VirtTab	con_nt.cpp	/^} VirtTab[]  =$/;"	v
Vis	e_buffer.h	/^    int Vis(int No) {$/;"	f	class:EBuffer
Vis	e_buffer.h	/^    void Vis(int No, int V) {$/;"	f	class:EBuffer
Visibility	g_motif.cpp	/^    int Visibility;$/;"	m	class:GViewPeer	file:
VisibilityCb	g_motif.cpp	/^static void VisibilityCb(Widget w, GViewPeer *peer, XEvent *event, Boolean *cont) {$/;"	f	file:
VtFd	con_linux.cpp	/^static int VtFd = -1;$/;"	v	file:
VtNum	con_linux.cpp	/^int VtNum = -1;$/;"	v
WC_MTOOLBAR	pm_tool.h	10;"	d
WFAIL	e_cmds.cpp	1031;"	d	file:
WGETBIT	c_mode.h	130;"	d
WIN32_LEAN_AND_MEAN	g_draw.cpp	13;"	d	file:
WIN32_LEAN_AND_MEAN	s_direct.cpp	20;"	d	file:
WIN32_LEAN_AND_MEAN	s_files.cpp	19;"	d	file:
WM_DELETE_WINDOW	g_motif.cpp	/^static Atom   WM_DELETE_WINDOW;$/;"	v	file:
WSETBIT	c_mode.h	125;"	d
WeirdScroll	c_config.cpp	/^int WeirdScroll = 0;$/;"	v
What	console.h	/^    TEventMask What;$/;"	m	struct:
What	console.h	/^    TEventMask What;$/;"	m	union:
Win	i_oview.h	/^    GxView *Win;$/;"	m	class:ExView
WinClose	egui.cpp	/^int EGUI::WinClose(GxView *V) {$/;"	f	class:EGUI
WinHSplit	egui.cpp	/^int EGUI::WinHSplit(GxView *View) {$/;"	f	class:EGUI
WinNext	egui.cpp	/^int EGUI::WinNext(GxView *view) {$/;"	f	class:EGUI
WinPrev	egui.cpp	/^int EGUI::WinPrev(GxView *view) {$/;"	f	class:EGUI
WinResize	egui.cpp	/^int EGUI::WinResize(ExState &State, GxView *View) {$/;"	f	class:EGUI
WinZoom	egui.cpp	/^int EGUI::WinZoom(GxView *View) {$/;"	f	class:EGUI
WindowChanged	con_linux.cpp	/^int WindowChanged = 0;$/;"	v
WindowFont	c_config.cpp	/^char WindowFont[64] = "";$/;"	v
WnSwitchBuffer	i_modelview.cpp	/^void ExModelView::WnSwitchBuffer(EModel *B) {$/;"	f	class:ExModelView
WnSwitchBuffer	i_oview.h	/^    virtual void WnSwitchBuffer(EModel *M) { Next->WnSwitchBuffer(M); }$/;"	f	class:ExView
Word	cfte.cpp	/^typedef char Word[64];$/;"	t	file:
WordBegin	i_complete.h	/^    char *WordBegin;$/;"	m	class:ExComplete
WordChars	c_mode.h	/^    char WordChars[32];$/;"	m	struct:
WordContinue	i_complete.h	/^    char *WordContinue;$/;"	m	class:ExComplete
WordCount	e_buffer.h	/^    int WordCount;$/;"	m	class:EBuffer
WordFixed	i_complete.h	/^    size_t WordFixed;$/;"	m	class:ExComplete
WordFixedCount	i_complete.h	/^    size_t WordFixedCount;$/;"	m	class:ExComplete
WordList	e_buffer.h	/^    char **WordList;$/;"	m	class:EBuffer
WordPos	i_complete.h	/^    int WordPos;$/;"	m	class:ExComplete
Words	i_complete.h	/^    char **Words;$/;"	m	class:ExComplete
WordsLast	i_complete.h	/^    int WordsLast;$/;"	m	class:ExComplete
WorkThread	g_pm.cpp	/^static void _LNK_CONV WorkThread(void *) {$/;"	f	file:
WorkerStarted	g_pm.cpp	/^static HEV WorkerStarted, StartInterface;$/;"	v	file:
WrapPara	e_cmds.cpp	/^int EBuffer::WrapPara() {$/;"	f	class:EBuffer
X	console.h	/^    long X;$/;"	m	struct:
XIM_INPUT_STYLE	con_i18n.h	11;"	d
XKB_DEAD_KEYS	con_ikcz.h	305;"	d
XKB_DEAD_KEYS	con_ikcz.h	316;"	d
XTarget	cfte.cpp	/^char XTarget[MAXPATH] = "";$/;"	v
X_BIT	h_perl.cpp	25;"	d	file:
X_MASK	h_perl.cpp	26;"	d	file:
X_NOT	h_perl.cpp	27;"	d	file:
Y	console.h	/^    long Y;$/;"	m	struct:
_BUFFER_H_	e_buffer.h	11;"	d
_CurPos	c_config.cpp	/^typedef struct _CurPos {$/;"	s	file:
_CurPos	cfte.cpp	/^typedef struct _CurPos {$/;"	s	file:
_FNMATCH_H	fnmatch.h	20;"	d
_LNK_CONV	sysdep.h	147;"	d
_OrdLookup	cfte.cpp	/^typedef struct _OrdLookup {$/;"	s	file:
_PMPTR	g_pm.cpp	/^typedef struct _PMPTR { \/\/ for passing pointers to winprocs$/;"	s	file:
_RoutineList	e_buffer.h	/^typedef struct _RoutineList {$/;"	s
_RxNode	e_regex.h	/^struct _RxNode {$/;"	s
_UndoStack	e_buffer.h	/^typedef struct _UndoStack {$/;"	s
__BIND_H	c_bind.h	11;"	d
__BUFLIST_H	o_buflist.h	11;"	d
__CLIPLIB_H	clip.h	11;"	d
__COLOR_H	c_color.h	11;"	d
__COMMANDS_H__	c_commands.h	11;"	d
__CONFIG_H	c_config.h	11;"	d
__CONI18N_H__	con_i18n.h	2;"	d
__CONKBD_H__	conkbd.h	11;"	d
__CONSOLE_H__	console.h	11;"	d
__CON_IKCS_H	con_ikcz.h	2;"	d
__DESKTOP_H__	c_desktop.h	11;"	d
__DIALOG_H__	dialog.h	11;"	d
__EDITOR_H__	s_util.h	11;"	d
__EGUI_H__	egui.h	11;"	d
__EMARK_H	e_mark.h	2;"	d
__EMODE_H__	c_mode.h	11;"	d
__EXASCII_H	i_ascii.h	11;"	d
__EXCHOICE_H	i_choice.h	11;"	d
__EXCOMPLETE_H	i_complete.h	11;"	d
__EXEDIT_H	i_modelview.h	11;"	d
__EXINPUT_H	i_input.h	11;"	d
__EXKEY_H	i_key.h	11;"	d
__FCONFIG_H__	c_fconfig.h	11;"	d
__FEATURE_H__	feature.h	13;"	d
__FILESYS_H__	s_files.h	11;"	d
__FILLER	port.h	38;"	d
__FILLER	port.h	40;"	d
__FPOSHIST_H__	c_history.h	11;"	d
__FTEVER_H	ftever.h	2;"	d
__FTE_H	fte.h	11;"	d
__GUI_H	gui.h	11;"	d
__HILIT_H__	c_hilit.h	11;"	d
__IOVIEW_H	i_oview.h	11;"	d
__ISEARCH_H	i_search.h	11;"	d
__LOGGING_HPP	log.h	82;"	d
__MAPVIEW_H__	o_modemap.h	11;"	d
__MESSAGES_H__	o_messages.h	11;"	d
__MODEL_H__	o_model.h	11;"	d
__NAMEMAPS_H__	namemaps.h	3;"	d
__ODIRECTORY_H	o_directory.h	11;"	d
__OLIST_H__	o_list.h	11;"	d
__P	fnmatch.h	28;"	d
__P	fnmatch.h	29;"	d
__P	fnmatch.h	32;"	d
__P	fnmatch.h	33;"	d
__REGEX_H	e_regex.h	11;"	d
__ROUTINE_H__	o_routine.h	11;"	d
__SDIRECT_H	s_direct.h	11;"	d
__SYSDEP_H	sysdep.h	11;"	d
__TAGS_H	e_tags.h	11;"	d
__TOOLBAR_H	pm_tool.h	2;"	d
__UNDO_H__	e_undo.h	11;"	d
__const	fnmatch.h	41;"	d
__const	fnmatch.h	43;"	d
__port_port_h	port.h	2;"	d
_color	cfte.cpp	/^struct _color {$/;"	s	file:
_mItem	console.h	/^typedef struct _mItem {$/;"	s
_mMenu	console.h	/^typedef struct _mMenu {$/;"	s
_qEvent	g_qt.cpp	/^typedef struct _qEvent {$/;"	s	file:
a	c_config.cpp	/^    const char *a;$/;"	m	struct:_CurPos	file:
a	cfte.cpp	/^    char *a;$/;"	m	struct:_CurPos	file:
aDir	o_messages.h	/^struct aDir$/;"	s
abbrev	c_bind.h	/^    EAbbrev *abbrev[ABBREV_HASH];$/;"	m	class:EEventMap
access	namemaps.h	5;"	d
add	e_regex.cpp	/^static int add(int *len, char **s, const char *a, int alen, int &flag) {$/;"	f	file:
addButton	g_qt_dlg.cpp	/^void QChoiceBox::addButton(const char *text) {$/;"	f	class:QChoiceBox
adjustSize	g_qt_dlg.cpp	/^void QChoiceBox::adjustSize() {$/;"	f	class:QChoiceBox
ah	port.h	/^	unsigned char al, ah;  __FILLER(_1)$/;"	m	struct:dosxBreg
al	port.h	/^	unsigned char al, ah;  __FILLER(_1)$/;"	m	struct:dosxBreg
ap	g_pm.cpp	/^    va_list ap;$/;"	m	struct:	file:
askCancel	dialog.h	15;"	d
askNo	dialog.h	14;"	d
askOK	dialog.h	16;"	d
askYes	dialog.h	13;"	d
ax	port.h	/^	unsigned short ax;	__FILLER(_1)$/;"	m	struct:dosxWreg
b	con_x11.cpp	/^    int r, g, b;$/;"	m	struct:	file:
bmColumn	e_buffer.h	15;"	d
bmLine	e_buffer.h	13;"	d
bmStream	e_buffer.h	14;"	d
bool	log.h	96;"	d
boolean	port.h	21;"	d
bop	e_regex.cpp	/^static const char *bop;$/;"	v	file:
bp	port.h	/^	unsigned short bp;	__FILLER(_5)$/;"	m	struct:dosxWreg
buf	bin2c.cpp	/^unsigned char buf[BUFLEN];$/;"	v
buffer	cliputil.cpp	/^char buffer[MAXCLIPTEXT];$/;"	v
buffer	con_nt.cpp	/^    char *buffer;$/;"	m	struct:	file:
buffer	con_os2.cpp	/^    char *buffer;$/;"	m	struct:	file:
buffer	g_pm.cpp	/^    char *buffer;$/;"	m	struct:	file:
buflen	con_nt.cpp	/^    int buflen;$/;"	m	struct:	file:
buflen	con_os2.cpp	/^    int buflen;$/;"	m	struct:	file:
buflen	g_pm.cpp	/^    int buflen;$/;"	m	struct:	file:
bufpos	con_nt.cpp	/^    int bufpos;$/;"	m	struct:	file:
bufpos	con_os2.cpp	/^    int bufpos;$/;"	m	struct:	file:
bufpos	g_pm.cpp	/^    int bufpos;$/;"	m	struct:	file:
bufused	con_nt.cpp	/^    int bufused;$/;"	m	struct:	file:
bufused	con_os2.cpp	/^    int bufused;$/;"	m	struct:	file:
bufused	g_pm.cpp	/^    int bufused;$/;"	m	struct:	file:
button	g_qt_dlg.cpp	/^    QPushButton *button[kMaxButton];$/;"	m	class:QChoiceBox	file:
buttonActivated	g_qt_dlg.cpp	/^    int buttonActivated;$/;"	m	class:QChoiceBox	file:
buttonArmed	g_qt_dlg.cpp	/^    int buttonArmed;$/;"	m	class:QChoiceBox	file:
buttonCount	g_qt_dlg.cpp	/^    int buttonCount;$/;"	m	class:QChoiceBox	file:
buttonSelected	g_qt_dlg.cpp	/^    int buttonSelected;$/;"	m	class:QChoiceBox	file:
c	c_config.cpp	/^    const char *c;$/;"	m	struct:_CurPos	file:
c	cfte.cpp	/^    char *c;$/;"	m	struct:_CurPos	file:
cEnd	g_motif.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cEnd	g_pm.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cEnd	g_qt.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cEnd	g_text.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cStart	g_motif.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cStart	g_pm.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cStart	g_qt.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cStart	g_text.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cVisible	g_motif.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cVisible	g_pm.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cVisible	g_qt.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cVisible	g_text.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cX	g_motif.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cX	g_pm.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cX	g_qt.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cX	g_text.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cY	g_motif.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cY	g_pm.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cY	g_qt.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cY	g_text.cpp	/^    int cX, cY, cVisible, cStart, cEnd;$/;"	m	class:GViewPeer	file:
cb	pm_tool.h	/^    USHORT cb;$/;"	m	struct:
ccDown	e_buffer.h	531;"	d
ccToggle	e_buffer.h	532;"	d
ccUp	e_buffer.h	530;"	d
cfAppend	o_model.h	/^    cfAppend = 1,$/;"	e	enum:createFlags
cfNoActivate	o_model.h	/^    cfNoActivate = 2$/;"	e	enum:createFlags
ch	i_key.h	/^    char ch;$/;"	m	class:ExKey
ch	port.h	/^	unsigned char cl, ch;  __FILLER(_3)$/;"	m	struct:dosxBreg
chmod	namemaps.h	6;"	d
chsize	namemaps.h	7;"	d
cl	port.h	/^	unsigned char cl, ch;  __FILLER(_3)$/;"	m	struct:dosxBreg
cleanup	cfte.cpp	/^void cleanup(int xerrno) {$/;"	f
clicked	g_qt_dlg.cpp	/^void QChoiceBox::clicked() {$/;"	f	class:QChoiceBox
clipsrv	clipprog.cpp	/^void clipsrv(void *foo) {$/;"	f
clipsrv	clipserv.cpp	/^void _LNK_CONV clipsrv(void *foo) {$/;"	f
close	namemaps.h	8;"	d
closeEvent	g_qt.cpp	/^void QEFrame::closeEvent(QCloseEvent *qe) {$/;"	f	class:QEFrame
cmClose	console.h	63;"	d
cmDroppedFile	console.h	84;"	d
cmHScrollLeft	console.h	78;"	d
cmHScrollMove	console.h	82;"	d
cmHScrollPgLt	console.h	80;"	d
cmHScrollPgRt	console.h	81;"	d
cmHScrollRight	console.h	79;"	d
cmMainMenu	console.h	65;"	d
cmPipeRead	console.h	64;"	d
cmPopupMenu	console.h	66;"	d
cmRefresh	console.h	61;"	d
cmRenameFile	console.h	85;"	d
cmResize	console.h	62;"	d
cmVScrollDown	console.h	71;"	d
cmVScrollMove	console.h	74;"	d
cmVScrollPgDn	console.h	73;"	d
cmVScrollPgUp	console.h	72;"	d
cmVScrollUp	console.h	70;"	d
cmd	g_pm.cpp	/^    int cmd;$/;"	m	struct:	file:
cmds	c_bind.h	/^    CommandType *cmds;$/;"	m	struct:
cmptags	e_tags.cpp	/^int _LNK_CONV cmptags(const void *p1, const void *p2) {$/;"	f
codepage	con_nt.cpp	/^int codepage;$/;"	v
color	c_hilit.h	/^    int color;$/;"	m	struct:HState
color	c_hilit.h	/^    int color;$/;"	m	struct:HTrans
colorCount	cfte.cpp	/^int colorCount;$/;"	v
colorName	cfte.cpp	/^    char *colorName;$/;"	m	struct:_color	file:
colorValue	cfte.cpp	/^    char *colorValue;$/;"	m	struct:_color	file:
colorize_string	cfte.cpp	/^OrdLookup colorize_string[] = {$/;"	v
colormap	con_x11.cpp	/^static Colormap colormap;$/;"	v	file:
colormap	g_motif.cpp	/^static Colormap colormap;$/;"	v	file:
colors	cfte.cpp	/^} *colors;$/;"	v
colors	g_qt.cpp	/^static QColor colors[16] = {$/;"	v	file:
command	con_dosx.cpp	/^  char *command, mode[10], temp_name[L_tmpnam];$/;"	m	struct:pipe_list	file:
conread	con_linux.cpp	/^int conread(int fd, void *p, int len) {   \/\/ len should be a multiple of 2$/;"	f
conread	con_linux.cpp	380;"	d	file:
conwrite	con_linux.cpp	/^int conwrite(int fd, void *p, int len) {  \/\/ len should be a multiple of 2$/;"	f
conwrite	con_linux.cpp	381;"	d	file:
copyfile	s_util.cpp	/^int copyfile(char *f1, char *f2) { \/\/ from F1 to F2$/;"	f
count	c_hilit.h	/^    int count[CK_MAXLEN];$/;"	m	struct:
creat	namemaps.h	9;"	d
createFlags	o_model.h	/^enum createFlags {$/;"	g
csDown	console.h	40;"	d
csLeft	console.h	41;"	d
csRight	console.h	42;"	d
csUp	console.h	39;"	d
curr_dir	o_messages.h	/^    aDir*   curr_dir;                       \/\/ top of dir stack.$/;"	m	class:EMessages
cx	port.h	/^	unsigned short cx;	__FILLER(_3)$/;"	m	struct:dosxWreg
cxBorder	g_pm.cpp	/^      cxBorder, cyBorder,$/;"	v
cxChar	g_motif.cpp	/^static int cxChar = 8;$/;"	v	file:
cxChar	g_pm.cpp	/^    SHORT cxChar;$/;"	m	struct:PMData	file:
cxChar	g_qt.cpp	/^static int cxChar = 1;$/;"	v	file:
cxScreen	g_pm.cpp	/^ULONG cxScreen, cyScreen,$/;"	v
cxScrollBar	g_pm.cpp	/^      cxScrollBar, cyScrollBar;$/;"	v
cyBorder	g_pm.cpp	/^      cxBorder, cyBorder,$/;"	v
cyChar	g_motif.cpp	/^static int cyChar = 13;$/;"	v	file:
cyChar	g_pm.cpp	/^    SHORT cyChar;$/;"	m	struct:PMData	file:
cyChar	g_qt.cpp	/^static int cyChar = 1;$/;"	v	file:
cyScreen	g_pm.cpp	/^ULONG cxScreen, cyScreen,$/;"	v
cyScrollBar	g_pm.cpp	/^      cxScrollBar, cyScrollBar;$/;"	v
cyTitleBar	g_pm.cpp	/^      cyTitleBar, \/\/cyMenuBar,$/;"	v
dbg	con_nt.cpp	/^void dbg(const char* s, ...) \/*FOLD00*\/$/;"	f
dbm	con_nt.cpp	73;"	d	file:
dcolors	con_x11.cpp	/^} dcolors[] =$/;"	v	file:
dead_key	con_linux.cpp	/^char dead_key = 0;$/;"	v
deadkey	con_i18n.h	/^    KeySym deadkey;$/;"	m	struct:keyboardRec
deleteFrame	gui.cpp	/^void GUI::deleteFrame(GFrame *frame) {$/;"	f	class:GUI
df_avail	port.h	/^	unsigned	df_avail;$/;"	m	struct:plDFree
df_bsec	port.h	/^	unsigned	df_bsec;$/;"	m	struct:plDFree
df_sclus	port.h	/^	unsigned	df_sclus;$/;"	m	struct:plDFree
df_total	port.h	/^	unsigned	df_total;$/;"	m	struct:plDFree
di	port.h	/^	unsigned short di;	__FILLER(_7)$/;"	m	struct:dosxWreg
diacr_table	con_linux.cpp	/^struct kbdiacrs diacr_table;$/;"	v
die	con_linux.cpp	77;"	d	file:
dir	s_direct.h	/^    DIR *dir;$/;"	m	class:FileFind
dir	s_direct.h	/^    unsigned long dir; \/\/ should be HANDLE$/;"	m	class:FileFind
dir	s_direct.h	/^    unsigned long dir; \/\/ should be HDIR, but we don't #include huge os2.h globally$/;"	m	class:FileFind
display	con_x11.cpp	/^static Display *display;$/;"	v	file:
display	g_motif.cpp	/^static Display *display;$/;"	v	file:
display	g_qt.cpp	/^static Display *display;$/;"	v	file:
doLoop	gui.h	/^    int doLoop;$/;"	m	class:GUI
dosxBreg	port.h	/^struct dosxBreg {$/;"	s
dosxEreg	port.h	/^struct dosxEreg {$/;"	s
dosxReg	port.h	/^union dosxReg {$/;"	u
dosxWreg	port.h	/^struct dosxWreg {$/;"	s
dragname	g_pm.cpp	/^char dragname[CCHMAXPATH];$/;"	v
drawPointer	con_linux.cpp	/^int drawPointer = 1;$/;"	v
ds	port.h	/^	unsigned short	ds, es, fs, gs;$/;"	m	struct:dosxEreg
dup	namemaps.h	10;"	d
dup2	namemaps.h	11;"	d
ePlScnType	port.h	/^enum ePlScnType$/;"	g
eax	port.h	/^	unsigned long	eax, ebx, ecx, edx, ebp, esi, edi;$/;"	m	struct:dosxEreg
ebp	port.h	/^	unsigned long	eax, ebx, ecx, edx, ebp, esi, edi;$/;"	m	struct:dosxEreg
ebx	port.h	/^	unsigned long	eax, ebx, ecx, edx, ebp, esi, edi;$/;"	m	struct:dosxEreg
ecx	port.h	/^	unsigned long	eax, ebx, ecx, edx, ebp, esi, edi;$/;"	m	struct:dosxEreg
edi	port.h	/^	unsigned long	eax, ebx, ecx, edx, ebp, esi, edi;$/;"	m	struct:dosxEreg
edx	port.h	/^	unsigned long	eax, ebx, ecx, edx, ebp, esi, edi;$/;"	m	struct:dosxEreg
effgid	fte.cpp	/^gid_t effgid;$/;"	v
effuid	fte.cpp	/^uid_t effuid;$/;"	v
eof	namemaps.h	12;"	d
eop	e_regex.cpp	/^static const char *eop;$/;"	v	file:
es	port.h	/^	unsigned short	ds, es, fs, gs;$/;"	m	struct:dosxEreg
es	port.h	/^	unsigned short es;$/;"	m	struct:dosxWreg
esi	port.h	/^	unsigned long	eax, ebx, ecx, edx, ebp, esi, edi;$/;"	m	struct:dosxEreg
evBroadcast	console.h	52;"	d
evCommand	console.h	51;"	d
evKeyDown	console.h	45;"	d
evKeyUp	console.h	46;"	d
evKeyboard	console.h	55;"	d
evMessage	console.h	57;"	d
evMouse	console.h	56;"	d
evMouseAuto	console.h	50;"	d
evMouseDown	console.h	47;"	d
evMouseMove	console.h	49;"	d
evMouseUp	console.h	48;"	d
evNone	console.h	44;"	d
evNotify	console.h	53;"	d
event	g_qt.cpp	/^    TEvent event;$/;"	m	struct:_qEvent	file:
event_head	g_qt.cpp	/^static qEvent *event_head = 0;$/;"	v	file:
event_string	cfte.cpp	/^OrdLookup event_string[] = {$/;"	v
event_tail	g_qt.cpp	/^static qEvent *event_tail = 0;$/;"	v	file:
exit_status	con_dosx.cpp	/^  int exit_status;$/;"	m	struct:pipe_list	file:
fArgc	gui.h	/^    int fArgc;$/;"	m	class:GUI
fArgv	gui.h	/^    char **fArgv;$/;"	m	class:GUI
fChar	clip.h	/^    char *fChar;$/;"	m	struct:
fChar	e_regex.h	/^        char *fChar;$/;"	m	union:_RxNode::<anonymous>
fColorize	c_bind.h	/^    EColorize *fColorize;$/;"	m	class:EMode
fEventMap	c_bind.h	/^    EEventMap *fEventMap;$/;"	m	class:EMode
fH	g_text.cpp	/^    int fW, fH;$/;"	m	class:GFramePeer	file:
fKey	c_bind.h	/^    KeySel fKey;$/;"	m	class:EKey
fKeyMap	c_bind.h	/^    EKeyMap *fKeyMap;$/;"	m	class:EKey
fKeys	c_bind.h	/^    EKey *fKeys;$/;"	m	class:EKeyMap
fLen	clip.h	/^    unsigned long fLen;$/;"	m	struct:
fLen	e_regex.h	/^    short fLen;$/;"	m	struct:_RxNode
fName	c_bind.h	/^    char *fName;$/;"	m	class:EMode
fNext	c_bind.h	/^    EKey *fNext;$/;"	m	class:EKey
fNext	c_bind.h	/^    EMode *fNext;$/;"	m	class:EMode
fNext	e_regex.h	/^    RxNode *fNext;$/;"	m	struct:_RxNode
fParent	c_bind.h	/^    EKeyMap *fParent;$/;"	m	class:EKeyMap
fParent	c_bind.h	/^    EMode *fParent;$/;"	m	class:EMode
fPrev	e_regex.h	/^    RxNode *fPrev;$/;"	m	struct:_RxNode
fPtr	e_regex.h	/^        RxNode *fPtr;$/;"	m	union:_RxNode::<anonymous>
fW	g_text.cpp	/^    int fW, fH;$/;"	m	class:GFramePeer	file:
fWhat	e_regex.h	/^    short fWhat;$/;"	m	struct:_RxNode
false	log.h	98;"	d
fd	con_dosx.cpp	/^  int fd;$/;"	m	struct:pipe_list	file:
fd	con_linux.cpp	/^    int fd;$/;"	m	struct:	file:
fd	con_slang.cpp	/^    int fd;$/;"	m	struct:	file:
fd	con_x11.cpp	/^    int fd;$/;"	m	struct:	file:
fd	g_motif.cpp	/^    int fd;$/;"	m	struct:	file:
fd	g_qt.cpp	/^    int fd;$/;"	m	struct:	file:
ffDIRECTORY	s_direct.h	38;"	d
ffFAST	s_direct.h	36;"	d
ffFULLPATH	s_direct.h	37;"	d
ffHIDDEN	s_direct.h	39;"	d
fiDIRECTORY	s_direct.h	17;"	d
fiFILE	s_direct.h	16;"	d
fiUNKNOWN	s_direct.h	15;"	d
file	o_messages.h	/^    char *file;$/;"	m	struct:
filecmp	sysdep.h	105;"	d
filecmp	sysdep.h	125;"	d
filecmp	sysdep.h	63;"	d
filecmp	sysdep.h	81;"	d
filelength	namemaps.h	13;"	d
filename	c_bind.h	/^    char filename[256];$/;"	m	class:EMode
fill	console.h	/^    char fill[32];$/;"	m	union:
findDesktop	egui.cpp	/^int EGUI::findDesktop(char *argv[]) {$/;"	f	class:EGUI
findPathExt	fte.cpp	/^static char *findPathExt(char *filename) {$/;"	f	file:
findPathExt	fte2.cpp	/^static char *findPathExt(char *filename) {$/;"	f	file:
firstTrans	c_hilit.h	/^    int firstTrans;$/;"	m	struct:HState
flFrame	g_pm.cpp	/^static ULONG flFrame =$/;"	v	file:
flags	e_buffer.h	/^    unsigned short flags;$/;"	m	struct:
flags	e_regex.cpp	/^static int flags = RX_CASE;$/;"	v	file:
flags	g_pm.cpp	/^    int flags;$/;"	m	struct:	file:
flags	port.h	/^	unsigned long	flags;$/;"	m	struct:dosxEreg
flags	port.h	/^	unsigned long	flags;$/;"	m	struct:dosxWreg
fmAscent	g_qt.cpp	/^static int fmAscent;$/;"	v	file:
focusInEvent	g_qt.cpp	/^void QEText::focusInEvent(QFocusEvent *qe) {$/;"	f	class:QEText
focusOutEvent	g_qt.cpp	/^void QEText::focusOutEvent(QFocusEvent *qe) {$/;"	f	class:QEText
fontSet	con_x11.cpp	/^static XFontSet fontSet;$/;"	v	file:
fontStruct	con_x11.cpp	/^static XFontStruct *fontStruct;$/;"	v	file:
fontStruct	g_motif.cpp	/^static XFontStruct *fontStruct;$/;"	v	file:
fontStruct	g_qt.cpp	/^static XFontStruct *fontStruct;$/;"	v	file:
fp	con_dosx.cpp	/^        FILE *fp;$/;"	m	struct:	file:
fp	con_dosx.cpp	/^  FILE *fp;$/;"	m	struct:pipe_list	file:
frame	g_qt.cpp	/^    GFramePeer  *frame;$/;"	m	class:QEFrame	file:
frames	g_motif.cpp	/^GFrame *frames = 0;$/;"	v
frames	g_pm.cpp	/^GFrame *frames = 0;$/;"	v
frames	g_qt.cpp	/^GFrame *frames = 0;$/;"	v
frames	g_text.cpp	/^GFrame *frames = 0;$/;"	v
freeDirStack	o_messages.cpp	/^void EMessages::freeDirStack()$/;"	f	class:EMessages
fromScreen	con_linux.cpp	/^static unsigned char fromScreen[256];$/;"	v	file:
fs	port.h	/^	unsigned short	ds, es, fs, gs;$/;"	m	struct:dosxEreg
fs	port.h	/^	unsigned short fs;$/;"	m	struct:dosxWreg
ft_day	port.h	/^	unsigned	ft_day	 : 5;	\/\/ Day$/;"	m	struct:plFTime
ft_hour	port.h	/^	unsigned	ft_hour  : 5;	\/\/ Hour$/;"	m	struct:plFTime
ft_min	port.h	/^	unsigned	ft_min	 : 6;	\/\/ Minute$/;"	m	struct:plFTime
ft_month	port.h	/^	unsigned	ft_month : 4;	\/\/ Month$/;"	m	struct:plFTime
ft_tsec	port.h	/^	unsigned	ft_tsec  : 5;	\/\/ Two second interval$/;"	m	struct:plFTime
ft_year	port.h	/^	unsigned	ft_year  : 7;	\/\/ Year$/;"	m	struct:plFTime
fte_write_color_chars	con_slang.cpp	/^static void fte_write_color_chars(PCell Cell, int W)$/;"	f	file:
ftesl_get_ctrlcode	compkeys.cpp	/^int ftesl_get_ctrlcode(TKeyCode key)$/;"	f
ftesl_get_dch	con_slang.cpp	/^unsigned char ftesl_get_dch(char raw)$/;"	f
ftesl_getftekey	con_slang.cpp	/^static TKeyCode ftesl_getftekey(unsigned char key)$/;"	f	file:
ftesl_getkeycode	compkeys.cpp	/^TKeyCode   ftesl_getkeycode(const char* key)$/;"	f
ftesl_process_key	con_slang.cpp	/^static TKeyCode ftesl_process_key(int key, int ctrlhack = 0)$/;"	f	file:
func	log.h	/^    char const* func;$/;"	m	class:FunctionLog
g	con_x11.cpp	/^    int r, g, b;$/;"	m	struct:	file:
gc	g_motif.cpp	/^    GC gc[256];$/;"	m	class:GViewPeer	file:
gcv	g_motif.cpp	/^    XGCValues gcv;$/;"	m	class:GViewPeer	file:
getBuffer	e_mark.h	/^    EBuffer *getBuffer() { return Buffer; }$/;"	f	class:EMark
getChoice	g_qt_dlg.cpp	/^    int getChoice() { return buttonActivated; }$/;"	f	class:QChoiceBox
getFileName	e_mark.h	/^    char *getFileName() { return FileName; }$/;"	f	class:EMark
getName	e_mark.h	/^    char *getName() { return Name; }$/;"	f	class:EMark
getPoint	e_mark.cpp	/^EPoint &EMark::getPoint() {$/;"	f	class:EMark
getProgramName	fte.cpp	/^char *getProgramName(char *name) {$/;"	f
getProgramName	fte2.cpp	/^char *getProgramName(char *name) {$/;"	f
getWord	o_messages.cpp	/^static void getWord(char* dest, char*& pin)$/;"	f	file:
get_linux_keycode	compkeys.cpp	/^static unsigned get_linux_keycode(TKeyCode kcode)$/;"	f	file:
globalLog	log.cpp	/^GlobalLog globalLog;$/;"	v
global_num	cfte.cpp	/^OrdLookup global_num[] = {$/;"	v
global_string	cfte.cpp	/^OrdLookup global_string[] = {$/;"	v
gs	port.h	/^	unsigned short	ds, es, fs, gs;$/;"	m	struct:dosxEreg
gs	port.h	/^	unsigned short gs;$/;"	m	struct:dosxWreg
gui	g_motif.cpp	/^GUI *gui = 0;$/;"	v
gui	g_pm.cpp	/^GUI *gui = 0;$/;"	v
gui	g_qt.cpp	/^GUI *gui = 0;$/;"	v
gui	g_text.cpp	/^GUI *gui = 0;$/;"	v
h	menu_text.cpp	/^    int x, y, w, h;$/;"	m	class:UpMenu	file:
h	port.h	/^	struct dosxBreg 	h;$/;"	m	union:dosxReg
hBitmap	pm_tool.h	/^    HBITMAP hBitmap;$/;"	m	struct:
hab	clip_pmv.cpp	/^    HAB hab;$/;"	m	struct:	file:
hab	clipprog.cpp	/^HAB hab;$/;"	v
hab	clipserv.cpp	/^HAB hab;$/;"	v
hab	g_pm.cpp	/^HAB hab = 0;$/;"	v
habW	g_pm.cpp	/^HAB habW = 0;$/;"	v
handle	g_pm.cpp	/^    HBITMAP handle;$/;"	m	struct:	file:
handleKeyPressEvent	g_qt.cpp	/^void QEText::handleKeyPressEvent(QKeyEvent *qe) {$/;"	f	class:QEText
handleMouse	g_qt.cpp	/^void QEText::handleMouse(QMouseEvent *qe) {$/;"	f	class:QEText
hcAsciiChars	c_color.cpp	/^ChColor hcAsciiChars = 0x07;$/;"	v
hcChoice_ActiveChar	c_color.cpp	/^ChColor hcChoice_ActiveChar = 0x2F;$/;"	v
hcChoice_ActiveItem	c_color.cpp	/^ChColor hcChoice_ActiveItem = 0x20;$/;"	v
hcChoice_Background	c_color.cpp	/^ChColor hcChoice_Background = 0x17;$/;"	v
hcChoice_NormalChar	c_color.cpp	/^ChColor hcChoice_NormalChar = 0x1E;$/;"	v
hcChoice_NormalItem	c_color.cpp	/^ChColor hcChoice_NormalItem = 0x1F;$/;"	v
hcChoice_Param	c_color.cpp	/^ChColor hcChoice_Param      = 0x1B;$/;"	v
hcChoice_Title	c_color.cpp	/^ChColor hcChoice_Title      = 0x1F;$/;"	v
hcEntry_Field	c_color.cpp	/^ChColor hcEntry_Field   = 0x07;$/;"	v
hcEntry_Prompt	c_color.cpp	/^ChColor hcEntry_Prompt  = 0x0F;$/;"	v
hcEntry_Selection	c_color.cpp	/^ChColor hcEntry_Selection = 0x2F;$/;"	v
hcList_Normal	c_color.cpp	/^ChColor hcList_Normal    = 0x07;$/;"	v
hcList_Selected	c_color.cpp	/^ChColor hcList_Selected  = 0x1F;$/;"	v
hcList_Status	c_color.cpp	/^ChColor hcList_Status    = 0x70;$/;"	v
hcMenu_ActiveChar	c_color.cpp	/^ChColor hcMenu_ActiveChar = 0x1C;$/;"	v
hcMenu_ActiveItem	c_color.cpp	/^ChColor hcMenu_ActiveItem = 0x1F;$/;"	v
hcMenu_Background	c_color.cpp	/^ChColor hcMenu_Background = 0x70;$/;"	v
hcMenu_NormalChar	c_color.cpp	/^ChColor hcMenu_NormalChar = 0x74;$/;"	v
hcMenu_NormalItem	c_color.cpp	/^ChColor hcMenu_NormalItem = 0x70;$/;"	v
hcPlain_Background	c_color.cpp	/^ChColor hcPlain_Background = 0x07;$/;"	v
hcPlain_Folds	c_color.cpp	/^ChColor hcPlain_Folds = 0x0A;$/;"	v
hcPlain_Found	c_color.cpp	/^ChColor hcPlain_Found = 0x40;$/;"	v
hcPlain_HilitWord	c_color.cpp	/^ChColor hcPlain_HilitWord = 0x0D;$/;"	v
hcPlain_Keyword	c_color.cpp	/^ChColor hcPlain_Keyword = 0x0F;$/;"	v
hcPlain_Markers	c_color.cpp	/^ChColor hcPlain_Markers = 0x03;$/;"	v
hcPlain_Normal	c_color.cpp	/^ChColor hcPlain_Normal = 0x07;$/;"	v
hcPlain_Selected	c_color.cpp	/^ChColor hcPlain_Selected = 0x80;$/;"	v
hcScrollBar_Arrows	c_color.cpp	/^ChColor hcScrollBar_Arrows = 0x70;$/;"	v
hcScrollBar_Back	c_color.cpp	/^ChColor hcScrollBar_Back   = 0x07;$/;"	v
hcScrollBar_Fore	c_color.cpp	/^ChColor hcScrollBar_Fore   = 0x07;$/;"	v
hcStatus_Active	c_color.cpp	/^ChColor hcStatus_Active = 0x70;$/;"	v
hcStatus_Normal	c_color.cpp	/^ChColor hcStatus_Normal = 0x30;$/;"	v
hevEnd	clip_vio.cpp	/^static HEV hevEnd;$/;"	v	file:
hevEnd	clipprog.cpp	/^HEV hevEnd;$/;"	v
hevEnd	clipserv.cpp	/^HEV hevEnd;$/;"	v
hevGet	clip_vio.cpp	/^static HEV hevGet;$/;"	v	file:
hevGet	clipprog.cpp	/^HEV hevGet;$/;"	v
hevGet	clipserv.cpp	/^HEV hevGet;$/;"	v
hevPut	clip_vio.cpp	/^static HEV hevPut;$/;"	v	file:
hevPut	clipprog.cpp	/^HEV hevPut;$/;"	v
hevPut	clipserv.cpp	/^HEV hevPut;$/;"	v
hilit_colors	cfte.cpp	/^OrdLookup hilit_colors[] = {$/;"	v
hlState	c_hilit.h	/^typedef unsigned short hlState;$/;"	t
hm	c_hilit.h	/^    HMachine *hm;$/;"	m	class:EColorize
hmq	clip_pmv.cpp	/^    HMQ hmq;$/;"	m	struct:	file:
hmq	clipprog.cpp	/^HMQ hmq;$/;"	v
hmq	clipserv.cpp	/^HMQ hmq;$/;"	v
hmq	g_pm.cpp	/^HMQ hmq = 0;$/;"	v
hmqW	g_pm.cpp	/^HMQ hmqW = 0;$/;"	v
hmtxPMData	g_pm.cpp	/^HMTX hmtxPMData = 0;$/;"	v
hmtxSyn	clip_vio.cpp	/^static HMTX hmtxSyn;$/;"	v	file:
hmtxSyn	clipprog.cpp	/^HMTX hmtxSyn;$/;"	v
hmtxSyn	clipserv.cpp	/^HMTX hmtxSyn;$/;"	v
hmuxWait	clipprog.cpp	/^HMUX hmuxWait;$/;"	v
hmuxWait	clipserv.cpp	/^HMUX hmuxWait;$/;"	v
hps	g_pm.cpp	/^    HPS hps;$/;"	m	struct:PMData	file:
hsAda_Comment	h_ada.cpp	15;"	d	file:
hsAda_CommentL	h_ada.cpp	16;"	d	file:
hsAda_Keyword	h_ada.cpp	17;"	d	file:
hsAda_Normal	h_ada.cpp	14;"	d	file:
hsAda_String1	h_ada.cpp	18;"	d	file:
hsAda_String2	h_ada.cpp	19;"	d	file:
hsBS_Normal	h_catbs.cpp	14;"	d	file:
hsC_CPP	h_c.cpp	27;"	d	file:
hsC_CPP_ABrace	h_c.cpp	31;"	d	file:
hsC_CPP_Comm	h_c.cpp	28;"	d	file:
hsC_CPP_String1	h_c.cpp	29;"	d	file:
hsC_CPP_String2	h_c.cpp	30;"	d	file:
hsC_Comment	h_c.cpp	22;"	d	file:
hsC_CommentL	h_c.cpp	23;"	d	file:
hsC_Keyword	h_c.cpp	24;"	d	file:
hsC_Normal	h_c.cpp	21;"	d	file:
hsC_String1	h_c.cpp	25;"	d	file:
hsC_String2	h_c.cpp	26;"	d	file:
hsFTE_CPP	h_fte.cpp	19;"	d	file:
hsFTE_Comment	h_fte.cpp	15;"	d	file:
hsFTE_KeySpec	h_fte.cpp	21;"	d	file:
hsFTE_Keyword	h_fte.cpp	16;"	d	file:
hsFTE_Normal	h_fte.cpp	14;"	d	file:
hsFTE_Regexp	h_fte.cpp	20;"	d	file:
hsFTE_String1	h_fte.cpp	17;"	d	file:
hsFTE_String2	h_fte.cpp	18;"	d	file:
hsHTML_Char	h_html.cpp	18;"	d	file:
hsHTML_Command	h_html.cpp	15;"	d	file:
hsHTML_Comment	h_html.cpp	20;"	d	file:
hsHTML_Normal	h_html.cpp	14;"	d	file:
hsHTML_Slashed	h_html.cpp	19;"	d	file:
hsHTML_String1	h_html.cpp	16;"	d	file:
hsHTML_String2	h_html.cpp	17;"	d	file:
hsIPF_Control	h_ipf.cpp	17;"	d	file:
hsIPF_Normal	h_ipf.cpp	14;"	d	file:
hsIPF_String	h_ipf.cpp	18;"	d	file:
hsIPF_Symbol	h_ipf.cpp	15;"	d	file:
hsIPF_Tag	h_ipf.cpp	16;"	d	file:
hsMAKE_Command	h_make.cpp	17;"	d	file:
hsMAKE_Comment	h_make.cpp	15;"	d	file:
hsMAKE_DotCmd	h_make.cpp	16;"	d	file:
hsMAKE_Normal	h_make.cpp	14;"	d	file:
hsMERGE_Control	h_merge.cpp	18;"	d	file:
hsMERGE_Modified	h_merge.cpp	15;"	d	file:
hsMERGE_New	h_merge.cpp	17;"	d	file:
hsMERGE_Normal	h_merge.cpp	14;"	d	file:
hsMERGE_Original	h_merge.cpp	16;"	d	file:
hsMSG_Control	h_msg.cpp	18;"	d	file:
hsMSG_Header	h_msg.cpp	15;"	d	file:
hsMSG_Normal	h_msg.cpp	14;"	d	file:
hsMSG_Quote	h_msg.cpp	16;"	d	file:
hsMSG_Tag	h_msg.cpp	17;"	d	file:
hsPLAIN_Normal	h_plain.cpp	12;"	d	file:
hsPas_Comment1	h_pascal.cpp	15;"	d	file:
hsPas_Comment2	h_pascal.cpp	16;"	d	file:
hsPas_Keyword	h_pascal.cpp	17;"	d	file:
hsPas_Normal	h_pascal.cpp	14;"	d	file:
hsPas_String1	h_pascal.cpp	18;"	d	file:
hsPas_String2	h_pascal.cpp	19;"	d	file:
hsPerl_Comment	h_perl.cpp	62;"	d	file:
hsPerl_Data	h_perl.cpp	75;"	d	file:
hsPerl_Docs	h_perl.cpp	74;"	d	file:
hsPerl_Function	h_perl.cpp	70;"	d	file:
hsPerl_HereDoc	h_perl.cpp	90;"	d	file:
hsPerl_Keyword	h_perl.cpp	64;"	d	file:
hsPerl_Normal	h_perl.cpp	63;"	d	file:
hsPerl_Number	h_perl.cpp	69;"	d	file:
hsPerl_Punct	h_perl.cpp	61;"	d	file:
hsPerl_Quote1	h_perl.cpp	79;"	d	file:
hsPerl_Quote1M	h_perl.cpp	80;"	d	file:
hsPerl_Quote1Op	h_perl.cpp	78;"	d	file:
hsPerl_Regexp1	h_perl.cpp	83;"	d	file:
hsPerl_Regexp1M	h_perl.cpp	84;"	d	file:
hsPerl_Regexp1Op	h_perl.cpp	82;"	d	file:
hsPerl_Regexp2	h_perl.cpp	87;"	d	file:
hsPerl_Regexp2M	h_perl.cpp	88;"	d	file:
hsPerl_Regexp2Op	h_perl.cpp	86;"	d	file:
hsPerl_RegexpM	h_perl.cpp	71;"	d	file:
hsPerl_RegexpS1	h_perl.cpp	72;"	d	file:
hsPerl_RegexpS2	h_perl.cpp	73;"	d	file:
hsPerl_RegexpS3	h_perl.cpp	76;"	d	file:
hsPerl_String1	h_perl.cpp	65;"	d	file:
hsPerl_String2	h_perl.cpp	66;"	d	file:
hsPerl_StringBk	h_perl.cpp	67;"	d	file:
hsPerl_Variable	h_perl.cpp	68;"	d	file:
hsREXX_Comment	h_rexx.cpp	15;"	d	file:
hsREXX_Keyword	h_rexx.cpp	18;"	d	file:
hsREXX_Normal	h_rexx.cpp	14;"	d	file:
hsREXX_String1	h_rexx.cpp	16;"	d	file:
hsREXX_String2	h_rexx.cpp	17;"	d	file:
hsSH_BQuote	h_sh.cpp	/^enum { hsSH_Normal, hsSH_SQuote, hsSH_DQuote, hsSH_BQuote,$/;"	e	file:
hsSH_Comment	h_sh.cpp	/^hsSH_DBQuote, hsSH_Control, hsSH_Keyword, hsSH_Comment,$/;"	e	file:
hsSH_Control	h_sh.cpp	/^hsSH_DBQuote, hsSH_Control, hsSH_Keyword, hsSH_Comment,$/;"	e	file:
hsSH_DBQuote	h_sh.cpp	/^hsSH_DBQuote, hsSH_Control, hsSH_Keyword, hsSH_Comment,$/;"	e	file:
hsSH_DQuote	h_sh.cpp	/^enum { hsSH_Normal, hsSH_SQuote, hsSH_DQuote, hsSH_BQuote,$/;"	e	file:
hsSH_EOF	h_sh.cpp	/^hsSH_Variable, hsSH_EOF };$/;"	e	file:
hsSH_Keyword	h_sh.cpp	/^hsSH_DBQuote, hsSH_Control, hsSH_Keyword, hsSH_Comment,$/;"	e	file:
hsSH_Normal	h_sh.cpp	/^enum { hsSH_Normal, hsSH_SQuote, hsSH_DQuote, hsSH_BQuote,$/;"	e	file:
hsSH_SQuote	h_sh.cpp	/^enum { hsSH_Normal, hsSH_SQuote, hsSH_DQuote, hsSH_BQuote,$/;"	e	file:
hsSH_Variable	h_sh.cpp	/^hsSH_Variable, hsSH_EOF };$/;"	e	file:
hsState	c_hilit.h	/^typedef unsigned char hsState;$/;"	t
hsTEX_Comment	h_tex.cpp	16;"	d	file:
hsTEX_Normal	h_tex.cpp	14;"	d	file:
hsTEX_Special	h_tex.cpp	17;"	d	file:
hsTEX_Tag	h_tex.cpp	15;"	d	file:
hvps	g_pm.cpp	/^    HVPS hvps;$/;"	m	struct:PMData	file:
hwndCreatorUser	g_pm.cpp	/^HWND hwndCreatorUser, hwndCreatorWorker;$/;"	v
hwndCreatorWorker	g_pm.cpp	/^HWND hwndCreatorUser, hwndCreatorWorker;$/;"	v
hwndFrame	g_pm.cpp	/^    HWND hwndFrame;$/;"	m	class:GFramePeer	file:
hwndHscroll	g_pm.cpp	/^    HWND hwndVscroll, hwndHscroll;$/;"	m	class:GViewPeer	file:
hwndToolBar	g_pm.cpp	/^    HWND hwndToolBar;$/;"	m	class:GFramePeer	file:
hwndView	g_pm.cpp	/^    HWND hwndView;$/;"	m	class:GViewPeer	file:
hwndVscroll	g_pm.cpp	/^    HWND hwndVscroll, hwndHscroll;$/;"	m	class:GViewPeer	file:
hwndWorker	g_pm.cpp	/^    HWND hwndWorker;$/;"	m	class:GViewPeer	file:
hwndWorker	g_pm.cpp	/^    HWND hwndWorker;$/;"	m	struct:PMData	file:
id	con_dosx.cpp	/^	int id;$/;"	m	struct:	file:
id	con_linux.cpp	/^    int id;$/;"	m	struct:	file:
id	con_nt.cpp	/^    int id;$/;"	m	struct:	file:
id	con_os2.cpp	/^    int id;$/;"	m	struct:	file:
id	con_slang.cpp	/^    int id;$/;"	m	struct:	file:
id	con_x11.cpp	/^    int id;$/;"	m	struct:	file:
id	g_motif.cpp	/^    int id;$/;"	m	struct:	file:
id	g_pm.cpp	/^    int id;$/;"	m	struct:	file:
id	g_qt.cpp	/^    int id;$/;"	m	struct:	file:
id	menu_text.cpp	/^    int id;$/;"	m	class:UpMenu	file:
ign	c_bind.h	/^    short ign;$/;"	m	struct:
impentry	clip_pmv.cpp	/^static struct impentry {$/;"	s	file:
imported_functions	clip_pmv.cpp	/^} imported_functions[] = {$/;"	v	file:
indent	log.h	/^    int         indent;$/;"	m	class:GlobalLog
indentChar	log.h	/^    char        indentChar;$/;"	m	class:FunctionLog
initX	con_x11.cpp	/^static int initX = 0, initY = 0;$/;"	v	file:
initY	con_x11.cpp	/^static int initX = 0, initY = 0;$/;"	v	file:
input	g_motif.cpp	/^    XtInputId input;$/;"	m	struct:	file:
inputHistory	c_history.cpp	/^static InputHistory inputHistory = { 0, 0, 0 };$/;"	v	file:
insert	e_mark.cpp	/^EMark *EMarkIndex::insert(char *aName, EBuffer *aBuffer, EPoint aPoint) {$/;"	f	class:EMarkIndex
insert	e_mark.cpp	/^EMark *EMarkIndex::insert(char *aName, char *aFileName, EPoint aPoint, EBuffer *aBuffer) {$/;"	f	class:EMarkIndex
isAlt	conkbd.h	24;"	d
isAltXXX	conkbd.h	23;"	d
isAscii	conkbd.h	31;"	d
isCtrl	conkbd.h	25;"	d
isDir	o_directory.cpp	/^int EDirectory::isDir(int No) {$/;"	f	class:EDirectory
isGray	conkbd.h	27;"	d
isLastFrame	gui.cpp	/^int GFrame::isLastFrame() {$/;"	f	class:GFrame
isShift	conkbd.h	26;"	d
is_end	s_files.cpp	/^static inline int is_end(int c)$/;"	f	file:
is_filename_char	s_files.cpp	/^static inline int is_filename_char(int c)$/;"	f	file:
isatty	namemaps.h	14;"	d
kMaxButton	g_qt_dlg.cpp	/^const int kMaxButton = 16;$/;"	v
kbAlt	conkbd.h	65;"	d
kbBackSp	conkbd.h	60;"	d
kbBreak	conkbd.h	75;"	d
kbCapsLock	conkbd.h	68;"	d
kbCenter	conkbd.h	49;"	d
kbCode	conkbd.h	30;"	d
kbCtrl	conkbd.h	66;"	d
kbDel	conkbd.h	56;"	d
kbDown	conkbd.h	47;"	d
kbEnd	conkbd.h	52;"	d
kbEnter	conkbd.h	62;"	d
kbEsc	conkbd.h	63;"	d
kbF1	conkbd.h	33;"	d
kbF10	conkbd.h	42;"	d
kbF11	conkbd.h	43;"	d
kbF12	conkbd.h	44;"	d
kbF2	conkbd.h	34;"	d
kbF3	conkbd.h	35;"	d
kbF4	conkbd.h	36;"	d
kbF5	conkbd.h	37;"	d
kbF6	conkbd.h	38;"	d
kbF7	conkbd.h	39;"	d
kbF8	conkbd.h	40;"	d
kbF9	conkbd.h	41;"	d
kbHome	conkbd.h	51;"	d
kbIns	conkbd.h	55;"	d
kbLeft	conkbd.h	48;"	d
kbNumLock	conkbd.h	69;"	d
kbPause	conkbd.h	72;"	d
kbPgDn	conkbd.h	54;"	d
kbPgUp	conkbd.h	53;"	d
kbPrtScr	conkbd.h	73;"	d
kbRight	conkbd.h	50;"	d
kbScrollLock	conkbd.h	70;"	d
kbShift	conkbd.h	67;"	d
kbSpace	conkbd.h	58;"	d
kbSysReq	conkbd.h	74;"	d
kbTab	conkbd.h	61;"	d
kbUp	conkbd.h	46;"	d
kbdFullCzRec	con_ikcz.h	/^static struct keyboardRec kbdFullCzRec[] =$/;"	v
kbdHalfCzRec	con_ikcz.h	/^static struct keyboardRec kbdHalfCzRec[] =$/;"	v
kbdStdRec	con_ikcz.h	/^static struct keyboardRec kbdStdRec[] =$/;"	v
kc	g_pm.cpp	/^    TKeyCode kc;$/;"	m	struct:	file:
kcode	compkeys.cpp	/^        TKeyCode        kcode;$/;"	m	struct:keymapper	file:
key	c_hilit.h	/^    char *key[CK_MAXLEN];$/;"	m	struct:
keyCode	conkbd.h	29;"	d
keyCode	g_qt.cpp	/^    TKeyCode keyCode;$/;"	m	struct:	file:
keyPressEvent	g_qt.cpp	/^void QEText::keyPressEvent(QKeyEvent *qe) {$/;"	f	class:QEText
keyType	conkbd.h	28;"	d
key_english	con_i18n.h	/^    KeySym key_english;$/;"	m	struct:remapKey
key_remap	con_i18n.h	/^    KeySym key_remap;$/;"	m	struct:remapKey
key_table	con_x11.cpp	/^} key_table[] = {$/;"	v	file:
key_table	g_motif.cpp	/^} key_table[] = {$/;"	v	file:
key_table	g_qt.cpp	/^} key_table[] = {$/;"	v	file:
keyboardAcute	con_ikcz.h	/^static struct remapKey keyboardAcute[] =$/;"	v
keyboardCaron	con_ikcz.h	/^static struct remapKey keyboardCaron[] =$/;"	v
keyboardFifth	con_ikcz.h	/^static struct remapKey keyboardFifth[] =$/;"	v
keyboardFirst	con_ikcz.h	/^static struct remapKey keyboardFirst[] =$/;"	v
keyboardFourth	con_ikcz.h	/^static struct remapKey keyboardFourth[] =$/;"	v
keyboardFullCz	con_ikcz.h	/^static struct remapKey keyboardFullCz[] =$/;"	v
keyboardHalfCz	con_ikcz.h	/^static struct remapKey keyboardHalfCz[] =$/;"	v
keyboardRec	con_i18n.h	/^struct keyboardRec {$/;"	s
keyboardSecond	con_ikcz.h	/^static struct remapKey keyboardSecond[] =$/;"	v
keyboardStd	con_ikcz.h	/^static struct remapKey keyboardStd[] =$/;"	v
keyboardThird	con_ikcz.h	/^static struct remapKey keyboardThird[] =$/;"	v
keycode	con_x11.cpp	/^    long keycode;$/;"	m	struct:	file:
keycode	g_motif.cpp	/^    long keycode;$/;"	m	struct:	file:
keymapper	compkeys.cpp	/^typedef struct keymapper$/;"	s	file:
keymapper	compkeys.cpp	/^} keymapper;$/;"	t	file:
keys_ctrlhack	con_slang.cpp	/^static TKeyCode keys_ctrlhack[] =$/;"	v	file:
keysym	con_x11.cpp	/^    long keysym;$/;"	m	struct:	file:
keysym	g_motif.cpp	/^    long keysym;$/;"	m	struct:	file:
keywords	c_hilit.h	/^    ColorKeywords keywords;$/;"	m	struct:HState
kfAll	conkbd.h	21;"	d
kfAlt	conkbd.h	16;"	d
kfAltXXX	conkbd.h	13;"	d
kfCtrl	conkbd.h	17;"	d
kfGray	conkbd.h	19;"	d
kfKeyUp	conkbd.h	20;"	d
kfModifier	conkbd.h	14;"	d
kfShift	conkbd.h	18;"	d
kfSpecial	conkbd.h	15;"	d
ki_ascii	port.h	/^	UBYTE	ki_ascii;$/;"	m	struct:plKbdInfo
ki_flags	port.h	/^	ULONG	ki_flags;	    \/\/ PLKF_ defines, above;$/;"	m	struct:plKbdInfo
ki_scan	port.h	/^	UBYTE	ki_scan;$/;"	m	struct:plKbdInfo
kname	compkeys.cpp	/^        const char*     kname;$/;"	m	struct:keymapper	file:
kwd	h_perl.cpp	29;"	d	file:
lChoice	i_choice.h	/^    int lChoice;$/;"	m	class:ExChoice
lTitle	i_choice.h	/^    int lTitle;$/;"	m	class:ExChoice
label	g_qt_dlg.cpp	/^    QLabel *label;$/;"	m	class:QChoiceBox	file:
len	g_pm.cpp	/^    USHORT len;$/;"	m	struct:_PMPTR	file:
len	i_search.h	/^    int len;$/;"	m	class:ExISearch
level	e_buffer.h	/^    unsigned char level;$/;"	m	struct:
line	c_config.cpp	/^    int line;$/;"	m	struct:_CurPos	file:
line	cfte.cpp	/^    int line;$/;"	m	struct:_CurPos	file:
line	e_buffer.h	/^    int line;$/;"	m	struct:
line	o_messages.h	/^    int line;$/;"	m	struct:
lntotal	cfte.cpp	/^int lntotal = 0;$/;"	v
loadDLL	clip_pmv.cpp	/^static BOOL loadDLL(void) {$/;"	f	file:
locate	e_mark.cpp	/^EMark *EMarkIndex::locate(char *aName) {$/;"	f	class:EMarkIndex
lock_state	con_linux.cpp	/^int lock_state = 0;$/;"	v
locking	namemaps.h	15;"	d
log	log.h	/^    GlobalLog&  log;$/;"	m	class:FunctionLog
lseek	namemaps.h	16;"	d
lvirt	g_pm.cpp	/^} lvirt[] = {$/;"	v
mItem	console.h	/^} mItem;$/;"	t
mMenu	console.h	/^} mMenu;$/;"	t
m_bOpened	log.h	/^    bool        m_bOpened;$/;"	m	class:GlobalLog
m_ofsLog	log.h	/^    ofstream    m_ofsLog;$/;"	m	class:GlobalLog
m_strLogFile	log.h	/^    char const* m_strLogFile;$/;"	m	class:GlobalLog
main	bin2c.cpp	/^int main(int argc, char **argv) {$/;"	f
main	cfte.cpp	/^int main(int argc, char **argv) {$/;"	f
main	clipprog.cpp	/^int main() {$/;"	f
main	clipserv.cpp	/^int main() {$/;"	f
main	cliputil.cpp	/^int main(int argc, char **argv) {$/;"	f
main	compkeys.cpp	/^int main(int argc, char* argv[])$/;"	f
main	e_regex.cpp	/^int main() {$/;"	f
main	fte.cpp	/^int main(int argc, char **argv) {$/;"	f
main	fte2.cpp	/^int main(int argc, char **argv) {$/;"	f
markCount	e_mark.h	/^    int markCount;$/;"	m	class:EMarkIndex
markIndex	e_mark.cpp	/^EMarkIndex markIndex;$/;"	v
marks	e_mark.h	/^    EMark **marks;$/;"	m	class:EMarkIndex
match	c_hilit.h	/^    char *match;$/;"	m	struct:HTrans
match	e_regex.cpp	/^static RxMatchRes *match;$/;"	v	file:
matchFlags	c_hilit.h	/^    long matchFlags;$/;"	m	struct:HTrans
matchLen	c_hilit.h	/^    int matchLen;$/;"	m	struct:HTrans
memicmp	memicmp.cpp	/^int memicmp(const void *s1, const void *s2, size_t n)$/;"	f
menuBar	g_pm.cpp	/^    HWND menuBar;$/;"	m	class:GFramePeer	file:
mktemp	namemaps.h	17;"	d
mode	con_dosx.cpp	/^  char *command, mode[10], temp_name[L_tmpnam];$/;"	m	struct:pipe_list	file:
mode_num	cfte.cpp	/^OrdLookup mode_num[] = {$/;"	v
mode_string	cfte.cpp	/^OrdLookup mode_string[] = {$/;"	v
mouseDrawn	con_linux.cpp	/^int mouseDrawn = 0;$/;"	v
mouseHide	con_linux.cpp	/^void mouseHide() {$/;"	f
mouseMoveEvent	g_qt.cpp	/^void QEText::mouseMoveEvent(QMouseEvent *qe) {$/;"	f	class:QEText
mousePressEvent	g_qt.cpp	/^void QEText::mousePressEvent(QMouseEvent *qe) {$/;"	f	class:QEText
mouseReleaseEvent	g_qt.cpp	/^void QEText::mouseReleaseEvent(QMouseEvent *qe) {$/;"	f	class:QEText
mouseShow	con_linux.cpp	/^void mouseShow() {$/;"	f
msg	o_messages.h	/^    char *msg;$/;"	m	struct:
msgbuftmp	o_model.cpp	/^char msgbuftmp[MSGBUFTMP_SIZE] = "";$/;"	v
mtime	s_direct.h	/^    time_t mtime;$/;"	m	class:FileInfo
multiFrame	g_pm.cpp	/^int GUI::multiFrame() {$/;"	f	class:GUI
multiFrame	g_qt.cpp	/^int GUI::multiFrame() { return 1; }$/;"	f	class:GUI
multiFrame	g_text.cpp	/^int GUI::multiFrame() {$/;"	f	class:GUI
mvChar	c_mode.h	/^    mvChar,$/;"	e
mvCurCol	c_mode.h	/^    mvCurCol,$/;"	e
mvCurDirectory	c_mode.h	/^    mvCurDirectory,$/;"	e
mvCurRow	c_mode.h	/^    mvCurRow,$/;"	e
mvFileBaseName	c_mode.h	/^    mvFileBaseName,  \/* without the last extension *\/$/;"	e
mvFileDirectory	c_mode.h	/^    mvFileDirectory, \/* directory + '\/' *\/$/;"	e
mvFileExtension	c_mode.h	/^    mvFileExtension, \/* the last one *\/$/;"	e
mvFileName	c_mode.h	/^    mvFileName,      \/* name + extension *\/$/;"	e
mvFilePath	c_mode.h	/^    mvFilePath = 1,  \/* directory + name + extension *\/$/;"	e
mvLine	c_mode.h	/^    mvLine$/;"	e
mvWord	c_mode.h	/^    mvWord,$/;"	e
myIndentLevel	log.h	/^    int         myIndentLevel;$/;"	m	class:FunctionLog
my_fixpath	s_files.cpp	/^static void my_fixpath(const char *in, char *out) {$/;"	f	file:
my_stat	s_direct.cpp	/^static int my_stat(const char *name, struct stat *s)$/;"	f	file:
name	c_config.cpp	/^    const char *name; \/\/ filename$/;"	m	struct:_CurPos	file:
name	cfte.cpp	/^    const char *name; \/\/ filename$/;"	m	struct:_CurPos	file:
name	g_pm.cpp	/^    char *name;$/;"	m	struct:	file:
name	g_qt.cpp	/^    QEFrame(GFramePeer *peer, QWidget *parent = 0, const char *name = 0);$/;"	m	class:QEFrame	file:
name	g_qt.cpp	/^    QEText(GViewPeer *peer, QWidget *parent = 0, const char *name = 0);$/;"	m	class:QEText	file:
name	g_qt.cpp	/^    QEView(GViewPeer *peer, QWidget *parent = 0, const char *name = 0);$/;"	m	class:QEView	file:
name	g_qt_dlg.cpp	/^    QChoiceBox(QWidget *parent=0, const char *name=0);$/;"	m	class:QChoiceBox	file:
name	o_messages.h	/^    char*       name;$/;"	m	struct:aDir
name	s_direct.h	/^    char *name;   \/\/ minimum set of file information$/;"	m	class:FileInfo
nationalKey	con_ikcz.h	/^static struct keyboardRec *nationalKey[] =$/;"	v
new	fte.h	60;"	d
new	g_text.cpp	25;"	d	file:
next	c_bind.h	/^    EAbbrev *next;$/;"	m	class:EAbbrev
next	con_dosx.cpp	/^  struct pipe_list *next;$/;"	m	struct:pipe_list	file:
next	con_i18n.h	/^    short next;$/;"	m	struct:keyboardRec
next	g_qt.cpp	/^    struct _qEvent *next;$/;"	m	struct:_qEvent	file:
next	o_messages.h	/^    aDir*       next;$/;"	m	struct:aDir
nextKwdMatchedState	c_hilit.h	/^    int nextKwdMatchedState;$/;"	m	struct:HState
nextKwdNoCharState	c_hilit.h	/^    int nextKwdNoCharState;$/;"	m	struct:HState
nextKwdNotMatchedState	c_hilit.h	/^    int nextKwdNotMatchedState;$/;"	m	struct:HState
nextState	c_hilit.h	/^    int nextState;$/;"	m	struct:HTrans
noCharTrans	con_linux.cpp	/^static int noCharTrans = 0;$/;"	v	file:
notify	con_dosx.cpp	/^	EModel *notify;$/;"	m	struct:	file:
notify	con_linux.cpp	/^    EModel *notify;$/;"	m	struct:	file:
notify	con_nt.cpp	/^    EModel *notify;$/;"	m	struct:	file:
notify	con_os2.cpp	/^    EModel *notify;$/;"	m	struct:	file:
notify	con_slang.cpp	/^    EModel *notify;$/;"	m	struct:	file:
notify	con_x11.cpp	/^    EModel *notify;$/;"	m	struct:	file:
notify	g_motif.cpp	/^    EModel *notify;$/;"	m	struct:	file:
notify	g_pm.cpp	/^    EModel *notify;$/;"	m	struct:	file:
notify	g_qt.cpp	/^    EModel *notify;$/;"	m	struct:	file:
now	con_x11.cpp	/^static Time now;$/;"	v	file:
num	c_bind.h	/^        long num;$/;"	m	union:
num	c_mode.h	/^    int num[BFI_COUNT];$/;"	m	struct:
num	cfte.cpp	/^    int num;$/;"	m	struct:_OrdLookup	file:
offset	cfte.cpp	/^long offset = -1;$/;"	v
ofsInvalid	log.cpp	/^static ofstream ofsInvalid;$/;"	v	file:
ok	gui.h	/^    int ok;$/;"	m	struct:
oldFrameProc	g_pm.cpp	/^    PFNWP oldFrameProc;$/;"	m	class:GFramePeer	file:
opM	h_perl.cpp	96;"	d	file:
opQ	h_perl.cpp	92;"	d	file:
opQQ	h_perl.cpp	93;"	d	file:
opQW	h_perl.cpp	94;"	d	file:
opQX	h_perl.cpp	95;"	d	file:
opS	h_perl.cpp	97;"	d	file:
opTR	h_perl.cpp	98;"	d	file:
open	e_buffer.h	/^    unsigned char open;$/;"	m	struct:
open	namemaps.h	18;"	d
opened	clip_pmv.cpp	/^    BOOL opened;$/;"	m	struct:	file:
operator ()	log.cpp	/^ostream& GlobalLog::operator()()$/;"	f	class:GlobalLog
operator bool	log.h	/^    operator bool() { return !m_ofsLog.fail(); }$/;"	f	class:GlobalLog
options	c_hilit.h	/^    long options;$/;"	m	struct:HState
ordinal	clip_pmv.cpp	/^    ULONG ordinal;$/;"	m	struct:impentry	file:
output	cfte.cpp	/^FILE *output = 0;$/;"	v
p	g_pm.cpp	/^    void *p;$/;"	m	struct:_PMPTR	file:
pItems	pm_tool.h	/^    ToolBarItem *pItems;$/;"	m	struct:
p_WinCloseClipbrd	clip_pmv.cpp	/^BOOL   (APIENTRY *p_WinCloseClipbrd)(HAB hab);$/;"	v
p_WinCreateMsgQueue	clip_pmv.cpp	/^HMQ    (APIENTRY *p_WinCreateMsgQueue)(HAB hab, LONG cmsg);$/;"	v
p_WinDestroyMsgQueue	clip_pmv.cpp	/^BOOL   (APIENTRY *p_WinDestroyMsgQueue)(HMQ hmq);$/;"	v
p_WinEmptyClipbrd	clip_pmv.cpp	/^BOOL   (APIENTRY *p_WinEmptyClipbrd)(HAB hab);$/;"	v
p_WinInitialize	clip_pmv.cpp	/^HAB    (APIENTRY *p_WinInitialize)(ULONG flOptions);$/;"	v
p_WinOpenClipbrd	clip_pmv.cpp	/^BOOL   (APIENTRY *p_WinOpenClipbrd)(HAB hab);$/;"	v
p_WinQueryClipbrdData	clip_pmv.cpp	/^ULONG  (APIENTRY *p_WinQueryClipbrdData)(HAB hab, ULONG fmt);$/;"	v
p_WinSetClipbrdData	clip_pmv.cpp	/^BOOL   (APIENTRY *p_WinSetClipbrdData)(HAB hab, ULONG ulData, ULONG fmt, ULONG rgfFmtInfo);$/;"	v
p_WinTerminate	clip_pmv.cpp	/^BOOL   (APIENTRY *p_WinTerminate)(HAB hab);$/;"	v
paintEvent	g_qt.cpp	/^void QEText::paintEvent(QPaintEvent *qe) {$/;"	f	class:QEText
parent	g_qt.cpp	/^    QEFrame(GFramePeer *peer, QWidget *parent = 0, const char *name = 0);$/;"	m	class:QEFrame	file:
parent	g_qt.cpp	/^    QEText(GViewPeer *peer, QWidget *parent = 0, const char *name = 0);$/;"	m	class:QEText	file:
parent	g_qt.cpp	/^    QEView(GViewPeer *peer, QWidget *parent = 0, const char *name = 0);$/;"	m	class:QEView	file:
parent	g_qt_dlg.cpp	/^    QChoiceBox(QWidget *parent=0, const char *name=0);$/;"	m	class:QChoiceBox	file:
pclose	sysdep.h	127;"	d
peer	g_qt.cpp	/^    QEFrame(GFramePeer *peer, QWidget *parent = 0, const char *name = 0);$/;"	m	class:QEFrame	file:
peer	g_qt.cpp	/^    QEText(GViewPeer *peer, QWidget *parent = 0, const char *name = 0);$/;"	m	class:QEText	file:
peer	g_qt.cpp	/^    QEView(GViewPeer *peer, QWidget *parent = 0, const char *name = 0);$/;"	m	class:QEView	file:
pid	con_linux.cpp	/^    int pid;$/;"	m	struct:	file:
pid	con_slang.cpp	/^    int pid;$/;"	m	struct:	file:
pid	con_x11.cpp	/^    int pid;$/;"	m	struct:	file:
pid	g_motif.cpp	/^    int pid;$/;"	m	struct:	file:
pid	g_qt.cpp	/^    int pid;$/;"	m	struct:	file:
pipe_list	con_dosx.cpp	/^struct pipe_list {$/;"	s	file:
pl	con_dosx.cpp	/^static struct pipe_list *pl = NULL;$/;"	v	file:
plDFree	port.h	/^struct plDFree$/;"	s
plFTime	port.h	/^struct plFTime$/;"	s
plKbdInfo	port.h	/^struct plKbdInfo$/;"	s
plsctCGA	port.h	/^	plsctCGA,		    \/\/ Color graphics adapter$/;"	e	enum:ePlScnType
plsctEGA	port.h	/^	plsctEGA,		    \/\/ EGA adapter,$/;"	e	enum:ePlScnType
plsctLast	port.h	/^	plsctLast$/;"	e	enum:ePlScnType
plsctMono	port.h	/^	plsctMono,		    \/\/ Monochrome adapter \/ unknown type,$/;"	e	enum:ePlScnType
plsctUnknown	port.h	/^	plsctUnknown,$/;"	e	enum:ePlScnType
plsctVGA	port.h	/^	plsctVGA,		    \/\/ VGA adapter,$/;"	e	enum:ePlScnType
pmData	g_pm.cpp	/^    PMData *pmData;$/;"	m	class:GViewPeer	file:
pointer	clip_pmv.cpp	/^    PFN *pointer;$/;"	m	struct:impentry	file:
popMark	e_mark.cpp	/^int EMarkIndex::popMark(EView *aView) {$/;"	f	class:EMarkIndex
popen	sysdep.h	126;"	d
pos	cfte.cpp	/^long pos = 0;$/;"	v
ppib	clip_pmv.cpp	/^    PPIB ppib;$/;"	m	struct:	file:
pressed	g_qt_dlg.cpp	/^void QChoiceBox::pressed() {$/;"	f	class:QChoiceBox
pushMark	e_mark.cpp	/^EMark *EMarkIndex::pushMark(EBuffer *aBuffer, EPoint P) {$/;"	f	class:EMarkIndex
qEvent	g_qt.cpp	/^} qEvent;$/;"	t	file:
qFrame	g_qt.cpp	/^    QEFrame *qFrame;$/;"	m	class:GFramePeer	file:
qGetEvent	g_qt.cpp	/^static void qGetEvent(TEvent &Event) {$/;"	f	file:
qHasEvent	g_qt.cpp	/^static int qHasEvent() {$/;"	f	file:
qPutEvent	g_qt.cpp	/^static int qPutEvent(TEvent &Event) {$/;"	f	file:
qView	g_qt.cpp	/^    QEView *qView;$/;"	m	class:GViewPeer	file:
q_code	g_qt.cpp	/^    unsigned int q_code;$/;"	m	struct:	file:
qmsg	clipprog.cpp	/^QMSG qmsg;$/;"	v
qmsg	clipserv.cpp	/^QMSG qmsg;$/;"	v
r	con_x11.cpp	/^    int r, g, b;$/;"	m	struct:	file:
raw_dchs	con_slang.cpp	/^static char raw_dchs[sizeof(slang_dchs)];$/;"	v	file:
rc	con_x11.cpp	/^static int rc;$/;"	v	file:
read	namemaps.h	19;"	d
reading	con_nt.cpp	/^    int reading, stopped;$/;"	m	struct:	file:
reading	con_os2.cpp	/^    int reading, stopped;$/;"	m	struct:	file:
reading	g_pm.cpp	/^    int reading, stopped;$/;"	m	struct:	file:
released	g_qt_dlg.cpp	/^void QChoiceBox::released() {$/;"	f	class:QChoiceBox
remapKey	con_i18n.h	/^struct remapKey {$/;"	s
remove	e_mark.cpp	/^int EMarkIndex::remove(char *aName) {$/;"	f	class:EMarkIndex
removeBuffer	e_mark.cpp	/^int EMark::removeBuffer(EBuffer *aBuffer) {$/;"	f	class:EMark
repeat	c_bind.h	/^    short repeat;$/;"	m	struct:
reportSize	g_pm.cpp	/^SHORT reportSize = 1;$/;"	v
resCount	gui.h	/^    int resCount;$/;"	m	struct:
reserved1	g_qt_dlg.cpp	/^    void *reserved1;$/;"	m	class:QChoiceBox	file:
reserved2	g_qt_dlg.cpp	/^    void *reserved2;$/;"	m	class:QChoiceBox	file:
resizeEvent	g_qt.cpp	/^void QEFrame::resizeEvent(QResizeEvent *qe) {$/;"	f	class:QEFrame
resizeEvent	g_qt.cpp	/^void QEText::resizeEvent(QResizeEvent *qe) {$/;"	f	class:QEText
resizeEvent	g_qt_dlg.cpp	/^void QChoiceBox::resizeEvent( QResizeEvent * ) {$/;"	f	class:QChoiceBox
retrieveForBuffer	e_mark.cpp	/^int EMarkIndex::retrieveForBuffer(EBuffer *aBuffer) {$/;"	f	class:EMarkIndex
rex	e_regex.cpp	/^static const char *rex;$/;"	v	file:
rlst	e_buffer.h	/^    RoutineList rlst;$/;"	m	class:EBuffer
root	g_motif.cpp	/^static Window root;$/;"	v	file:
rx	o_messages.cpp	/^    RxNode *rx;$/;"	m	struct:	file:
saveToDesktop	e_mark.cpp	/^int EMarkIndex::saveToDesktop(FILE *fp) {$/;"	f	class:EMarkIndex
savedtype	clip_pmv.cpp	/^    ULONG savedtype;$/;"	m	struct:	file:
sbHamount	g_motif.cpp	/^    int sbHstart, sbHamount, sbHtotal;$/;"	m	class:GViewPeer	file:
sbHamount	g_pm.cpp	/^    int sbHstart, sbHamount, sbHtotal;$/;"	m	class:GViewPeer	file:
sbHamount	g_qt.cpp	/^    int sbHstart, sbHamount, sbHtotal;$/;"	m	class:GViewPeer	file:
sbHamount	g_text.cpp	/^    int sbHstart, sbHamount, sbHtotal, sbHupdate;$/;"	m	class:GViewPeer	file:
sbHmoveLeft	g_qt.cpp	/^void QEView::sbHmoveLeft() {$/;"	f	class:QEView
sbHmoveRight	g_qt.cpp	/^void QEView::sbHmoveRight() {$/;"	f	class:QEView
sbHmoveTo	g_qt.cpp	/^void QEView::sbHmoveTo(int pos) {$/;"	f	class:QEView
sbHpageLeft	g_qt.cpp	/^void QEView::sbHpageLeft() {$/;"	f	class:QEView
sbHpageRight	g_qt.cpp	/^void QEView::sbHpageRight() {$/;"	f	class:QEView
sbHstart	g_motif.cpp	/^    int sbHstart, sbHamount, sbHtotal;$/;"	m	class:GViewPeer	file:
sbHstart	g_pm.cpp	/^    int sbHstart, sbHamount, sbHtotal;$/;"	m	class:GViewPeer	file:
sbHstart	g_qt.cpp	/^    int sbHstart, sbHamount, sbHtotal;$/;"	m	class:GViewPeer	file:
sbHstart	g_text.cpp	/^    int sbHstart, sbHamount, sbHtotal, sbHupdate;$/;"	m	class:GViewPeer	file:
sbHtotal	g_motif.cpp	/^    int sbHstart, sbHamount, sbHtotal;$/;"	m	class:GViewPeer	file:
sbHtotal	g_pm.cpp	/^    int sbHstart, sbHamount, sbHtotal;$/;"	m	class:GViewPeer	file:
sbHtotal	g_qt.cpp	/^    int sbHstart, sbHamount, sbHtotal;$/;"	m	class:GViewPeer	file:
sbHtotal	g_text.cpp	/^    int sbHstart, sbHamount, sbHtotal, sbHupdate;$/;"	m	class:GViewPeer	file:
sbHupdate	g_text.cpp	/^    int sbHstart, sbHamount, sbHtotal, sbHupdate;$/;"	m	class:GViewPeer	file:
sbVamount	g_motif.cpp	/^    int sbVstart, sbVamount, sbVtotal;$/;"	m	class:GViewPeer	file:
sbVamount	g_pm.cpp	/^    int sbVstart, sbVamount, sbVtotal;$/;"	m	class:GViewPeer	file:
sbVamount	g_qt.cpp	/^    int sbVstart, sbVamount, sbVtotal;$/;"	m	class:GViewPeer	file:
sbVamount	g_text.cpp	/^    int sbVstart, sbVamount, sbVtotal, sbVupdate;$/;"	m	class:GViewPeer	file:
sbVmoveDown	g_qt.cpp	/^void QEView::sbVmoveDown() {$/;"	f	class:QEView
sbVmoveTo	g_qt.cpp	/^void QEView::sbVmoveTo(int pos) {$/;"	f	class:QEView
sbVmoveUp	g_qt.cpp	/^void QEView::sbVmoveUp() {$/;"	f	class:QEView
sbVpageDown	g_qt.cpp	/^void QEView::sbVpageDown() {$/;"	f	class:QEView
sbVpageUp	g_qt.cpp	/^void QEView::sbVpageUp() {$/;"	f	class:QEView
sbVstart	g_motif.cpp	/^    int sbVstart, sbVamount, sbVtotal;$/;"	m	class:GViewPeer	file:
sbVstart	g_pm.cpp	/^    int sbVstart, sbVamount, sbVtotal;$/;"	m	class:GViewPeer	file:
sbVstart	g_qt.cpp	/^    int sbVstart, sbVamount, sbVtotal;$/;"	m	class:GViewPeer	file:
sbVstart	g_text.cpp	/^    int sbVstart, sbVamount, sbVtotal, sbVupdate;$/;"	m	class:GViewPeer	file:
sbVtotal	g_motif.cpp	/^    int sbVstart, sbVamount, sbVtotal;$/;"	m	class:GViewPeer	file:
sbVtotal	g_pm.cpp	/^    int sbVstart, sbVamount, sbVtotal;$/;"	m	class:GViewPeer	file:
sbVtotal	g_qt.cpp	/^    int sbVstart, sbVamount, sbVtotal;$/;"	m	class:GViewPeer	file:
sbVtotal	g_text.cpp	/^    int sbVstart, sbVamount, sbVtotal, sbVupdate;$/;"	m	class:GViewPeer	file:
sbVupdate	g_text.cpp	/^    int sbVstart, sbVamount, sbVtotal, sbVupdate;$/;"	m	class:GViewPeer	file:
screen	g_motif.cpp	/^static int screen;$/;"	v	file:
scrollBreak	g_text.cpp	/^static inline int scrollBreak(TEvent &E)$/;"	f	file:
selectedMain	g_qt.cpp	/^void QEFrame::selectedMain(int id) {$/;"	f	class:QEFrame
selection_buffer	con_x11.cpp	/^static Atom selection_buffer;$/;"	v	file:
seof	h_sh.cpp	/^static char seof[MAXSEOF];$/;"	v	file:
setBuffer	e_mark.cpp	/^int EMark::setBuffer(EBuffer *aBuffer) {$/;"	f	class:EMark
setText	g_qt_dlg.cpp	/^void QChoiceBox::setText(const char *text) {$/;"	f	class:QChoiceBox
setUserPosition	con_x11.cpp	/^static int setUserPosition = 0;$/;"	v	file:
setViewPos	g_qt.cpp	/^void QEView::setViewPos(int x, int y, int w, int h) {$/;"	f	class:QEView
setmode	namemaps.h	20;"	d
sfFocus	g_motif.cpp	64;"	d	file:
sfFocus	g_pm.cpp	99;"	d	file:
sfFocus	g_qt.cpp	62;"	d	file:
sfFocus	g_text.cpp	44;"	d	file:
shftright	con_nt.cpp	/^char shftright[] = "`1234567890-=[]\\\\;',.\/";$/;"	v
shftwrng	con_nt.cpp	/^char shftwrng[]  = "~!@#$%^&*()_+{}|:\\"<>?";$/;"	v
shift_state	con_linux.cpp	/^int shift_state = 0;$/;"	v
size	s_direct.h	/^    off_t size;$/;"	m	class:FileInfo
sizeHints	con_x11.cpp	/^static XSizeHints sizeHints;$/;"	v	file:
slang_colors	con_slang.cpp	/^static const char *slang_colors[] =$/;"	v	file:
slang_dchs	con_slang.cpp	/^static char slang_dchs[] =$/;"	v	file:
slen	cfte.cpp	27;"	d	file:
slock_state	con_linux.cpp	/^int slock_state = 0;$/;"	v
sopen	namemaps.h	21;"	d
speckeymap	compkeys.cpp	/^static keymapper speckeymap[]={$/;"	v	file:
speckeys	con_slang.cpp	/^static TKeyCode speckeys[] =$/;"	v	file:
stack	i_search.h	/^    EPoint stack[MAXISEARCH];$/;"	m	class:ExISearch
stacklen	i_search.h	/^    int stacklen;$/;"	m	class:ExISearch
state	c_hilit.h	/^    HState *state;$/;"	m	class:HMachine
state	i_search.h	/^    IState state;$/;"	m	class:ExISearch
stateCount	c_hilit.h	/^    int stateCount;$/;"	m	class:HMachine
stopped	con_dosx.cpp	/^	int stopped;$/;"	m	struct:	file:
stopped	con_linux.cpp	/^    int stopped;$/;"	m	struct:	file:
stopped	con_nt.cpp	/^    int reading, stopped;$/;"	m	struct:	file:
stopped	con_os2.cpp	/^    int reading, stopped;$/;"	m	struct:	file:
stopped	con_slang.cpp	/^    int stopped;$/;"	m	struct:	file:
stopped	con_x11.cpp	/^    int stopped;$/;"	m	struct:	file:
stopped	g_motif.cpp	/^    int stopped;$/;"	m	struct:	file:
stopped	g_pm.cpp	/^    int reading, stopped;$/;"	m	struct:	file:
stopped	g_qt.cpp	/^    int stopped;$/;"	m	struct:	file:
storeForBuffer	e_mark.cpp	/^int EMarkIndex::storeForBuffer(EBuffer *aBuffer) {$/;"	f	class:EMarkIndex
str	c_mode.h	/^    char *str[BFS_COUNT];$/;"	m	struct:
strReplace	gui.h	/^    char strReplace[MAXSEARCH];$/;"	m	struct:
strSearch	gui.h	/^    char strSearch[MAXSEARCH];$/;"	m	struct:
stricmp	sysdep.h	62;"	d
string	c_bind.h	/^        char *string;$/;"	m	union:
strnicmp	sysdep.h	61;"	d
suspendLoads	o_buffer.cpp	/^int suspendLoads = 0;$/;"	v
swp	g_pm.cpp	/^SWP swp;$/;"	v
sz	c_config.cpp	/^    int sz;$/;"	m	struct:_CurPos	file:
sz	cfte.cpp	/^    int sz;$/;"	m	struct:_CurPos	file:
szClient	g_pm.cpp	/^static char szClient[] = "EViewer";$/;"	v	file:
szCreator	g_pm.cpp	/^static char szCreator[] = "ECreator";$/;"	v	file:
szObject	g_pm.cpp	/^static char szObject[] = "EWorker";$/;"	v	file:
tab	con_i18n.h	/^    struct remapKey *tab;$/;"	m	struct:keyboardRec
targets	con_x11.cpp	/^static Atom targets;$/;"	v	file:
tell	namemaps.h	22;"	d
temp_name	con_dosx.cpp	/^  char *command, mode[10], temp_name[L_tmpnam];$/;"	m	struct:pipe_list	file:
text	o_messages.h	/^    char *text;$/;"	m	struct:
tfDEPRESSED	pm_tool.h	8;"	d
tfDISABLED	pm_tool.h	7;"	d
tiBITMAP	pm_tool.h	4;"	d
tiSEPARATOR	pm_tool.h	5;"	d
tid	con_os2.cpp	/^    TID tid;$/;"	m	struct:	file:
tid	g_pm.cpp	/^    TID tid;$/;"	m	struct:	file:
timerDone	g_qt.cpp	/^void QEFrame::timerDone() {$/;"	f	class:QEFrame
tmLeft	e_buffer.h	28;"	d
tmNone	e_buffer.h	27;"	d
tmRight	e_buffer.h	29;"	d
toScreen	con_linux.cpp	/^static unsigned char toScreen[256];$/;"	v	file:
tools	g_pm.cpp	/^ToolBarItem tools[] =$/;"	v
tools	g_pm.cpp	/^} tools[] =$/;"	v
trans	c_hilit.h	/^    HTrans *trans;$/;"	m	class:HMachine
transCount	c_hilit.h	/^    int transCount;$/;"	m	class:HMachine
transCount	c_hilit.h	/^    int transCount;$/;"	m	struct:HState
true	log.h	97;"	d
type	c_bind.h	/^    int type;$/;"	m	struct:
type	s_direct.h	/^    int type;$/;"	m	class:FileInfo
u	c_bind.h	/^    } u;$/;"	m	struct:
ucBlock	e_undo.h	33;"	d
ucDelChars	e_undo.h	27;"	d
ucDelLine	e_undo.h	25;"	d
ucFoldClose	e_undo.h	41;"	d
ucFoldCreate	e_undo.h	36;"	d
ucFoldDemote	e_undo.h	39;"	d
ucFoldDestroy	e_undo.h	37;"	d
ucFoldOpen	e_undo.h	40;"	d
ucFoldPromote	e_undo.h	38;"	d
ucInsChars	e_undo.h	26;"	d
ucInsLine	e_undo.h	24;"	d
ucJoinLine	e_undo.h	29;"	d
ucModified	e_undo.h	34;"	d
ucPosition	e_undo.h	32;"	d
ucSplitLine	e_undo.h	30;"	d
ulCommand	pm_tool.h	/^    ULONG ulCommand;$/;"	m	struct:
ulCount	pm_tool.h	/^    LONG ulCount;$/;"	m	struct:
ulDepressed	pm_tool.h	/^    LONG ulDepressed;$/;"	m	struct:
ulFlags	pm_tool.h	/^    ULONG ulFlags;$/;"	m	struct:
ulId	pm_tool.h	/^    ULONG ulId;$/;"	m	struct:
ulType	pm_tool.h	/^    ULONG ulType;$/;"	m	struct:
umDelete	e_buffer.h	22;"	d
umInsert	e_buffer.h	23;"	d
umJoinLine	e_buffer.h	25;"	d
umSplitLine	e_buffer.h	24;"	d
umask	namemaps.h	23;"	d
unlink	namemaps.h	24;"	d
up	menu_text.cpp	/^    class UpMenu *up;$/;"	m	class:UpMenu	file:
useXMB	con_x11.cpp	/^static int useXMB = 0;$/;"	v	file:
useXMB	con_x11.cpp	/^static int useXMB = 1; \/\/ default is yes$/;"	v	file:
use_esc_hack	con_slang.cpp	/^int use_esc_hack = 0;$/;"	v
used	con_dosx.cpp	/^	int used;$/;"	m	struct:	file:
used	con_linux.cpp	/^    int used;$/;"	m	struct:	file:
used	con_nt.cpp	/^    int used;$/;"	m	struct:	file:
used	con_os2.cpp	/^    int used;$/;"	m	struct:	file:
used	con_slang.cpp	/^    int used;$/;"	m	struct:	file:
used	con_x11.cpp	/^    int used;$/;"	m	struct:	file:
used	g_motif.cpp	/^    int used;$/;"	m	struct:	file:
used	g_pm.cpp	/^    int used;$/;"	m	struct:	file:
used	g_qt.cpp	/^    int used;$/;"	m	struct:	file:
vert	menu_text.cpp	/^    int vert;$/;"	m	class:UpMenu	file:
view	e_mark.cpp	/^int EMarkIndex::view(EView *aView, char *aName) {$/;"	f	class:EMarkIndex
vk	g_pm.cpp	/^    int vk;$/;"	m	struct:	file:
w	menu_text.cpp	/^    int x, y, w, h;$/;"	m	class:UpMenu	file:
w	port.h	/^	struct dosxWreg 	w;$/;"	m	union:dosxReg
wH	g_motif.cpp	/^    int wW, wH, wState, wRefresh;$/;"	m	class:GViewPeer	file:
wH	g_pm.cpp	/^    int wW, wH, wState;$/;"	m	class:GViewPeer	file:
wH	g_qt.cpp	/^    int wW, wH, wState, wRefresh;$/;"	m	class:GViewPeer	file:
wH	g_text.cpp	/^    int wX, wY, wW, wH, wState;$/;"	m	class:GViewPeer	file:
wRefresh	g_motif.cpp	/^    int wW, wH, wState, wRefresh;$/;"	m	class:GViewPeer	file:
wRefresh	g_qt.cpp	/^    int wW, wH, wState, wRefresh;$/;"	m	class:GViewPeer	file:
wState	g_motif.cpp	/^    int wW, wH, wState, wRefresh;$/;"	m	class:GViewPeer	file:
wState	g_pm.cpp	/^    int wW, wH, wState;$/;"	m	class:GViewPeer	file:
wState	g_qt.cpp	/^    int wW, wH, wState, wRefresh;$/;"	m	class:GViewPeer	file:
wState	g_text.cpp	/^    int wX, wY, wW, wH, wState;$/;"	m	class:GViewPeer	file:
wW	g_motif.cpp	/^    int wW, wH, wState, wRefresh;$/;"	m	class:GViewPeer	file:
wW	g_pm.cpp	/^    int wW, wH, wState;$/;"	m	class:GViewPeer	file:
wW	g_qt.cpp	/^    int wW, wH, wState, wRefresh;$/;"	m	class:GViewPeer	file:
wW	g_text.cpp	/^    int wX, wY, wW, wH, wState;$/;"	m	class:GViewPeer	file:
wX	g_text.cpp	/^    int wX, wY, wW, wH, wState;$/;"	m	class:GViewPeer	file:
wY	g_text.cpp	/^    int wX, wY, wW, wH, wState;$/;"	m	class:GViewPeer	file:
win	con_x11.cpp	/^static Window win;$/;"	v	file:
winSTitle	con_nt.cpp	/^static char winSTitle[256] = "FTE";$/;"	v	file:
winSTitle	con_x11.cpp	/^static char winSTitle[256] = "FTE";$/;"	v	file:
winTitle	con_nt.cpp	/^static char winTitle[256] = "FTE";$/;"	v	file:
winTitle	con_x11.cpp	/^static char winTitle[256] = "FTE";$/;"	v	file:
wm_delete_window	con_x11.cpp	/^static Atom wm_delete_window;$/;"	v	file:
wm_protocols	con_x11.cpp	/^static Atom wm_protocols;$/;"	v	file:
wordChars	c_hilit.h	/^    char *wordChars;$/;"	m	struct:HState
wordCount	cfte.cpp	/^unsigned int wordCount = 0;$/;"	v
words	cfte.cpp	/^char **words = 0;$/;"	v
write	namemaps.h	25;"	d
x	menu_text.cpp	/^    int x, y, w, h;$/;"	m	class:UpMenu	file:
x	port.h	/^	struct dosxEreg 	x;$/;"	m	union:dosxReg
xic	con_x11.cpp	/^XIC xic = NULL;$/;"	v
xpclose	con_dosx.cpp	/^xpclose (FILE *pp)$/;"	f	file:
xpopen	con_dosx.cpp	/^xpopen (const char *cm, const char *md) \/* program name, pipe mode *\/$/;"	f	file:
y	menu_text.cpp	/^    int x, y, w, h;$/;"	m	class:UpMenu	file:
z	c_config.cpp	/^    const char *z;$/;"	m	struct:_CurPos	file:
z	cfte.cpp	/^    char *z;$/;"	m	struct:_CurPos	file:
~BufferView	o_buflist.cpp	/^BufferView::~BufferView() {$/;"	f	class:BufferView
~EAbbrev	c_bind.cpp	/^EAbbrev::~EAbbrev() {$/;"	f	class:EAbbrev
~EBuffer	e_buffer.cpp	/^EBuffer::~EBuffer() {$/;"	f	class:EBuffer
~EColorize	c_hilit.cpp	/^EColorize::~EColorize() {$/;"	f	class:EColorize
~EDirectory	o_directory.cpp	/^EDirectory::~EDirectory() {$/;"	f	class:EDirectory
~EEditPort	o_buffer.cpp	/^EEditPort::~EEditPort() {$/;"	f	class:EEditPort
~EEventMap	c_bind.cpp	/^EEventMap::~EEventMap() {$/;"	f	class:EEventMap
~EFrame	egui.cpp	/^EFrame::~EFrame() {$/;"	f	class:EFrame
~EGUI	egui.cpp	/^EGUI::~EGUI() {$/;"	f	class:EGUI
~EKey	c_bind.cpp	/^EKey::~EKey()$/;"	f	class:EKey
~EKeyMap	c_bind.cpp	/^EKeyMap::~EKeyMap() {$/;"	f	class:EKeyMap
~ELine	e_line.cpp	/^ELine::~ELine() {$/;"	f	class:ELine
~EList	o_list.cpp	/^EList::~EList() {$/;"	f	class:EList
~EListPort	o_list.cpp	/^EListPort::~EListPort() {$/;"	f	class:EListPort
~EMark	e_mark.cpp	/^EMark::~EMark() {$/;"	f	class:EMark
~EMarkIndex	e_mark.cpp	/^EMarkIndex::~EMarkIndex() {$/;"	f	class:EMarkIndex
~EMessages	o_messages.cpp	/^EMessages::~EMessages() {$/;"	f	class:EMessages
~EMode	c_bind.cpp	/^EMode::~EMode() {$/;"	f	class:EMode
~EModel	o_model.cpp	/^EModel::~EModel() {$/;"	f	class:EModel
~EPoint	e_buffer.h	/^    ~EPoint() {}$/;"	f	class:EPoint
~EView	view.cpp	/^EView::~EView() {$/;"	f	class:EView
~EViewPort	o_model.cpp	/^EViewPort::~EViewPort() {}$/;"	f	class:EViewPort
~EventMapView	o_modemap.cpp	/^EventMapView::~EventMapView() {$/;"	f	class:EventMapView
~ExASCII	i_ascii.cpp	/^ExASCII::~ExASCII() {$/;"	f	class:ExASCII
~ExChoice	i_choice.cpp	/^ExChoice::~ExChoice() {$/;"	f	class:ExChoice
~ExComplete	i_complete.cpp	/^ExComplete::~ExComplete()$/;"	f	class:ExComplete
~ExISearch	i_search.cpp	/^ExISearch::~ExISearch() {$/;"	f	class:ExISearch
~ExInput	i_input.cpp	/^ExInput::~ExInput() {$/;"	f	class:ExInput
~ExKey	i_key.cpp	/^ExKey::~ExKey() {$/;"	f	class:ExKey
~ExModelView	i_modelview.cpp	/^ExModelView::~ExModelView() {$/;"	f	class:ExModelView
~ExView	i_oview.cpp	/^ExView::~ExView() {$/;"	f	class:ExView
~FileFind	s_direct.cpp	/^FileFind::~FileFind() {$/;"	f	class:FileFind
~FileInfo	s_direct.cpp	/^FileInfo::~FileInfo() {$/;"	f	class:FileInfo
~FunctionLog	log.cpp	/^FunctionLog::~FunctionLog()$/;"	f	class:FunctionLog
~GFrame	g_motif.cpp	/^GFrame::~GFrame() {$/;"	f	class:GFrame
~GFrame	g_pm.cpp	/^GFrame::~GFrame() {$/;"	f	class:GFrame
~GFrame	g_qt.cpp	/^GFrame::~GFrame() {$/;"	f	class:GFrame
~GFrame	g_text.cpp	/^GFrame::~GFrame() {$/;"	f	class:GFrame
~GFramePeer	g_motif.cpp	/^GFramePeer::~GFramePeer() {$/;"	f	class:GFramePeer
~GFramePeer	g_pm.cpp	/^GFramePeer::~GFramePeer() {$/;"	f	class:GFramePeer
~GFramePeer	g_qt.cpp	/^GFramePeer::~GFramePeer() {$/;"	f	class:GFramePeer
~GFramePeer	g_text.cpp	/^GFramePeer::~GFramePeer() {$/;"	f	class:GFramePeer
~GUI	con_dosx.cpp	/^GUI::~GUI() {$/;"	f	class:GUI
~GUI	con_linux.cpp	/^GUI::~GUI() {$/;"	f	class:GUI
~GUI	con_nt.cpp	/^GUI::~GUI() { \/*FOLD00*\/$/;"	f	class:GUI
~GUI	con_os2.cpp	/^GUI::~GUI() {$/;"	f	class:GUI
~GUI	con_slang.cpp	/^GUI::~GUI()$/;"	f	class:GUI
~GUI	con_x11.cpp	/^GUI::~GUI() {$/;"	f	class:GUI
~GUI	g_motif.cpp	/^GUI::~GUI() {$/;"	f	class:GUI
~GUI	g_pm.cpp	/^GUI::~GUI() {$/;"	f	class:GUI
~GUI	g_qt.cpp	/^GUI::~GUI() {$/;"	f	class:GUI
~GView	g_motif.cpp	/^GView::~GView() {$/;"	f	class:GView
~GView	g_pm.cpp	/^GView::~GView() {$/;"	f	class:GView
~GView	g_qt.cpp	/^GView::~GView() {$/;"	f	class:GView
~GView	g_text.cpp	/^GView::~GView() {$/;"	f	class:GView
~GViewPeer	g_motif.cpp	/^GViewPeer::~GViewPeer() {$/;"	f	class:GViewPeer
~GViewPeer	g_pm.cpp	/^GViewPeer::~GViewPeer() {$/;"	f	class:GViewPeer
~GViewPeer	g_qt.cpp	/^GViewPeer::~GViewPeer() {$/;"	f	class:GViewPeer
~GViewPeer	g_text.cpp	/^GViewPeer::~GViewPeer() {$/;"	f	class:GViewPeer
~GlobalLog	log.h	/^    virtual ~GlobalLog() {free((void*)m_strLogFile);}$/;"	f	class:GlobalLog
~GxView	i_view.cpp	/^GxView::~GxView() {$/;"	f	class:GxView
~HMachine	c_hilit.cpp	/^HMachine::~HMachine() {$/;"	f	class:HMachine
~QEText	g_qt.cpp	/^QEText::~QEText() {$/;"	f	class:QEText
~QEView	g_qt.cpp	/^QEView::~QEView() {$/;"	f	class:QEView
~RoutineView	o_routine.cpp	/^RoutineView::~RoutineView() {$/;"	f	class:RoutineView
