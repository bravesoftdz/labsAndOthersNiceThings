/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 40000000000.0;
	SIMULATION_TIME = 40000000000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 1000000000.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("A")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("A[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "A";
}

SIGNAL("A[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "A";
}

SIGNAL("A[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "A";
}

SIGNAL("A[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "A";
}

SIGNAL("B")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("B[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "B";
}

SIGNAL("B[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "B";
}

SIGNAL("B[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "B";
}

SIGNAL("B[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "B";
}

SIGNAL("carryin")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("carryout")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("S")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("S[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "S";
}

SIGNAL("S[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "S";
}

SIGNAL("S[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "S";
}

SIGNAL("S[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "S";
}

TRANSITION_LIST("A[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 8000000000.0;
			LEVEL 1 FOR 8000000000.0;
		}
		LEVEL 0 FOR 8000000000.0;
	}
}

TRANSITION_LIST("A[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 4000000000.0;
			LEVEL 1 FOR 4000000000.0;
		}
	}
}

TRANSITION_LIST("A[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 10;
			LEVEL 0 FOR 2000000000.0;
			LEVEL 1 FOR 2000000000.0;
		}
	}
}

TRANSITION_LIST("A[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 20;
			LEVEL 0 FOR 1000000000.0;
			LEVEL 1 FOR 1000000000.0;
		}
	}
}

TRANSITION_LIST("B[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 8000000000.0;
			LEVEL 1 FOR 8000000000.0;
		}
		LEVEL 0 FOR 8000000000.0;
	}
}

TRANSITION_LIST("B[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 4000000000.0;
			LEVEL 1 FOR 4000000000.0;
		}
	}
}

TRANSITION_LIST("B[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 10;
			LEVEL 0 FOR 2000000000.0;
			LEVEL 1 FOR 2000000000.0;
		}
	}
}

TRANSITION_LIST("B[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 20;
			LEVEL 0 FOR 1000000000.0;
			LEVEL 1 FOR 1000000000.0;
		}
	}
}

TRANSITION_LIST("carryin")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 16000000000.0;
			LEVEL 1 FOR 16000000000.0;
		}
		LEVEL 0 FOR 8000000000.0;
	}
}

TRANSITION_LIST("carryout")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8000000009.529;
		LEVEL 1 FOR 8000000000.048;
		LEVEL 0 FOR 7999999999.952;
		LEVEL 1 FOR 8000000000.048;
		LEVEL 0 FOR 7999999990.423;
	}
}

TRANSITION_LIST("S[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 4000000010.268;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 3999999999.346;
			LEVEL 0 FOR 0.361;
			LEVEL 1 FOR 0.431;
			LEVEL 0 FOR 3999999999.862;
			LEVEL 1 FOR 3999999999.54;
			LEVEL 0 FOR 0.39;
			LEVEL 1 FOR 0.208;
			LEVEL 0 FOR 3999999999.862;
		}
		LEVEL 1 FOR 3999999989.732;
	}
}

TRANSITION_LIST("S[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2000000009.469;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 1999999999.224;
			LEVEL 0 FOR 0.275;
			LEVEL 1 FOR 0.501;
			LEVEL 0 FOR 2000000000.0;
			LEVEL 1 FOR 1999999999.397;
			LEVEL 0 FOR 0.271;
			LEVEL 1 FOR 0.332;
			LEVEL 0 FOR 2000000000.0;
		}
		LEVEL 1 FOR 1999999999.224;
		LEVEL 0 FOR 0.275;
		LEVEL 1 FOR 0.501;
		LEVEL 0 FOR 2000000000.0;
		LEVEL 1 FOR 1999999990.531;
	}
}

TRANSITION_LIST("S[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000000010.359;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 999999999.018;
			LEVEL 0 FOR 0.476;
			LEVEL 1 FOR 0.434;
			LEVEL 0 FOR 1000000000.072;
			LEVEL 1 FOR 999999999.194;
			LEVEL 0 FOR 0.507;
			LEVEL 1 FOR 0.227;
			LEVEL 0 FOR 1000000000.072;
		}
		LEVEL 1 FOR 999999999.018;
		LEVEL 0 FOR 0.476;
		LEVEL 1 FOR 0.434;
		LEVEL 0 FOR 1000000000.072;
		LEVEL 1 FOR 999999999.194;
		LEVEL 0 FOR 0.507;
		LEVEL 1 FOR 0.227;
		LEVEL 0 FOR 999999999.898;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 999999999.192;
			LEVEL 0 FOR 0.476;
			LEVEL 1 FOR 0.57;
			LEVEL 0 FOR 999999999.762;
			LEVEL 1 FOR 999999999.368;
			LEVEL 0 FOR 0.507;
			LEVEL 1 FOR 0.363;
			LEVEL 0 FOR 999999999.762;
		}
		LEVEL 1 FOR 999999999.192;
		LEVEL 0 FOR 0.476;
		LEVEL 1 FOR 0.57;
		LEVEL 0 FOR 999999999.762;
		LEVEL 1 FOR 999999999.368;
		LEVEL 0 FOR 0.507;
		LEVEL 1 FOR 0.363;
		LEVEL 0 FOR 999999999.936;
		LEVEL 1 FOR 999999999.018;
		LEVEL 0 FOR 0.476;
		LEVEL 1 FOR 0.434;
		LEVEL 0 FOR 1000000000.072;
		LEVEL 1 FOR 999999999.194;
		LEVEL 0 FOR 0.507;
		LEVEL 1 FOR 0.227;
		LEVEL 0 FOR 1000000000.072;
		LEVEL 1 FOR 999999999.018;
		LEVEL 0 FOR 0.476;
		LEVEL 1 FOR 0.434;
		LEVEL 0 FOR 1000000000.072;
		LEVEL 1 FOR 999999989.641;
	}
}

TRANSITION_LIST("S[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000000008.564;
		NODE
		{
			REPEAT = 7;
			LEVEL 1 FOR 0.028;
			LEVEL 0 FOR 1999999999.972;
		}
		LEVEL 1 FOR 0.028;
		LEVEL 0 FOR 1000000000.644;
		LEVEL 1 FOR 999999999.182;
		NODE
		{
			REPEAT = 7;
			LEVEL 0 FOR 0.328;
			LEVEL 1 FOR 999999999.926;
			LEVEL 0 FOR 0.282;
			LEVEL 1 FOR 999999999.464;
		}
		LEVEL 0 FOR 0.328;
		LEVEL 1 FOR 999999999.926;
		LEVEL 0 FOR 0.282;
		LEVEL 1 FOR 0.207;
		LEVEL 0 FOR 999999999.403;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 0.028;
			LEVEL 0 FOR 1999999999.972;
		}
		LEVEL 1 FOR 0.028;
		LEVEL 0 FOR 999999991.408;
	}
}

DISPLAY_LINE
{
	CHANNEL = "A";
	EXPAND_STATUS = EXPANDED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4;
}

DISPLAY_LINE
{
	CHANNEL = "A[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "A[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "A[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "A[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "B";
	EXPAND_STATUS = EXPANDED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
	CHILDREN = 6, 7, 8, 9;
}

DISPLAY_LINE
{
	CHANNEL = "B[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "B[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "B[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "B[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "carryin";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "carryout";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "S";
	EXPAND_STATUS = EXPANDED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
	CHILDREN = 13, 14, 15, 16;
}

DISPLAY_LINE
{
	CHANNEL = "S[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "S[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "S[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "S[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 12;
}

TIME_BAR
{
	TIME = 22250;
	MASTER = TRUE;
}
;
